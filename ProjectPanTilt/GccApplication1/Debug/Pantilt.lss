
Pantilt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000044b4  00004548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000044b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000105  00800150  00800150  00004598  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004598  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000045f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a8  00000000  00000000  00004634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d83  00000000  00000000  00004bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a2b  00000000  00000000  0000b95f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003bb8  00000000  00000000  0000d38a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000118c  00000000  00000000  00010f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f98  00000000  00000000  000120d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000063ac  00000000  00000000  00014068  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000620  00000000  00000000  0001a414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      10:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      14:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      18:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__vector_6>
      1c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      20:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      24:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      28:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      2c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      30:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      34:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      38:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      3c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      40:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      44:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      48:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      4c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      50:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      54:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      58:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      5c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      60:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      64:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      68:	1f 17       	cp	r17, r31
      6a:	1f 17       	cp	r17, r31
      6c:	1f 17       	cp	r17, r31
      6e:	4f 17       	cp	r20, r31
      70:	57 17       	cp	r21, r23
      72:	67 17       	cp	r22, r23
      74:	1f 17       	cp	r17, r31
      76:	1f 17       	cp	r17, r31
      78:	4f 17       	cp	r20, r31
      7a:	57 17       	cp	r21, r23
      7c:	03 6e       	ori	r16, 0xE3	; 227
      7e:	db 36       	cpi	r29, 0x6B	; 107
      80:	3d 9a       	sbi	0x07, 5	; 7
      82:	99 99       	sbic	0x13, 1	; 19
      84:	99 3d       	cpi	r25, 0xD9	; 217
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	3e 00       	.word	0x003e	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 4a       	sbci	r16, 0xA8	; 168
      92:	d7 3b       	cpi	r29, 0xB7	; 183
      94:	3b ce       	rjmp	.-906    	; 0xfffffd0c <__eeprom_end+0xff7efd0c>
      96:	01 6e       	ori	r16, 0xE1	; 225
      98:	84 bc       	out	0x24, r8	; 36
      9a:	bf fd       	.word	0xfdbf	; ????
      9c:	c1 2f       	mov	r28, r17
      9e:	3d 6c       	ori	r19, 0xCD	; 205
      a0:	74 31       	cpi	r23, 0x14	; 20
      a2:	9a bd       	out	0x2a, r25	; 42
      a4:	56 83       	std	Z+6, r21	; 0x06
      a6:	3d da       	rcall	.-2950   	; 0xfffff522 <__eeprom_end+0xff7ef522>
      a8:	3d 00       	.word	0x003d	; ????
      aa:	c7 7f       	andi	r28, 0xF7	; 247
      ac:	11 be       	out	0x31, r1	; 49
      ae:	d9 e4       	ldi	r29, 0x49	; 73
      b0:	bb 4c       	sbci	r27, 0xCB	; 203
      b2:	3e 91       	ld	r19, -X
      b4:	6b aa       	std	Y+51, r6	; 0x33
      b6:	aa be       	out	0x3a, r10	; 58
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	3f 07       	cpc	r19, r31
      be:	2c 7a       	andi	r18, 0xAC	; 172
      c0:	a5 ba       	out	0x15, r10	; 21
      c2:	6c c5       	rjmp	.+2776   	; 0xb9c <MahonyAHRSupdateIMU+0x1ba>
      c4:	90 da       	rcall	.-2784   	; 0xfffff5e6 <__eeprom_end+0xff7ef5e6>
      c6:	3b 93       	.word	0x933b	; ????
      c8:	65 fc       	sbrc	r6, 5
      ca:	8b bc       	out	0x2b, r8	; 43
      cc:	53 f8       	bld	r5, 3
      ce:	10 fd       	sbrc	r17, 0
      d0:	3c 56       	subi	r19, 0x6C	; 108
      d2:	92 83       	std	Z+2, r25	; 0x02
      d4:	4d bd       	out	0x2d, r20	; 45
      d6:	87 9d       	mul	r24, r7
      d8:	3a b6       	in	r3, 0x3a	; 58
      da:	3d cb       	rjmp	.-2438   	; 0xfffff756 <__eeprom_end+0xff7ef756>
      dc:	c9 bf       	out	0x39, r28	; 57
      de:	5b be       	out	0x3b, r5	; 59
      e0:	73 da       	rcall	.-2842   	; 0xfffff5c8 <__eeprom_end+0xff7ef5c8>
      e2:	0f c9       	rjmp	.-3554   	; 0xfffff302 <__eeprom_end+0xff7ef302>
      e4:	3f 00       	.word	0x003f	; ????

000000e6 <__trampolines_end>:
      e6:	6e 61       	ori	r22, 0x1E	; 30
      e8:	6e 00       	.word	0x006e	; ????

000000ea <__c.2332>:
      ea:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      fa:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1aa:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1ba:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ca:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1da:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d8 e0       	ldi	r29, 0x08	; 8
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61

000001f4 <__do_copy_data>:
     1f4:	11 e0       	ldi	r17, 0x01	; 1
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	e4 eb       	ldi	r30, 0xB4	; 180
     1fc:	f4 e4       	ldi	r31, 0x44	; 68
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <__do_copy_data+0x10>
     200:	05 90       	lpm	r0, Z+
     202:	0d 92       	st	X+, r0
     204:	a0 35       	cpi	r26, 0x50	; 80
     206:	b1 07       	cpc	r27, r17
     208:	d9 f7       	brne	.-10     	; 0x200 <__do_copy_data+0xc>

0000020a <__do_clear_bss>:
     20a:	22 e0       	ldi	r18, 0x02	; 2
     20c:	a0 e5       	ldi	r26, 0x50	; 80
     20e:	b1 e0       	ldi	r27, 0x01	; 1
     210:	01 c0       	rjmp	.+2      	; 0x214 <.do_clear_bss_start>

00000212 <.do_clear_bss_loop>:
     212:	1d 92       	st	X+, r1

00000214 <.do_clear_bss_start>:
     214:	a5 35       	cpi	r26, 0x55	; 85
     216:	b2 07       	cpc	r27, r18
     218:	e1 f7       	brne	.-8      	; 0x212 <.do_clear_bss_loop>
     21a:	0e 94 13 01 	call	0x226	; 0x226 <main>
     21e:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <_exit>

00000222 <__bad_interrupt>:
     222:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000226 <main>:
char MyString[10];
/*-----------------------------------------------------*/
int main(void)
{
	/* Replace with your application code */
	UART_init(BAUD_PRESCALER);
     226:	87 e6       	ldi	r24, 0x67	; 103
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 32 18 	call	0x3064	; 0x3064 <UART_init>
	I2C_Init();
     22e:	0e 94 94 17 	call	0x2f28	; 0x2f28 <I2C_Init>
	MPU_Init();
     232:	0e 94 49 0b 	call	0x1692	; 0x1692 <MPU_Init>
	ADC_Init();
     236:	0e 94 33 01 	call	0x266	; 0x266 <ADC_Init>
	initialize_pwm_2servos();
     23a:	0e 94 a5 01 	call	0x34a	; 0x34a <initialize_pwm_2servos>
	initialize_pwm_joyservo();
     23e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <initialize_pwm_joyservo>
	sprintf(MyString,"Init OK");
     242:	88 e0       	ldi	r24, 0x08	; 8
     244:	e2 e2       	ldi	r30, 0x22	; 34
     246:	f1 e0       	ldi	r31, 0x01	; 1
     248:	ab e1       	ldi	r26, 0x1B	; 27
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	01 90       	ld	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	8a 95       	dec	r24
     252:	e1 f7       	brne	.-8      	; 0x24c <main+0x26>
	UART_putstring(MyString);
     254:	8b e1       	ldi	r24, 0x1B	; 27
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	0e 94 49 18 	call	0x3092	; 0x3092 <UART_putstring>
	
	MytaskCreate();
     25c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <MytaskCreate>
	vTaskStartScheduler();
     260:	0e 94 14 12 	call	0x2428	; 0x2428 <vTaskStartScheduler>
     264:	ff cf       	rjmp	.-2      	; 0x264 <main+0x3e>

00000266 <ADC_Init>:
	OCR0A=80;
	OCR0B=OCR0A/2;
	//Non-inverting mode
	//Clear on compare match
	TCCR0A |= (1<<COM0B1);
	sei(); //Enable global interrupts
     266:	f8 94       	cli
     268:	e4 e6       	ldi	r30, 0x64	; 100
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8e 7f       	andi	r24, 0xFE	; 254
     270:	80 83       	st	Z, r24
     272:	ac e7       	ldi	r26, 0x7C	; 124
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	8c 91       	ld	r24, X
     278:	80 64       	ori	r24, 0x40	; 64
     27a:	8c 93       	st	X, r24
     27c:	8c 91       	ld	r24, X
     27e:	8f 77       	andi	r24, 0x7F	; 127
     280:	8c 93       	st	X, r24
     282:	ea e7       	ldi	r30, 0x7A	; 122
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	84 60       	ori	r24, 0x04	; 4
     28a:	80 83       	st	Z, r24
     28c:	80 81       	ld	r24, Z
     28e:	82 60       	ori	r24, 0x02	; 2
     290:	80 83       	st	Z, r24
     292:	80 81       	ld	r24, Z
     294:	81 60       	ori	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
     298:	8c 91       	ld	r24, X
     29a:	8e 7f       	andi	r24, 0xFE	; 254
     29c:	8c 93       	st	X, r24
     29e:	8c 91       	ld	r24, X
     2a0:	8d 7f       	andi	r24, 0xFD	; 253
     2a2:	8c 93       	st	X, r24
     2a4:	8c 91       	ld	r24, X
     2a6:	8b 7f       	andi	r24, 0xFB	; 251
     2a8:	8c 93       	st	X, r24
     2aa:	8c 91       	ld	r24, X
     2ac:	87 7f       	andi	r24, 0xF7	; 247
     2ae:	8c 93       	st	X, r24
     2b0:	80 81       	ld	r24, Z
     2b2:	80 62       	ori	r24, 0x20	; 32
     2b4:	80 83       	st	Z, r24
     2b6:	ab e7       	ldi	r26, 0x7B	; 123
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	8c 91       	ld	r24, X
     2bc:	8e 7f       	andi	r24, 0xFE	; 254
     2be:	8c 93       	st	X, r24
     2c0:	8c 91       	ld	r24, X
     2c2:	8e 7f       	andi	r24, 0xFE	; 254
     2c4:	8c 93       	st	X, r24
     2c6:	8c 91       	ld	r24, X
     2c8:	8e 7f       	andi	r24, 0xFE	; 254
     2ca:	8c 93       	st	X, r24
     2cc:	ae e7       	ldi	r26, 0x7E	; 126
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	8c 91       	ld	r24, X
     2d2:	81 60       	ori	r24, 0x01	; 1
     2d4:	8c 93       	st	X, r24
     2d6:	80 81       	ld	r24, Z
     2d8:	80 68       	ori	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
     2dc:	80 81       	ld	r24, Z
     2de:	80 64       	ori	r24, 0x40	; 64
     2e0:	80 83       	st	Z, r24
     2e2:	78 94       	sei
     2e4:	08 95       	ret

000002e6 <deg_to_servo1>:
}


//servo1 is on PB1
void deg_to_servo1 (int deg){
	OCR1A=(deg*2.7778)+125;
     2e6:	bc 01       	movw	r22, r24
     2e8:	99 0f       	add	r25, r25
     2ea:	88 0b       	sbc	r24, r24
     2ec:	99 0b       	sbc	r25, r25
     2ee:	0e 94 01 1a 	call	0x3402	; 0x3402 <__floatsisf>
     2f2:	2a e7       	ldi	r18, 0x7A	; 122
     2f4:	37 ec       	ldi	r19, 0xC7	; 199
     2f6:	41 e3       	ldi	r20, 0x31	; 49
     2f8:	50 e4       	ldi	r21, 0x40	; 64
     2fa:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	4a ef       	ldi	r20, 0xFA	; 250
     304:	52 e4       	ldi	r21, 0x42	; 66
     306:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     30a:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <__fixunssfsi>
     30e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     312:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     316:	08 95       	ret

00000318 <deg_to_servo2>:
}
//servo2 is on PB2
void deg_to_servo2 (int deg){
	OCR1B=(deg*2.7778)+125;
     318:	bc 01       	movw	r22, r24
     31a:	99 0f       	add	r25, r25
     31c:	88 0b       	sbc	r24, r24
     31e:	99 0b       	sbc	r25, r25
     320:	0e 94 01 1a 	call	0x3402	; 0x3402 <__floatsisf>
     324:	2a e7       	ldi	r18, 0x7A	; 122
     326:	37 ec       	ldi	r19, 0xC7	; 199
     328:	41 e3       	ldi	r20, 0x31	; 49
     32a:	50 e4       	ldi	r21, 0x40	; 64
     32c:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	4a ef       	ldi	r20, 0xFA	; 250
     336:	52 e4       	ldi	r21, 0x42	; 66
     338:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     33c:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <__fixunssfsi>
     340:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     344:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     348:	08 95       	ret

0000034a <initialize_pwm_2servos>:
}
void initialize_pwm_2servos (){
	cli();
     34a:	f8 94       	cli
	DDRB |= (1<<DDB1)|(1<<DDB2);	/* Make OC1A pin (~D9) OC1B (~D10) as output */
     34c:	84 b1       	in	r24, 0x04	; 4
     34e:	86 60       	ori	r24, 0x06	; 6
     350:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0;		/* Set timer1 count zero */
     352:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     356:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	ICR1 = 4999;		/* Set TOP count for timer1 in ICR1 register */
     35a:	87 e8       	ldi	r24, 0x87	; 135
     35c:	93 e1       	ldi	r25, 0x13	; 19
     35e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     362:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	//TCCR1A = (1<<WGM11)|(1<<COM1A1);
	//TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
	//clear OC1A/OC1B on compare match
	//for servo1
	TCCR1A |= (1<<COM1A1);
     366:	e0 e8       	ldi	r30, 0x80	; 128
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	80 68       	ori	r24, 0x80	; 128
     36e:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1A0);
     370:	80 81       	ld	r24, Z
     372:	8f 7b       	andi	r24, 0xBF	; 191
     374:	80 83       	st	Z, r24
	//for servo2
	TCCR1A |= (1<<COM1B1);
     376:	80 81       	ld	r24, Z
     378:	80 62       	ori	r24, 0x20	; 32
     37a:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B0);
     37c:	80 81       	ld	r24, Z
     37e:	8f 7e       	andi	r24, 0xEF	; 239
     380:	80 83       	st	Z, r24
	//Fast PWM Mode
	TCCR1A &= ~(1<<WGM10);
     382:	80 81       	ld	r24, Z
     384:	8e 7f       	andi	r24, 0xFE	; 254
     386:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11);
     388:	80 81       	ld	r24, Z
     38a:	82 60       	ori	r24, 0x02	; 2
     38c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
     38e:	e1 e8       	ldi	r30, 0x81	; 129
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	88 60       	ori	r24, 0x08	; 8
     396:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13);
     398:	80 81       	ld	r24, Z
     39a:	80 61       	ori	r24, 0x10	; 16
     39c:	80 83       	st	Z, r24
	//Configure timer pre-scaler (011) /64
	TCCR1B |= (1<<CS10);
     39e:	80 81       	ld	r24, Z
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);
     3a4:	80 81       	ld	r24, Z
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12);
     3aa:	80 81       	ld	r24, Z
     3ac:	8b 7f       	andi	r24, 0xFB	; 251
     3ae:	80 83       	st	Z, r24
	sei();
     3b0:	78 94       	sei
     3b2:	08 95       	ret

000003b4 <initialize_pwm_joyservo>:
}
void initialize_pwm_joyservo (){
	cli();//disable all interrupts
     3b4:	f8 94       	cli
	DDRD |= (1<<DDD5);	/* Make OC1A pin (~D9) OC1B (~D10) as output */
     3b6:	55 9a       	sbi	0x0a, 5	; 10
	//Use Timer 0 for joystick to servo
	//prescale of 1024 (101)
	TCCR0B |= (1<<CS02);
     3b8:	85 b5       	in	r24, 0x25	; 37
     3ba:	84 60       	ori	r24, 0x04	; 4
     3bc:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     3be:	85 b5       	in	r24, 0x25	; 37
     3c0:	8d 7f       	andi	r24, 0xFD	; 253
     3c2:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
     3c4:	85 b5       	in	r24, 0x25	; 37
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	85 bd       	out	0x25, r24	; 37
	
	//Fast PWM mode
	TCCR0A |= (1<<WGM00);
     3ca:	84 b5       	in	r24, 0x24	; 36
     3cc:	81 60       	ori	r24, 0x01	; 1
     3ce:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01);
     3d0:	84 b5       	in	r24, 0x24	; 36
     3d2:	82 60       	ori	r24, 0x02	; 2
     3d4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
     3d6:	85 b5       	in	r24, 0x25	; 37
     3d8:	88 60       	ori	r24, 0x08	; 8
     3da:	85 bd       	out	0x25, r24	; 37
	
	//OCR0A sets frequency
	//OCR0B sets duty cycle
	OCR0A=255;
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	87 bd       	out	0x27, r24	; 39
	OCR0B=OCR0A/2;
     3e0:	87 b5       	in	r24, 0x27	; 39
     3e2:	86 95       	lsr	r24
     3e4:	88 bd       	out	0x28, r24	; 40
	
	//Non-inverting mode
	//Clear on compare match
	TCCR0A |= (1<<COM1B1);
     3e6:	84 b5       	in	r24, 0x24	; 36
     3e8:	80 62       	ori	r24, 0x20	; 32
     3ea:	84 bd       	out	0x24, r24	; 36
	sei(); //Enable global interrupts
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <vADCTaskFunction>:
		}
	}
	vTaskDelete( NULL );
}
void vADCTaskFunction( void *pvParameters )
{
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <vADCTaskFunction+0x6>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeADC;
		const TickType_t xPeriodFrequencyADC = 1;// 15ms per tick  15ms*93 = 1395
		
		xLastWakeTimeADC = xTaskGetTickCount();
     3fa:	0e 94 48 12 	call	0x2490	; 0x2490 <xTaskGetTickCount>
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeADC, xPeriodFrequencyADC);
			//ADC
			ADC_Value = ADC;
     402:	08 e7       	ldi	r16, 0x78	; 120
     404:	10 e0       	ldi	r17, 0x00	; 0
			if (ADC_Value>800)
			{
				OCR0B--;
				if (OCR0B<=10)
				{
					OCR0B=11;
     406:	0f 2e       	mov	r0, r31
     408:	fb e0       	ldi	r31, 0x0B	; 11
     40a:	ff 2e       	mov	r15, r31
     40c:	f0 2d       	mov	r31, r0
			if (ADC_Value<300)
			{
				OCR0B++;
				if (OCR0B>=40)
				{
					OCR0B=39;
     40e:	0f 2e       	mov	r0, r31
     410:	f7 e2       	ldi	r31, 0x27	; 39
     412:	ef 2e       	mov	r14, r31
     414:	f0 2d       	mov	r31, r0
		
		xLastWakeTimeADC = xTaskGetTickCount();

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeADC, xPeriodFrequencyADC);
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	ce 01       	movw	r24, r28
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	0e 94 94 13 	call	0x2728	; 0x2728 <vTaskDelayUntil>
			//ADC
			ADC_Value = ADC;
     422:	f8 01       	movw	r30, r16
     424:	60 81       	ld	r22, Z
     426:	71 81       	ldd	r23, Z+1	; 0x01
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__floatunsisf>
     430:	60 93 25 02 	sts	0x0225, r22	; 0x800225 <ADC_Value>
     434:	70 93 26 02 	sts	0x0226, r23	; 0x800226 <ADC_Value+0x1>
     438:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <ADC_Value+0x2>
     43c:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <ADC_Value+0x3>
			if (ADC_Value>800)
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	48 e4       	ldi	r20, 0x48	; 72
     446:	54 e4       	ldi	r21, 0x44	; 68
     448:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__gesf2>
     44c:	18 16       	cp	r1, r24
     44e:	3c f4       	brge	.+14     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			{
				OCR0B--;
     450:	88 b5       	in	r24, 0x28	; 40
     452:	81 50       	subi	r24, 0x01	; 1
     454:	88 bd       	out	0x28, r24	; 40
				if (OCR0B<=10)
     456:	88 b5       	in	r24, 0x28	; 40
     458:	8b 30       	cpi	r24, 0x0B	; 11
     45a:	08 f4       	brcc	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				{
					OCR0B=11;
     45c:	f8 bc       	out	0x28, r15	; 40
				}
			}
			if (ADC_Value<300)
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	46 e9       	ldi	r20, 0x96	; 150
     464:	53 e4       	ldi	r21, 0x43	; 67
     466:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <ADC_Value>
     46a:	70 91 26 02 	lds	r23, 0x0226	; 0x800226 <ADC_Value+0x1>
     46e:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <ADC_Value+0x2>
     472:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <ADC_Value+0x3>
     476:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__cmpsf2>
     47a:	88 23       	and	r24, r24
     47c:	64 f6       	brge	.-104    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			{
				OCR0B++;
     47e:	88 b5       	in	r24, 0x28	; 40
     480:	8f 5f       	subi	r24, 0xFF	; 255
     482:	88 bd       	out	0x28, r24	; 40
				if (OCR0B>=40)
     484:	88 b5       	in	r24, 0x28	; 40
     486:	88 32       	cpi	r24, 0x28	; 40
     488:	30 f2       	brcs	.-116    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				{
					OCR0B=39;
     48a:	e8 bc       	out	0x28, r14	; 40
     48c:	c4 cf       	rjmp	.-120    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

0000048e <vMahonyTaskFunction>:
float ADC_Value;
// static TickType_t time1;
// static TickType_t time2;
// static int period;
void vMahonyTaskFunction( void *pvParameters )
{
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	00 d0       	rcall	.+0      	; 0x494 <vMahonyTaskFunction+0x6>
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeMahony;
		const TickType_t xPeriodFrequencyMahony = 1;// 15ms per tick

		xLastWakeTimeMahony = xTaskGetTickCount();
     498:	0e 94 48 12 	call	0x2490	; 0x2490 <xTaskGetTickCount>
     49c:	9a 83       	std	Y+2, r25	; 0x02
     49e:	89 83       	std	Y+1, r24	; 0x01
		{
			vTaskDelayUntil( &xLastWakeTimeMahony, xPeriodFrequencyMahony );
// 			time1 = xTaskGetTickCount();
// 			sprintf(MyString,"time1: %i ms\n",time1);
// 			UART_putstring(MyString);
			MahonyAHRSupdateIMU(GyroData[0],GyroData[1],GyroData[2],AccData[0],AccData[1],AccData[2]);
     4a0:	0f 2e       	mov	r0, r31
     4a2:	f6 e1       	ldi	r31, 0x16	; 22
     4a4:	8f 2e       	mov	r8, r31
     4a6:	f1 e0       	ldi	r31, 0x01	; 1
     4a8:	9f 2e       	mov	r9, r31
     4aa:	f0 2d       	mov	r31, r0
     4ac:	0f 2e       	mov	r0, r31
     4ae:	fa e0       	ldi	r31, 0x0A	; 10
     4b0:	6f 2e       	mov	r6, r31
     4b2:	f1 e0       	ldi	r31, 0x01	; 1
     4b4:	7f 2e       	mov	r7, r31
     4b6:	f0 2d       	mov	r31, r0

		xLastWakeTimeMahony = xTaskGetTickCount();

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeMahony, xPeriodFrequencyMahony );
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	ce 01       	movw	r24, r28
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	0e 94 94 13 	call	0x2728	; 0x2728 <vTaskDelayUntil>
// 			time1 = xTaskGetTickCount();
// 			sprintf(MyString,"time1: %i ms\n",time1);
// 			UART_putstring(MyString);
			MahonyAHRSupdateIMU(GyroData[0],GyroData[1],GyroData[2],AccData[0],AccData[1],AccData[2]);
     4c4:	d4 01       	movw	r26, r8
     4c6:	ad 90       	ld	r10, X+
     4c8:	bd 90       	ld	r11, X+
     4ca:	cd 90       	ld	r12, X+
     4cc:	dc 90       	ld	r13, X
     4ce:	13 97       	sbiw	r26, 0x03	; 3
     4d0:	f3 01       	movw	r30, r6
     4d2:	e0 84       	ldd	r14, Z+8	; 0x08
     4d4:	f1 84       	ldd	r15, Z+9	; 0x09
     4d6:	02 85       	ldd	r16, Z+10	; 0x0a
     4d8:	13 85       	ldd	r17, Z+11	; 0x0b
     4da:	24 81       	ldd	r18, Z+4	; 0x04
     4dc:	35 81       	ldd	r19, Z+5	; 0x05
     4de:	46 81       	ldd	r20, Z+6	; 0x06
     4e0:	57 81       	ldd	r21, Z+7	; 0x07
     4e2:	60 81       	ld	r22, Z
     4e4:	71 81       	ldd	r23, Z+1	; 0x01
     4e6:	82 81       	ldd	r24, Z+2	; 0x02
     4e8:	93 81       	ldd	r25, Z+3	; 0x03
     4ea:	1b 96       	adiw	r26, 0x0b	; 11
     4ec:	ec 91       	ld	r30, X
     4ee:	1b 97       	sbiw	r26, 0x0b	; 11
     4f0:	ef 93       	push	r30
     4f2:	1a 96       	adiw	r26, 0x0a	; 10
     4f4:	ec 91       	ld	r30, X
     4f6:	1a 97       	sbiw	r26, 0x0a	; 10
     4f8:	ef 93       	push	r30
     4fa:	19 96       	adiw	r26, 0x09	; 9
     4fc:	ec 91       	ld	r30, X
     4fe:	19 97       	sbiw	r26, 0x09	; 9
     500:	ef 93       	push	r30
     502:	18 96       	adiw	r26, 0x08	; 8
     504:	ec 91       	ld	r30, X
     506:	18 97       	sbiw	r26, 0x08	; 8
     508:	ef 93       	push	r30
     50a:	17 96       	adiw	r26, 0x07	; 7
     50c:	ec 91       	ld	r30, X
     50e:	17 97       	sbiw	r26, 0x07	; 7
     510:	ef 93       	push	r30
     512:	16 96       	adiw	r26, 0x06	; 6
     514:	ec 91       	ld	r30, X
     516:	16 97       	sbiw	r26, 0x06	; 6
     518:	ef 93       	push	r30
     51a:	15 96       	adiw	r26, 0x05	; 5
     51c:	ec 91       	ld	r30, X
     51e:	15 97       	sbiw	r26, 0x05	; 5
     520:	ef 93       	push	r30
     522:	14 96       	adiw	r26, 0x04	; 4
     524:	ec 91       	ld	r30, X
     526:	ef 93       	push	r30
     528:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <MahonyAHRSupdateIMU>
			q2Angle(Angle);
     52c:	89 e2       	ldi	r24, 0x29	; 41
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	0e 94 1d 08 	call	0x103a	; 0x103a <q2Angle>
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	bc cf       	rjmp	.-136    	; 0x4b8 <vMahonyTaskFunction+0x2a>

00000540 <vMPU6050TaskFunction>:
		}
	}
	vTaskDelete( NULL );
}
void vMPU6050TaskFunction( void *pvParameters )
{
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	00 d0       	rcall	.+0      	; 0x546 <vMPU6050TaskFunction+0x6>
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeMPU;
		const TickType_t xPeriodFrequencyMPU = 1;// 15ms per tick
		
		xLastWakeTimeMPU = xTaskGetTickCount();
     54a:	0e 94 48 12 	call	0x2490	; 0x2490 <xTaskGetTickCount>
     54e:	9a 83       	std	Y+2, r25	; 0x02
     550:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeMPU, xPeriodFrequencyMPU );
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	ce 01       	movw	r24, r28
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	0e 94 94 13 	call	0x2728	; 0x2728 <vTaskDelayUntil>
//			TickType_t time1 = xTaskGetTickCount();
			MPU_read(AccData,GyroData);
     55e:	6a e0       	ldi	r22, 0x0A	; 10
     560:	71 e0       	ldi	r23, 0x01	; 1
     562:	86 e1       	ldi	r24, 0x16	; 22
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	0e 94 58 09 	call	0x12b0	; 0x12b0 <MPU_read>
     56a:	f3 cf       	rjmp	.-26     	; 0x552 <vMPU6050TaskFunction+0x12>

0000056c <vControlTaskFunction>:
	vTaskDelete( NULL );
}

// Task C for control
void vControlTaskFunction( void *pvParameters )
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	00 d0       	rcall	.+0      	; 0x572 <vControlTaskFunction+0x6>
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
		static float DEG2;
		static float last_error_x;
		static float inc_error_x;
		static float last_error_y;
		static float inc_error_y;		
		xLastWakeTimeControl = xTaskGetTickCount();
     576:	0e 94 48 12 	call	0x2490	; 0x2490 <xTaskGetTickCount>
     57a:	9a 83       	std	Y+2, r25	; 0x02
     57c:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeControl, xPeriodFrequencyControl );
			x_error = - Angle[0];
     57e:	0f 2e       	mov	r0, r31
     580:	f9 e2       	ldi	r31, 0x29	; 41
     582:	cf 2e       	mov	r12, r31
     584:	f2 e0       	ldi	r31, 0x02	; 2
     586:	df 2e       	mov	r13, r31
     588:	f0 2d       	mov	r31, r0
		static float inc_error_y;		
		xLastWakeTimeControl = xTaskGetTickCount();

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeControl, xPeriodFrequencyControl );
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	ce 01       	movw	r24, r28
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	0e 94 94 13 	call	0x2728	; 0x2728 <vTaskDelayUntil>
			x_error = - Angle[0];
     596:	f6 01       	movw	r30, r12
     598:	80 81       	ld	r24, Z
     59a:	91 81       	ldd	r25, Z+1	; 0x01
     59c:	a2 81       	ldd	r26, Z+2	; 0x02
     59e:	b3 81       	ldd	r27, Z+3	; 0x03
     5a0:	bc 01       	movw	r22, r24
     5a2:	cd 01       	movw	r24, r26
     5a4:	90 58       	subi	r25, 0x80	; 128
     5a6:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <x_error.2892>
     5aa:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <x_error.2892+0x1>
     5ae:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <x_error.2892+0x2>
     5b2:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <x_error.2892+0x3>
			y_error = - Angle[1];
     5b6:	04 81       	ldd	r16, Z+4	; 0x04
     5b8:	15 81       	ldd	r17, Z+5	; 0x05
     5ba:	26 81       	ldd	r18, Z+6	; 0x06
     5bc:	37 81       	ldd	r19, Z+7	; 0x07
     5be:	30 58       	subi	r19, 0x80	; 128
     5c0:	00 93 68 01 	sts	0x0168, r16	; 0x800168 <y_error.2893>
     5c4:	10 93 69 01 	sts	0x0169, r17	; 0x800169 <y_error.2893+0x1>
     5c8:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <y_error.2893+0x2>
     5cc:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <y_error.2893+0x3>
			DEG1 = PID(x_error,last_error_x,inc_error_x);
     5d0:	e0 90 64 01 	lds	r14, 0x0164	; 0x800164 <inc_error_x.2897>
     5d4:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <inc_error_x.2897+0x1>
     5d8:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <inc_error_x.2897+0x2>
     5dc:	10 91 67 01 	lds	r17, 0x0167	; 0x800167 <inc_error_x.2897+0x3>
     5e0:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <last_error_x.2896>
     5e4:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <last_error_x.2896+0x1>
     5e8:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <last_error_x.2896+0x2>
     5ec:	50 91 63 01 	lds	r21, 0x0163	; 0x800163 <last_error_x.2896+0x3>
     5f0:	0e 94 09 04 	call	0x812	; 0x812 <PID>
     5f4:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <DEG1.2894>
     5f8:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <DEG1.2894+0x1>
     5fc:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <DEG1.2894+0x2>
     600:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <DEG1.2894+0x3>
			DEG2 = PID(y_error,last_error_y,inc_error_y);
     604:	e0 90 58 01 	lds	r14, 0x0158	; 0x800158 <inc_error_y.2899>
     608:	f0 90 59 01 	lds	r15, 0x0159	; 0x800159 <inc_error_y.2899+0x1>
     60c:	00 91 5a 01 	lds	r16, 0x015A	; 0x80015a <inc_error_y.2899+0x2>
     610:	10 91 5b 01 	lds	r17, 0x015B	; 0x80015b <inc_error_y.2899+0x3>
     614:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <last_error_y.2898>
     618:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <last_error_y.2898+0x1>
     61c:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <last_error_y.2898+0x2>
     620:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <last_error_y.2898+0x3>
     624:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <y_error.2893>
     628:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <y_error.2893+0x1>
     62c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <y_error.2893+0x2>
     630:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <y_error.2893+0x3>
     634:	0e 94 09 04 	call	0x812	; 0x812 <PID>
     638:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <__data_end>
     63c:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <__data_end+0x1>
     640:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end+0x2>
     644:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x3>
			if (abs(inc_error_x)<Increament_Max)
     648:	80 90 64 01 	lds	r8, 0x0164	; 0x800164 <inc_error_x.2897>
     64c:	90 90 65 01 	lds	r9, 0x0165	; 0x800165 <inc_error_x.2897+0x1>
     650:	a0 90 66 01 	lds	r10, 0x0166	; 0x800166 <inc_error_x.2897+0x2>
     654:	b0 90 67 01 	lds	r11, 0x0167	; 0x800167 <inc_error_x.2897+0x3>
     658:	c5 01       	movw	r24, r10
     65a:	b4 01       	movw	r22, r8
     65c:	0e 94 c9 19 	call	0x3392	; 0x3392 <__fixsfsi>
     660:	9b 01       	movw	r18, r22
     662:	77 23       	and	r23, r23
     664:	24 f4       	brge	.+8      	; 0x66e <vControlTaskFunction+0x102>
     666:	22 27       	eor	r18, r18
     668:	33 27       	eor	r19, r19
     66a:	26 1b       	sub	r18, r22
     66c:	37 0b       	sbc	r19, r23
     66e:	b9 01       	movw	r22, r18
     670:	33 0f       	add	r19, r19
     672:	88 0b       	sbc	r24, r24
     674:	99 0b       	sbc	r25, r25
     676:	0e 94 01 1a 	call	0x3402	; 0x3402 <__floatsisf>
     67a:	2b ed       	ldi	r18, 0xDB	; 219
     67c:	36 eb       	ldi	r19, 0xB6	; 182
     67e:	4d ec       	ldi	r20, 0xCD	; 205
     680:	51 e4       	ldi	r21, 0x41	; 65
     682:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__cmpsf2>
     686:	88 23       	and	r24, r24
     688:	d4 f4       	brge	.+52     	; 0x6be <vControlTaskFunction+0x152>
			{
				inc_error_x += x_error/PID_Freq;
     68a:	26 e6       	ldi	r18, 0x66	; 102
     68c:	36 e6       	ldi	r19, 0x66	; 102
     68e:	45 e8       	ldi	r20, 0x85	; 133
     690:	52 e4       	ldi	r21, 0x42	; 66
     692:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <x_error.2892>
     696:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <x_error.2892+0x1>
     69a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <x_error.2892+0x2>
     69e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <x_error.2892+0x3>
     6a2:	0e 94 57 19 	call	0x32ae	; 0x32ae <__divsf3>
     6a6:	a5 01       	movw	r20, r10
     6a8:	94 01       	movw	r18, r8
     6aa:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     6ae:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <inc_error_x.2897>
     6b2:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <inc_error_x.2897+0x1>
     6b6:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <inc_error_x.2897+0x2>
     6ba:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <inc_error_x.2897+0x3>
			}
			last_error_x = x_error;
     6be:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <x_error.2892>
     6c2:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <x_error.2892+0x1>
     6c6:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <x_error.2892+0x2>
     6ca:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <x_error.2892+0x3>
     6ce:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <last_error_x.2896>
     6d2:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <last_error_x.2896+0x1>
     6d6:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <last_error_x.2896+0x2>
     6da:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <last_error_x.2896+0x3>
			if (abs(inc_error_y)<Increament_Max)
     6de:	80 90 58 01 	lds	r8, 0x0158	; 0x800158 <inc_error_y.2899>
     6e2:	90 90 59 01 	lds	r9, 0x0159	; 0x800159 <inc_error_y.2899+0x1>
     6e6:	a0 90 5a 01 	lds	r10, 0x015A	; 0x80015a <inc_error_y.2899+0x2>
     6ea:	b0 90 5b 01 	lds	r11, 0x015B	; 0x80015b <inc_error_y.2899+0x3>
     6ee:	c5 01       	movw	r24, r10
     6f0:	b4 01       	movw	r22, r8
     6f2:	0e 94 c9 19 	call	0x3392	; 0x3392 <__fixsfsi>
     6f6:	9b 01       	movw	r18, r22
     6f8:	77 23       	and	r23, r23
     6fa:	24 f4       	brge	.+8      	; 0x704 <vControlTaskFunction+0x198>
     6fc:	22 27       	eor	r18, r18
     6fe:	33 27       	eor	r19, r19
     700:	26 1b       	sub	r18, r22
     702:	37 0b       	sbc	r19, r23
     704:	b9 01       	movw	r22, r18
     706:	33 0f       	add	r19, r19
     708:	88 0b       	sbc	r24, r24
     70a:	99 0b       	sbc	r25, r25
     70c:	0e 94 01 1a 	call	0x3402	; 0x3402 <__floatsisf>
     710:	2b ed       	ldi	r18, 0xDB	; 219
     712:	36 eb       	ldi	r19, 0xB6	; 182
     714:	4d ec       	ldi	r20, 0xCD	; 205
     716:	51 e4       	ldi	r21, 0x41	; 65
     718:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__cmpsf2>
     71c:	88 23       	and	r24, r24
     71e:	d4 f4       	brge	.+52     	; 0x754 <vControlTaskFunction+0x1e8>
			{
				inc_error_y += y_error/PID_Freq;
     720:	26 e6       	ldi	r18, 0x66	; 102
     722:	36 e6       	ldi	r19, 0x66	; 102
     724:	45 e8       	ldi	r20, 0x85	; 133
     726:	52 e4       	ldi	r21, 0x42	; 66
     728:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <y_error.2893>
     72c:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <y_error.2893+0x1>
     730:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <y_error.2893+0x2>
     734:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <y_error.2893+0x3>
     738:	0e 94 57 19 	call	0x32ae	; 0x32ae <__divsf3>
     73c:	a5 01       	movw	r20, r10
     73e:	94 01       	movw	r18, r8
     740:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     744:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <inc_error_y.2899>
     748:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <inc_error_y.2899+0x1>
     74c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <inc_error_y.2899+0x2>
     750:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <inc_error_y.2899+0x3>
			}
			last_error_y = y_error;
     754:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <y_error.2893>
     758:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <y_error.2893+0x1>
     75c:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <y_error.2893+0x2>
     760:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <y_error.2893+0x3>
     764:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <last_error_y.2898>
     768:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <last_error_y.2898+0x1>
     76c:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <last_error_y.2898+0x2>
     770:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <last_error_y.2898+0x3>
// 			sprintf(MyString,"Y %f \n",Angle[1]);
// 			UART_putstring(MyString);

			deg_to_servo1(DEG1);
     774:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <DEG1.2894>
     778:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <DEG1.2894+0x1>
     77c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <DEG1.2894+0x2>
     780:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <DEG1.2894+0x3>
     784:	0e 94 c9 19 	call	0x3392	; 0x3392 <__fixsfsi>
     788:	cb 01       	movw	r24, r22
     78a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <deg_to_servo1>
			deg_to_servo2(DEG2);
     78e:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <__data_end>
     792:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <__data_end+0x1>
     796:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end+0x2>
     79a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x3>
     79e:	0e 94 c9 19 	call	0x3392	; 0x3392 <__fixsfsi>
     7a2:	cb 01       	movw	r24, r22
     7a4:	0e 94 8c 01 	call	0x318	; 0x318 <deg_to_servo2>
/*			BalanceControl(Angle);*/
// 			sprintf(MyString,"Task Control\n");
// 			UART_putstring(MyString);
			
		}
     7a8:	f0 ce       	rjmp	.-544    	; 0x58a <vControlTaskFunction+0x1e>

000007aa <MytaskCreate>:
	}
	vTaskDelete( NULL );
}
//
void MytaskCreate(void)
{
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
	/* Create tasks and make some magic*/

	xTaskCreate( vMahonyTaskFunction,"TASKA",256,NULL,3,NULL);
     7b0:	e1 2c       	mov	r14, r1
     7b2:	f1 2c       	mov	r15, r1
     7b4:	03 e0       	ldi	r16, 0x03	; 3
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	51 e0       	ldi	r21, 0x01	; 1
     7be:	6a e2       	ldi	r22, 0x2A	; 42
     7c0:	71 e0       	ldi	r23, 0x01	; 1
     7c2:	87 e4       	ldi	r24, 0x47	; 71
     7c4:	92 e0       	ldi	r25, 0x02	; 2
     7c6:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <xTaskCreate>
	xTaskCreate( vMPU6050TaskFunction,"TASKB",256,NULL, 2,NULL);
     7ca:	02 e0       	ldi	r16, 0x02	; 2
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	51 e0       	ldi	r21, 0x01	; 1
     7d4:	60 e3       	ldi	r22, 0x30	; 48
     7d6:	71 e0       	ldi	r23, 0x01	; 1
     7d8:	80 ea       	ldi	r24, 0xA0	; 160
     7da:	92 e0       	ldi	r25, 0x02	; 2
     7dc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <xTaskCreate>
	xTaskCreate( vControlTaskFunction,"TASKC",256,NULL,4,NULL);
     7e0:	04 e0       	ldi	r16, 0x04	; 4
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	51 e0       	ldi	r21, 0x01	; 1
     7ea:	66 e3       	ldi	r22, 0x36	; 54
     7ec:	71 e0       	ldi	r23, 0x01	; 1
     7ee:	86 eb       	ldi	r24, 0xB6	; 182
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <xTaskCreate>
	xTaskCreate( vADCTaskFunction,"TASKD",128,NULL,4,NULL);
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e8       	ldi	r20, 0x80	; 128
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	6c e3       	ldi	r22, 0x3C	; 60
     800:	71 e0       	ldi	r23, 0x01	; 1
     802:	88 ef       	ldi	r24, 0xF8	; 248
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <xTaskCreate>
	
}
     80a:	0f 91       	pop	r16
     80c:	ff 90       	pop	r15
     80e:	ef 90       	pop	r14
     810:	08 95       	ret

00000812 <PID>:
#include "../lib/uart.h"
#include <stdio.h>
extern char MyString[10];

float PID(float error, float last_error, float increment_error)
{
     812:	4f 92       	push	r4
     814:	5f 92       	push	r5
     816:	6f 92       	push	r6
     818:	7f 92       	push	r7
     81a:	8f 92       	push	r8
     81c:	9f 92       	push	r9
     81e:	af 92       	push	r10
     820:	bf 92       	push	r11
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	00 d0       	rcall	.+0      	; 0x834 <PID+0x22>
     834:	00 d0       	rcall	.+0      	; 0x836 <PID+0x24>
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	4b 01       	movw	r8, r22
     83c:	5c 01       	movw	r10, r24
     83e:	29 01       	movw	r4, r18
     840:	3a 01       	movw	r6, r20
     842:	e9 82       	std	Y+1, r14	; 0x01
     844:	fa 82       	std	Y+2, r15	; 0x02
     846:	0b 83       	std	Y+3, r16	; 0x03
     848:	1c 83       	std	Y+4, r17	; 0x04
	static float output;
	output = (float)error*Kp+increment_error*Ki+(error-last_error)*Kd;
     84a:	2d ec       	ldi	r18, 0xCD	; 205
     84c:	3c ec       	ldi	r19, 0xCC	; 204
     84e:	4c e4       	ldi	r20, 0x4C	; 76
     850:	5f e3       	ldi	r21, 0x3F	; 63
     852:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     856:	6b 01       	movw	r12, r22
     858:	7c 01       	movw	r14, r24
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e6       	ldi	r20, 0x60	; 96
     860:	50 e4       	ldi	r21, 0x40	; 64
     862:	69 81       	ldd	r22, Y+1	; 0x01
     864:	7a 81       	ldd	r23, Y+2	; 0x02
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     86e:	9b 01       	movw	r18, r22
     870:	ac 01       	movw	r20, r24
     872:	c7 01       	movw	r24, r14
     874:	b6 01       	movw	r22, r12
     876:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     87a:	6b 01       	movw	r12, r22
     87c:	7c 01       	movw	r14, r24
     87e:	a3 01       	movw	r20, r6
     880:	92 01       	movw	r18, r4
     882:	c5 01       	movw	r24, r10
     884:	b4 01       	movw	r22, r8
     886:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	a9 01       	movw	r20, r18
     890:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     894:	26 e6       	ldi	r18, 0x66	; 102
     896:	36 e6       	ldi	r19, 0x66	; 102
     898:	45 e8       	ldi	r20, 0x85	; 133
     89a:	52 e4       	ldi	r21, 0x42	; 66
     89c:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     8a0:	9b 01       	movw	r18, r22
     8a2:	ac 01       	movw	r20, r24
     8a4:	c7 01       	movw	r24, r14
     8a6:	b6 01       	movw	r22, r12
     8a8:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     8ac:	6b 01       	movw	r12, r22
     8ae:	7c 01       	movw	r14, r24
     8b0:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <output.1827>
     8b4:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <output.1827+0x1>
     8b8:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <output.1827+0x2>
     8bc:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <output.1827+0x3>

	if (output>85)
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	4a ea       	ldi	r20, 0xAA	; 170
     8c6:	52 e4       	ldi	r21, 0x42	; 66
     8c8:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__gesf2>
     8cc:	18 16       	cp	r1, r24
     8ce:	6c f4       	brge	.+26     	; 0x8ea <PID+0xd8>
	{
		output = 85;
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	aa ea       	ldi	r26, 0xAA	; 170
     8d6:	b2 e4       	ldi	r27, 0x42	; 66
     8d8:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <output.1827>
     8dc:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <output.1827+0x1>
     8e0:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <output.1827+0x2>
     8e4:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <output.1827+0x3>
     8e8:	16 c0       	rjmp	.+44     	; 0x916 <__stack+0x17>
	}
	if (output<-85)
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	4a ea       	ldi	r20, 0xAA	; 170
     8f0:	52 ec       	ldi	r21, 0xC2	; 194
     8f2:	c7 01       	movw	r24, r14
     8f4:	b6 01       	movw	r22, r12
     8f6:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__cmpsf2>
     8fa:	88 23       	and	r24, r24
     8fc:	64 f4       	brge	.+24     	; 0x916 <__stack+0x17>
	{
		output = -85;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	aa ea       	ldi	r26, 0xAA	; 170
     904:	b2 ec       	ldi	r27, 0xC2	; 194
     906:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <output.1827>
     90a:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <output.1827+0x1>
     90e:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <output.1827+0x2>
     912:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <output.1827+0x3>
	}
	output += 90;
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	44 eb       	ldi	r20, 0xB4	; 180
     91c:	52 e4       	ldi	r21, 0x42	; 66
     91e:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <output.1827>
     922:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <output.1827+0x1>
     926:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <output.1827+0x2>
     92a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <output.1827+0x3>
     92e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     932:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <output.1827>
     936:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <output.1827+0x1>
     93a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <output.1827+0x2>
     93e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <output.1827+0x3>
	return output;

     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	bf 90       	pop	r11
     95c:	af 90       	pop	r10
     95e:	9f 90       	pop	r9
     960:	8f 90       	pop	r8
     962:	7f 90       	pop	r7
     964:	6f 90       	pop	r6
     966:	5f 90       	pop	r5
     968:	4f 90       	pop	r4
     96a:	08 95       	ret

0000096c <invSqrt>:
float q1 = 0;
float q2 = 0;
float q3 = 0;

float invSqrt( float number )
{
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17

	x2 = number * 0.5F;
	y  = number;
	i  = * ( long * ) &y;                       
	i  = 0x5f3759df - ( i >> 1 );               
	y  = * ( float * ) &i;
     978:	8b 01       	movw	r16, r22
     97a:	9c 01       	movw	r18, r24
     97c:	35 95       	asr	r19
     97e:	27 95       	ror	r18
     980:	17 95       	ror	r17
     982:	07 95       	ror	r16
     984:	0f 2e       	mov	r0, r31
     986:	ff ed       	ldi	r31, 0xDF	; 223
     988:	cf 2e       	mov	r12, r31
     98a:	f9 e5       	ldi	r31, 0x59	; 89
     98c:	df 2e       	mov	r13, r31
     98e:	f7 e3       	ldi	r31, 0x37	; 55
     990:	ef 2e       	mov	r14, r31
     992:	ff e5       	ldi	r31, 0x5F	; 95
     994:	ff 2e       	mov	r15, r31
     996:	f0 2d       	mov	r31, r0
     998:	c0 1a       	sub	r12, r16
     99a:	d1 0a       	sbc	r13, r17
     99c:	e2 0a       	sbc	r14, r18
     99e:	f3 0a       	sbc	r15, r19
	y  = y * ( threehalfs - ( x2 * y * y ) );   

	return y;
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	5f e3       	ldi	r21, 0x3F	; 63
     9a8:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     9ac:	a7 01       	movw	r20, r14
     9ae:	96 01       	movw	r18, r12
     9b0:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     9b4:	a7 01       	movw	r20, r14
     9b6:	96 01       	movw	r18, r12
     9b8:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	80 ec       	ldi	r24, 0xC0	; 192
     9c6:	9f e3       	ldi	r25, 0x3F	; 63
     9c8:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
     9cc:	a7 01       	movw	r20, r14
     9ce:	96 01       	movw	r18, r12
     9d0:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
}
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	08 95       	ret

000009e2 <MahonyAHRSupdateIMU>:

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) 
{
     9e2:	4f 92       	push	r4
     9e4:	5f 92       	push	r5
     9e6:	6f 92       	push	r6
     9e8:	7f 92       	push	r7
     9ea:	8f 92       	push	r8
     9ec:	9f 92       	push	r9
     9ee:	af 92       	push	r10
     9f0:	bf 92       	push	r11
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	a0 97       	sbiw	r28, 0x20	; 32
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	69 87       	std	Y+9, r22	; 0x09
     a14:	7a 87       	std	Y+10, r23	; 0x0a
     a16:	8b 87       	std	Y+11, r24	; 0x0b
     a18:	9c 87       	std	Y+12, r25	; 0x0c
     a1a:	2d 87       	std	Y+13, r18	; 0x0d
     a1c:	3e 87       	std	Y+14, r19	; 0x0e
     a1e:	4f 87       	std	Y+15, r20	; 0x0f
     a20:	58 8b       	std	Y+16, r21	; 0x10
     a22:	e9 8a       	std	Y+17, r14	; 0x11
     a24:	fa 8a       	std	Y+18, r15	; 0x12
     a26:	0b 8b       	std	Y+19, r16	; 0x13
     a28:	1c 8b       	std	Y+20, r17	; 0x14

	float qa, qb, qc;
	
	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)

	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	a9 01       	movw	r20, r18
     a30:	c6 01       	movw	r24, r12
     a32:	b5 01       	movw	r22, r10
     a34:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__cmpsf2>
     a38:	81 11       	cpse	r24, r1
     a3a:	17 c0       	rjmp	.+46     	; 0xa6a <MahonyAHRSupdateIMU+0x88>
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	a9 01       	movw	r20, r18
     a42:	6b a9       	ldd	r22, Y+51	; 0x33
     a44:	7c a9       	ldd	r23, Y+52	; 0x34
     a46:	8d a9       	ldd	r24, Y+53	; 0x35
     a48:	9e a9       	ldd	r25, Y+54	; 0x36
     a4a:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__cmpsf2>
     a4e:	81 11       	cpse	r24, r1
     a50:	0c c0       	rjmp	.+24     	; 0xa6a <MahonyAHRSupdateIMU+0x88>
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	a9 01       	movw	r20, r18
     a58:	6f a9       	ldd	r22, Y+55	; 0x37
     a5a:	78 ad       	ldd	r23, Y+56	; 0x38
     a5c:	89 ad       	ldd	r24, Y+57	; 0x39
     a5e:	9a ad       	ldd	r25, Y+58	; 0x3a
     a60:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__cmpsf2>
     a64:	88 23       	and	r24, r24
     a66:	09 f4       	brne	.+2      	; 0xa6a <MahonyAHRSupdateIMU+0x88>
     a68:	38 c1       	rjmp	.+624    	; 0xcda <MahonyAHRSupdateIMU+0x2f8>

		// Normalise accelerometer measurement

		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
     a6a:	a6 01       	movw	r20, r12
     a6c:	95 01       	movw	r18, r10
     a6e:	c6 01       	movw	r24, r12
     a70:	b5 01       	movw	r22, r10
     a72:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     a76:	2b 01       	movw	r4, r22
     a78:	3c 01       	movw	r6, r24
     a7a:	2b a9       	ldd	r18, Y+51	; 0x33
     a7c:	3c a9       	ldd	r19, Y+52	; 0x34
     a7e:	4d a9       	ldd	r20, Y+53	; 0x35
     a80:	5e a9       	ldd	r21, Y+54	; 0x36
     a82:	ca 01       	movw	r24, r20
     a84:	b9 01       	movw	r22, r18
     a86:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     a8a:	9b 01       	movw	r18, r22
     a8c:	ac 01       	movw	r20, r24
     a8e:	c3 01       	movw	r24, r6
     a90:	b2 01       	movw	r22, r4
     a92:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     a96:	2b 01       	movw	r4, r22
     a98:	3c 01       	movw	r6, r24
     a9a:	2f a9       	ldd	r18, Y+55	; 0x37
     a9c:	38 ad       	ldd	r19, Y+56	; 0x38
     a9e:	49 ad       	ldd	r20, Y+57	; 0x39
     aa0:	5a ad       	ldd	r21, Y+58	; 0x3a
     aa2:	ca 01       	movw	r24, r20
     aa4:	b9 01       	movw	r22, r18
     aa6:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	c3 01       	movw	r24, r6
     ab0:	b2 01       	movw	r22, r4
     ab2:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     ab6:	0e 94 b6 04 	call	0x96c	; 0x96c <invSqrt>
     aba:	2b 01       	movw	r4, r22
     abc:	3c 01       	movw	r6, r24

		ax *= recipNorm;
     abe:	9b 01       	movw	r18, r22
     ac0:	ac 01       	movw	r20, r24
     ac2:	c6 01       	movw	r24, r12
     ac4:	b5 01       	movw	r22, r10
     ac6:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     aca:	69 8f       	std	Y+25, r22	; 0x19
     acc:	7a 8f       	std	Y+26, r23	; 0x1a
     ace:	8b 8f       	std	Y+27, r24	; 0x1b
     ad0:	9c 8f       	std	Y+28, r25	; 0x1c

		ay *= recipNorm;
     ad2:	a3 01       	movw	r20, r6
     ad4:	92 01       	movw	r18, r4
     ad6:	6b a9       	ldd	r22, Y+51	; 0x33
     ad8:	7c a9       	ldd	r23, Y+52	; 0x34
     ada:	8d a9       	ldd	r24, Y+53	; 0x35
     adc:	9e a9       	ldd	r25, Y+54	; 0x36
     ade:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     ae2:	6d 8f       	std	Y+29, r22	; 0x1d
     ae4:	7e 8f       	std	Y+30, r23	; 0x1e
     ae6:	8f 8f       	std	Y+31, r24	; 0x1f
     ae8:	98 a3       	std	Y+32, r25	; 0x20

		az *= recipNorm;
     aea:	a3 01       	movw	r20, r6
     aec:	92 01       	movw	r18, r4
     aee:	6f a9       	ldd	r22, Y+55	; 0x37
     af0:	78 ad       	ldd	r23, Y+56	; 0x38
     af2:	89 ad       	ldd	r24, Y+57	; 0x39
     af4:	9a ad       	ldd	r25, Y+58	; 0x3a
     af6:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     afa:	6d 83       	std	Y+5, r22	; 0x05
     afc:	7e 83       	std	Y+6, r23	; 0x06
     afe:	8f 83       	std	Y+7, r24	; 0x07
     b00:	98 87       	std	Y+8, r25	; 0x08

		// Estimated direction of gravity and vector perpendicular to magnetic flux

		halfvx = q1 * q3 - q0 * q2;
     b02:	80 90 7c 01 	lds	r8, 0x017C	; 0x80017c <q1>
     b06:	90 90 7d 01 	lds	r9, 0x017D	; 0x80017d <q1+0x1>
     b0a:	a0 90 7e 01 	lds	r10, 0x017E	; 0x80017e <q1+0x2>
     b0e:	b0 90 7f 01 	lds	r11, 0x017F	; 0x80017f <q1+0x3>
     b12:	40 90 74 01 	lds	r4, 0x0174	; 0x800174 <q3>
     b16:	50 90 75 01 	lds	r5, 0x0175	; 0x800175 <q3+0x1>
     b1a:	60 90 76 01 	lds	r6, 0x0176	; 0x800176 <q3+0x2>
     b1e:	70 90 77 01 	lds	r7, 0x0177	; 0x800177 <q3+0x3>
     b22:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <q0>
     b26:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <q0+0x1>
     b2a:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <q0+0x2>
     b2e:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <q0+0x3>
     b32:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <q2>
     b36:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <q2+0x1>
     b3a:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <q2+0x2>
     b3e:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <q2+0x3>
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	ab 83       	std	Y+3, r26	; 0x03
     b48:	bc 83       	std	Y+4, r27	; 0x04
     b4a:	a3 01       	movw	r20, r6
     b4c:	92 01       	movw	r18, r4
     b4e:	c5 01       	movw	r24, r10
     b50:	b4 01       	movw	r22, r8
     b52:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     b56:	6d 8b       	std	Y+21, r22	; 0x15
     b58:	7e 8b       	std	Y+22, r23	; 0x16
     b5a:	8f 8b       	std	Y+23, r24	; 0x17
     b5c:	98 8f       	std	Y+24, r25	; 0x18
     b5e:	29 81       	ldd	r18, Y+1	; 0x01
     b60:	3a 81       	ldd	r19, Y+2	; 0x02
     b62:	4b 81       	ldd	r20, Y+3	; 0x03
     b64:	5c 81       	ldd	r21, Y+4	; 0x04
     b66:	c7 01       	movw	r24, r14
     b68:	b6 01       	movw	r22, r12
     b6a:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     b6e:	9b 01       	movw	r18, r22
     b70:	ac 01       	movw	r20, r24
     b72:	6d 89       	ldd	r22, Y+21	; 0x15
     b74:	7e 89       	ldd	r23, Y+22	; 0x16
     b76:	8f 89       	ldd	r24, Y+23	; 0x17
     b78:	98 8d       	ldd	r25, Y+24	; 0x18
     b7a:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
     b7e:	6d 8b       	std	Y+21, r22	; 0x15
     b80:	7e 8b       	std	Y+22, r23	; 0x16
     b82:	8f 8b       	std	Y+23, r24	; 0x17
     b84:	98 8f       	std	Y+24, r25	; 0x18

		halfvy = q0 * q1 + q2 * q3;
     b86:	a7 01       	movw	r20, r14
     b88:	96 01       	movw	r18, r12
     b8a:	c5 01       	movw	r24, r10
     b8c:	b4 01       	movw	r22, r8
     b8e:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     b92:	4b 01       	movw	r8, r22
     b94:	5c 01       	movw	r10, r24
     b96:	29 81       	ldd	r18, Y+1	; 0x01
     b98:	3a 81       	ldd	r19, Y+2	; 0x02
     b9a:	4b 81       	ldd	r20, Y+3	; 0x03
     b9c:	5c 81       	ldd	r21, Y+4	; 0x04
     b9e:	c3 01       	movw	r24, r6
     ba0:	b2 01       	movw	r22, r4
     ba2:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     ba6:	9b 01       	movw	r18, r22
     ba8:	ac 01       	movw	r20, r24
     baa:	c5 01       	movw	r24, r10
     bac:	b4 01       	movw	r22, r8
     bae:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     bb2:	69 83       	std	Y+1, r22	; 0x01
     bb4:	7a 83       	std	Y+2, r23	; 0x02
     bb6:	8b 83       	std	Y+3, r24	; 0x03
     bb8:	9c 83       	std	Y+4, r25	; 0x04

		halfvz = q0 * q0 - 0.5f + q3 * q3;
     bba:	a7 01       	movw	r20, r14
     bbc:	96 01       	movw	r18, r12
     bbe:	c7 01       	movw	r24, r14
     bc0:	b6 01       	movw	r22, r12
     bc2:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e0       	ldi	r20, 0x00	; 0
     bcc:	5f e3       	ldi	r21, 0x3F	; 63
     bce:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
     bd2:	6b 01       	movw	r12, r22
     bd4:	7c 01       	movw	r14, r24
     bd6:	a3 01       	movw	r20, r6
     bd8:	92 01       	movw	r18, r4
     bda:	c3 01       	movw	r24, r6
     bdc:	b2 01       	movw	r22, r4
     bde:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     be2:	9b 01       	movw	r18, r22
     be4:	ac 01       	movw	r20, r24
     be6:	c7 01       	movw	r24, r14
     be8:	b6 01       	movw	r22, r12
     bea:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     bee:	6b 01       	movw	r12, r22
     bf0:	7c 01       	movw	r14, r24

		halfey = (az * halfvx - ax * halfvz);

		halfez = (ax * halfvy - ay * halfvx);

		gx += twoKp * halfex;
     bf2:	9b 01       	movw	r18, r22
     bf4:	ac 01       	movw	r20, r24
     bf6:	6d 8d       	ldd	r22, Y+29	; 0x1d
     bf8:	7e 8d       	ldd	r23, Y+30	; 0x1e
     bfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bfc:	98 a1       	ldd	r25, Y+32	; 0x20
     bfe:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     c02:	4b 01       	movw	r8, r22
     c04:	5c 01       	movw	r10, r24
     c06:	29 81       	ldd	r18, Y+1	; 0x01
     c08:	3a 81       	ldd	r19, Y+2	; 0x02
     c0a:	4b 81       	ldd	r20, Y+3	; 0x03
     c0c:	5c 81       	ldd	r21, Y+4	; 0x04
     c0e:	6d 81       	ldd	r22, Y+5	; 0x05
     c10:	7e 81       	ldd	r23, Y+6	; 0x06
     c12:	8f 81       	ldd	r24, Y+7	; 0x07
     c14:	98 85       	ldd	r25, Y+8	; 0x08
     c16:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     c1a:	9b 01       	movw	r18, r22
     c1c:	ac 01       	movw	r20, r24
     c1e:	c5 01       	movw	r24, r10
     c20:	b4 01       	movw	r22, r8
     c22:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
     c26:	9b 01       	movw	r18, r22
     c28:	ac 01       	movw	r20, r24
     c2a:	69 85       	ldd	r22, Y+9	; 0x09
     c2c:	7a 85       	ldd	r23, Y+10	; 0x0a
     c2e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c30:	9c 85       	ldd	r25, Y+12	; 0x0c
     c32:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     c36:	69 87       	std	Y+9, r22	; 0x09
     c38:	7a 87       	std	Y+10, r23	; 0x0a
     c3a:	8b 87       	std	Y+11, r24	; 0x0b
     c3c:	9c 87       	std	Y+12, r25	; 0x0c

		gy += twoKp * halfey;
     c3e:	2d 89       	ldd	r18, Y+21	; 0x15
     c40:	3e 89       	ldd	r19, Y+22	; 0x16
     c42:	4f 89       	ldd	r20, Y+23	; 0x17
     c44:	58 8d       	ldd	r21, Y+24	; 0x18
     c46:	6d 81       	ldd	r22, Y+5	; 0x05
     c48:	7e 81       	ldd	r23, Y+6	; 0x06
     c4a:	8f 81       	ldd	r24, Y+7	; 0x07
     c4c:	98 85       	ldd	r25, Y+8	; 0x08
     c4e:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     c52:	4b 01       	movw	r8, r22
     c54:	5c 01       	movw	r10, r24
     c56:	a7 01       	movw	r20, r14
     c58:	96 01       	movw	r18, r12
     c5a:	69 8d       	ldd	r22, Y+25	; 0x19
     c5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c62:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     c66:	9b 01       	movw	r18, r22
     c68:	ac 01       	movw	r20, r24
     c6a:	c5 01       	movw	r24, r10
     c6c:	b4 01       	movw	r22, r8
     c6e:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
     c72:	9b 01       	movw	r18, r22
     c74:	ac 01       	movw	r20, r24
     c76:	6d 85       	ldd	r22, Y+13	; 0x0d
     c78:	7e 85       	ldd	r23, Y+14	; 0x0e
     c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7c:	98 89       	ldd	r25, Y+16	; 0x10
     c7e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     c82:	6d 87       	std	Y+13, r22	; 0x0d
     c84:	7e 87       	std	Y+14, r23	; 0x0e
     c86:	8f 87       	std	Y+15, r24	; 0x0f
     c88:	98 8b       	std	Y+16, r25	; 0x10

		gz += twoKp * halfez;
     c8a:	29 81       	ldd	r18, Y+1	; 0x01
     c8c:	3a 81       	ldd	r19, Y+2	; 0x02
     c8e:	4b 81       	ldd	r20, Y+3	; 0x03
     c90:	5c 81       	ldd	r21, Y+4	; 0x04
     c92:	69 8d       	ldd	r22, Y+25	; 0x19
     c94:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c96:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c98:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c9a:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     c9e:	6b 01       	movw	r12, r22
     ca0:	7c 01       	movw	r14, r24
     ca2:	2d 89       	ldd	r18, Y+21	; 0x15
     ca4:	3e 89       	ldd	r19, Y+22	; 0x16
     ca6:	4f 89       	ldd	r20, Y+23	; 0x17
     ca8:	58 8d       	ldd	r21, Y+24	; 0x18
     caa:	6d 8d       	ldd	r22, Y+29	; 0x1d
     cac:	7e 8d       	ldd	r23, Y+30	; 0x1e
     cae:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cb0:	98 a1       	ldd	r25, Y+32	; 0x20
     cb2:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
     cba:	c7 01       	movw	r24, r14
     cbc:	b6 01       	movw	r22, r12
     cbe:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
     cc2:	9b 01       	movw	r18, r22
     cc4:	ac 01       	movw	r20, r24
     cc6:	69 89       	ldd	r22, Y+17	; 0x11
     cc8:	7a 89       	ldd	r23, Y+18	; 0x12
     cca:	8b 89       	ldd	r24, Y+19	; 0x13
     ccc:	9c 89       	ldd	r25, Y+20	; 0x14
     cce:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     cd2:	69 8b       	std	Y+17, r22	; 0x11
     cd4:	7a 8b       	std	Y+18, r23	; 0x12
     cd6:	8b 8b       	std	Y+19, r24	; 0x13
     cd8:	9c 8b       	std	Y+20, r25	; 0x14

	}

	// Integrate rate of change of quaternion

	gx *= (0.5f * (1.0f / sampleFreq));
     cda:	2f e1       	ldi	r18, 0x1F	; 31
     cdc:	33 ea       	ldi	r19, 0xA3	; 163
     cde:	45 ef       	ldi	r20, 0xF5	; 245
     ce0:	5b e3       	ldi	r21, 0x3B	; 59
     ce2:	69 85       	ldd	r22, Y+9	; 0x09
     ce4:	7a 85       	ldd	r23, Y+10	; 0x0a
     ce6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ce8:	9c 85       	ldd	r25, Y+12	; 0x0c
     cea:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     cee:	69 87       	std	Y+9, r22	; 0x09
     cf0:	7a 87       	std	Y+10, r23	; 0x0a
     cf2:	8b 87       	std	Y+11, r24	; 0x0b
     cf4:	9c 87       	std	Y+12, r25	; 0x0c

	gy *= (0.5f * (1.0f / sampleFreq));
     cf6:	2f e1       	ldi	r18, 0x1F	; 31
     cf8:	33 ea       	ldi	r19, 0xA3	; 163
     cfa:	45 ef       	ldi	r20, 0xF5	; 245
     cfc:	5b e3       	ldi	r21, 0x3B	; 59
     cfe:	6d 85       	ldd	r22, Y+13	; 0x0d
     d00:	7e 85       	ldd	r23, Y+14	; 0x0e
     d02:	8f 85       	ldd	r24, Y+15	; 0x0f
     d04:	98 89       	ldd	r25, Y+16	; 0x10
     d06:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     d0a:	6d 87       	std	Y+13, r22	; 0x0d
     d0c:	7e 87       	std	Y+14, r23	; 0x0e
     d0e:	8f 87       	std	Y+15, r24	; 0x0f
     d10:	98 8b       	std	Y+16, r25	; 0x10

	gz *= (0.5f * (1.0f / sampleFreq));
     d12:	2f e1       	ldi	r18, 0x1F	; 31
     d14:	33 ea       	ldi	r19, 0xA3	; 163
     d16:	45 ef       	ldi	r20, 0xF5	; 245
     d18:	5b e3       	ldi	r21, 0x3B	; 59
     d1a:	69 89       	ldd	r22, Y+17	; 0x11
     d1c:	7a 89       	ldd	r23, Y+18	; 0x12
     d1e:	8b 89       	ldd	r24, Y+19	; 0x13
     d20:	9c 89       	ldd	r25, Y+20	; 0x14
     d22:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     d26:	69 8b       	std	Y+17, r22	; 0x11
     d28:	7a 8b       	std	Y+18, r23	; 0x12
     d2a:	8b 8b       	std	Y+19, r24	; 0x13
     d2c:	9c 8b       	std	Y+20, r25	; 0x14

	qa = q0;
     d2e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <q0>
     d32:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <q0+0x1>
     d36:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <q0+0x2>
     d3a:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <q0+0x3>
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	9a 83       	std	Y+2, r25	; 0x02
     d42:	ab 83       	std	Y+3, r26	; 0x03
     d44:	bc 83       	std	Y+4, r27	; 0x04

	qb = q1;
     d46:	c0 90 7c 01 	lds	r12, 0x017C	; 0x80017c <q1>
     d4a:	d0 90 7d 01 	lds	r13, 0x017D	; 0x80017d <q1+0x1>
     d4e:	e0 90 7e 01 	lds	r14, 0x017E	; 0x80017e <q1+0x2>
     d52:	f0 90 7f 01 	lds	r15, 0x017F	; 0x80017f <q1+0x3>

	qc = q2;
     d56:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <q2>
     d5a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <q2+0x1>
     d5e:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <q2+0x2>
     d62:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <q2+0x3>
     d66:	8d 83       	std	Y+5, r24	; 0x05
     d68:	9e 83       	std	Y+6, r25	; 0x06
     d6a:	af 83       	std	Y+7, r26	; 0x07
     d6c:	b8 87       	std	Y+8, r27	; 0x08

	//update

	q0 += (-qb * gx - qc * gy - q3 * gz);
     d6e:	40 90 74 01 	lds	r4, 0x0174	; 0x800174 <q3>
     d72:	50 90 75 01 	lds	r5, 0x0175	; 0x800175 <q3+0x1>
     d76:	60 90 76 01 	lds	r6, 0x0176	; 0x800176 <q3+0x2>
     d7a:	70 90 77 01 	lds	r7, 0x0177	; 0x800177 <q3+0x3>
     d7e:	c7 01       	movw	r24, r14
     d80:	b6 01       	movw	r22, r12
     d82:	90 58       	subi	r25, 0x80	; 128
     d84:	29 85       	ldd	r18, Y+9	; 0x09
     d86:	3a 85       	ldd	r19, Y+10	; 0x0a
     d88:	4b 85       	ldd	r20, Y+11	; 0x0b
     d8a:	5c 85       	ldd	r21, Y+12	; 0x0c
     d8c:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     d90:	4b 01       	movw	r8, r22
     d92:	5c 01       	movw	r10, r24
     d94:	2d 81       	ldd	r18, Y+5	; 0x05
     d96:	3e 81       	ldd	r19, Y+6	; 0x06
     d98:	4f 81       	ldd	r20, Y+7	; 0x07
     d9a:	58 85       	ldd	r21, Y+8	; 0x08
     d9c:	6d 85       	ldd	r22, Y+13	; 0x0d
     d9e:	7e 85       	ldd	r23, Y+14	; 0x0e
     da0:	8f 85       	ldd	r24, Y+15	; 0x0f
     da2:	98 89       	ldd	r25, Y+16	; 0x10
     da4:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     da8:	9b 01       	movw	r18, r22
     daa:	ac 01       	movw	r20, r24
     dac:	c5 01       	movw	r24, r10
     dae:	b4 01       	movw	r22, r8
     db0:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
     db4:	4b 01       	movw	r8, r22
     db6:	5c 01       	movw	r10, r24
     db8:	a3 01       	movw	r20, r6
     dba:	92 01       	movw	r18, r4
     dbc:	69 89       	ldd	r22, Y+17	; 0x11
     dbe:	7a 89       	ldd	r23, Y+18	; 0x12
     dc0:	8b 89       	ldd	r24, Y+19	; 0x13
     dc2:	9c 89       	ldd	r25, Y+20	; 0x14
     dc4:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     dc8:	9b 01       	movw	r18, r22
     dca:	ac 01       	movw	r20, r24
     dcc:	c5 01       	movw	r24, r10
     dce:	b4 01       	movw	r22, r8
     dd0:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
     dd4:	29 81       	ldd	r18, Y+1	; 0x01
     dd6:	3a 81       	ldd	r19, Y+2	; 0x02
     dd8:	4b 81       	ldd	r20, Y+3	; 0x03
     dda:	5c 81       	ldd	r21, Y+4	; 0x04
     ddc:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     de0:	69 8f       	std	Y+25, r22	; 0x19
     de2:	7a 8f       	std	Y+26, r23	; 0x1a
     de4:	8b 8f       	std	Y+27, r24	; 0x1b
     de6:	9c 8f       	std	Y+28, r25	; 0x1c

	q1 += (qa * gx + qc * gz - q3 * gy);
     de8:	29 81       	ldd	r18, Y+1	; 0x01
     dea:	3a 81       	ldd	r19, Y+2	; 0x02
     dec:	4b 81       	ldd	r20, Y+3	; 0x03
     dee:	5c 81       	ldd	r21, Y+4	; 0x04
     df0:	69 85       	ldd	r22, Y+9	; 0x09
     df2:	7a 85       	ldd	r23, Y+10	; 0x0a
     df4:	8b 85       	ldd	r24, Y+11	; 0x0b
     df6:	9c 85       	ldd	r25, Y+12	; 0x0c
     df8:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     dfc:	4b 01       	movw	r8, r22
     dfe:	5c 01       	movw	r10, r24
     e00:	2d 81       	ldd	r18, Y+5	; 0x05
     e02:	3e 81       	ldd	r19, Y+6	; 0x06
     e04:	4f 81       	ldd	r20, Y+7	; 0x07
     e06:	58 85       	ldd	r21, Y+8	; 0x08
     e08:	69 89       	ldd	r22, Y+17	; 0x11
     e0a:	7a 89       	ldd	r23, Y+18	; 0x12
     e0c:	8b 89       	ldd	r24, Y+19	; 0x13
     e0e:	9c 89       	ldd	r25, Y+20	; 0x14
     e10:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     e14:	9b 01       	movw	r18, r22
     e16:	ac 01       	movw	r20, r24
     e18:	c5 01       	movw	r24, r10
     e1a:	b4 01       	movw	r22, r8
     e1c:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     e20:	4b 01       	movw	r8, r22
     e22:	5c 01       	movw	r10, r24
     e24:	a3 01       	movw	r20, r6
     e26:	92 01       	movw	r18, r4
     e28:	6d 85       	ldd	r22, Y+13	; 0x0d
     e2a:	7e 85       	ldd	r23, Y+14	; 0x0e
     e2c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e2e:	98 89       	ldd	r25, Y+16	; 0x10
     e30:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     e34:	9b 01       	movw	r18, r22
     e36:	ac 01       	movw	r20, r24
     e38:	c5 01       	movw	r24, r10
     e3a:	b4 01       	movw	r22, r8
     e3c:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
     e40:	a7 01       	movw	r20, r14
     e42:	96 01       	movw	r18, r12
     e44:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     e48:	6d 8f       	std	Y+29, r22	; 0x1d
     e4a:	7e 8f       	std	Y+30, r23	; 0x1e
     e4c:	8f 8f       	std	Y+31, r24	; 0x1f
     e4e:	98 a3       	std	Y+32, r25	; 0x20

	q2 += (qa * gy - qb * gz + q3 * gx);
     e50:	29 81       	ldd	r18, Y+1	; 0x01
     e52:	3a 81       	ldd	r19, Y+2	; 0x02
     e54:	4b 81       	ldd	r20, Y+3	; 0x03
     e56:	5c 81       	ldd	r21, Y+4	; 0x04
     e58:	6d 85       	ldd	r22, Y+13	; 0x0d
     e5a:	7e 85       	ldd	r23, Y+14	; 0x0e
     e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e5e:	98 89       	ldd	r25, Y+16	; 0x10
     e60:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     e64:	4b 01       	movw	r8, r22
     e66:	5c 01       	movw	r10, r24
     e68:	a7 01       	movw	r20, r14
     e6a:	96 01       	movw	r18, r12
     e6c:	69 89       	ldd	r22, Y+17	; 0x11
     e6e:	7a 89       	ldd	r23, Y+18	; 0x12
     e70:	8b 89       	ldd	r24, Y+19	; 0x13
     e72:	9c 89       	ldd	r25, Y+20	; 0x14
     e74:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     e78:	9b 01       	movw	r18, r22
     e7a:	ac 01       	movw	r20, r24
     e7c:	c5 01       	movw	r24, r10
     e7e:	b4 01       	movw	r22, r8
     e80:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
     e84:	4b 01       	movw	r8, r22
     e86:	5c 01       	movw	r10, r24
     e88:	a3 01       	movw	r20, r6
     e8a:	92 01       	movw	r18, r4
     e8c:	69 85       	ldd	r22, Y+9	; 0x09
     e8e:	7a 85       	ldd	r23, Y+10	; 0x0a
     e90:	8b 85       	ldd	r24, Y+11	; 0x0b
     e92:	9c 85       	ldd	r25, Y+12	; 0x0c
     e94:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     e98:	9b 01       	movw	r18, r22
     e9a:	ac 01       	movw	r20, r24
     e9c:	c5 01       	movw	r24, r10
     e9e:	b4 01       	movw	r22, r8
     ea0:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     ea4:	2d 81       	ldd	r18, Y+5	; 0x05
     ea6:	3e 81       	ldd	r19, Y+6	; 0x06
     ea8:	4f 81       	ldd	r20, Y+7	; 0x07
     eaa:	58 85       	ldd	r21, Y+8	; 0x08
     eac:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     eb0:	6d 8b       	std	Y+21, r22	; 0x15
     eb2:	7e 8b       	std	Y+22, r23	; 0x16
     eb4:	8f 8b       	std	Y+23, r24	; 0x17
     eb6:	98 8f       	std	Y+24, r25	; 0x18

	q3 += (qa * gz + qb * gy - qc * gx);
     eb8:	29 81       	ldd	r18, Y+1	; 0x01
     eba:	3a 81       	ldd	r19, Y+2	; 0x02
     ebc:	4b 81       	ldd	r20, Y+3	; 0x03
     ebe:	5c 81       	ldd	r21, Y+4	; 0x04
     ec0:	69 89       	ldd	r22, Y+17	; 0x11
     ec2:	7a 89       	ldd	r23, Y+18	; 0x12
     ec4:	8b 89       	ldd	r24, Y+19	; 0x13
     ec6:	9c 89       	ldd	r25, Y+20	; 0x14
     ec8:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     ecc:	4b 01       	movw	r8, r22
     ece:	5c 01       	movw	r10, r24
     ed0:	a7 01       	movw	r20, r14
     ed2:	96 01       	movw	r18, r12
     ed4:	6d 85       	ldd	r22, Y+13	; 0x0d
     ed6:	7e 85       	ldd	r23, Y+14	; 0x0e
     ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eda:	98 89       	ldd	r25, Y+16	; 0x10
     edc:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     ee0:	9b 01       	movw	r18, r22
     ee2:	ac 01       	movw	r20, r24
     ee4:	c5 01       	movw	r24, r10
     ee6:	b4 01       	movw	r22, r8
     ee8:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     eec:	6b 01       	movw	r12, r22
     eee:	7c 01       	movw	r14, r24
     ef0:	2d 81       	ldd	r18, Y+5	; 0x05
     ef2:	3e 81       	ldd	r19, Y+6	; 0x06
     ef4:	4f 81       	ldd	r20, Y+7	; 0x07
     ef6:	58 85       	ldd	r21, Y+8	; 0x08
     ef8:	69 85       	ldd	r22, Y+9	; 0x09
     efa:	7a 85       	ldd	r23, Y+10	; 0x0a
     efc:	8b 85       	ldd	r24, Y+11	; 0x0b
     efe:	9c 85       	ldd	r25, Y+12	; 0x0c
     f00:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     f04:	9b 01       	movw	r18, r22
     f06:	ac 01       	movw	r20, r24
     f08:	c7 01       	movw	r24, r14
     f0a:	b6 01       	movw	r22, r12
     f0c:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
     f10:	a3 01       	movw	r20, r6
     f12:	92 01       	movw	r18, r4
     f14:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     f18:	4b 01       	movw	r8, r22
     f1a:	5c 01       	movw	r10, r24

	// Normalise quaternion

	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
     f1c:	29 8d       	ldd	r18, Y+25	; 0x19
     f1e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     f20:	4b 8d       	ldd	r20, Y+27	; 0x1b
     f22:	5c 8d       	ldd	r21, Y+28	; 0x1c
     f24:	ca 01       	movw	r24, r20
     f26:	b9 01       	movw	r22, r18
     f28:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     f2c:	6b 01       	movw	r12, r22
     f2e:	7c 01       	movw	r14, r24
     f30:	2d 8d       	ldd	r18, Y+29	; 0x1d
     f32:	3e 8d       	ldd	r19, Y+30	; 0x1e
     f34:	4f 8d       	ldd	r20, Y+31	; 0x1f
     f36:	58 a1       	ldd	r21, Y+32	; 0x20
     f38:	ca 01       	movw	r24, r20
     f3a:	b9 01       	movw	r22, r18
     f3c:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     f40:	9b 01       	movw	r18, r22
     f42:	ac 01       	movw	r20, r24
     f44:	c7 01       	movw	r24, r14
     f46:	b6 01       	movw	r22, r12
     f48:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     f4c:	6b 01       	movw	r12, r22
     f4e:	7c 01       	movw	r14, r24
     f50:	2d 89       	ldd	r18, Y+21	; 0x15
     f52:	3e 89       	ldd	r19, Y+22	; 0x16
     f54:	4f 89       	ldd	r20, Y+23	; 0x17
     f56:	58 8d       	ldd	r21, Y+24	; 0x18
     f58:	ca 01       	movw	r24, r20
     f5a:	b9 01       	movw	r22, r18
     f5c:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     f60:	9b 01       	movw	r18, r22
     f62:	ac 01       	movw	r20, r24
     f64:	c7 01       	movw	r24, r14
     f66:	b6 01       	movw	r22, r12
     f68:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     f6c:	6b 01       	movw	r12, r22
     f6e:	7c 01       	movw	r14, r24
     f70:	a5 01       	movw	r20, r10
     f72:	94 01       	movw	r18, r8
     f74:	c5 01       	movw	r24, r10
     f76:	b4 01       	movw	r22, r8
     f78:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     f7c:	9b 01       	movw	r18, r22
     f7e:	ac 01       	movw	r20, r24
     f80:	c7 01       	movw	r24, r14
     f82:	b6 01       	movw	r22, r12
     f84:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
     f88:	0e 94 b6 04 	call	0x96c	; 0x96c <invSqrt>
     f8c:	6b 01       	movw	r12, r22
     f8e:	7c 01       	movw	r14, r24

	q0 *= recipNorm;
     f90:	9b 01       	movw	r18, r22
     f92:	ac 01       	movw	r20, r24
     f94:	69 8d       	ldd	r22, Y+25	; 0x19
     f96:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f98:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f9c:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     fa0:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <q0>
     fa4:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <q0+0x1>
     fa8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <q0+0x2>
     fac:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <q0+0x3>

	q1 *= recipNorm;
     fb0:	a7 01       	movw	r20, r14
     fb2:	96 01       	movw	r18, r12
     fb4:	6d 8d       	ldd	r22, Y+29	; 0x1d
     fb6:	7e 8d       	ldd	r23, Y+30	; 0x1e
     fb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fba:	98 a1       	ldd	r25, Y+32	; 0x20
     fbc:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     fc0:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <q1>
     fc4:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <q1+0x1>
     fc8:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <q1+0x2>
     fcc:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <q1+0x3>

	q2 *= recipNorm;
     fd0:	a7 01       	movw	r20, r14
     fd2:	96 01       	movw	r18, r12
     fd4:	6d 89       	ldd	r22, Y+21	; 0x15
     fd6:	7e 89       	ldd	r23, Y+22	; 0x16
     fd8:	8f 89       	ldd	r24, Y+23	; 0x17
     fda:	98 8d       	ldd	r25, Y+24	; 0x18
     fdc:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     fe0:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <q2>
     fe4:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <q2+0x1>
     fe8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <q2+0x2>
     fec:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <q2+0x3>

	q3 *= recipNorm;
     ff0:	a7 01       	movw	r20, r14
     ff2:	96 01       	movw	r18, r12
     ff4:	c5 01       	movw	r24, r10
     ff6:	b4 01       	movw	r22, r8
     ff8:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
     ffc:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <q3>
    1000:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <q3+0x1>
    1004:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <q3+0x2>
    1008:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <q3+0x3>

}
    100c:	a0 96       	adiw	r28, 0x20	; 32
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	df 90       	pop	r13
    1026:	cf 90       	pop	r12
    1028:	bf 90       	pop	r11
    102a:	af 90       	pop	r10
    102c:	9f 90       	pop	r9
    102e:	8f 90       	pop	r8
    1030:	7f 90       	pop	r7
    1032:	6f 90       	pop	r6
    1034:	5f 90       	pop	r5
    1036:	4f 90       	pop	r4
    1038:	08 95       	ret

0000103a <q2Angle>:

void q2Angle(float angle[3])
{
    103a:	4f 92       	push	r4
    103c:	5f 92       	push	r5
    103e:	6f 92       	push	r6
    1040:	7f 92       	push	r7
    1042:	8f 92       	push	r8
    1044:	9f 92       	push	r9
    1046:	af 92       	push	r10
    1048:	bf 92       	push	r11
    104a:	cf 92       	push	r12
    104c:	df 92       	push	r13
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	2e 97       	sbiw	r28, 0x0e	; 14
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	9e 87       	std	Y+14, r25	; 0x0e
    1068:	8d 87       	std	Y+13, r24	; 0x0d
	angle[2] = atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2*q2 - 2 * q3* q3 + 1)* 57.3; // yaw
    106a:	c0 90 78 01 	lds	r12, 0x0178	; 0x800178 <q2>
    106e:	d0 90 79 01 	lds	r13, 0x0179	; 0x800179 <q2+0x1>
    1072:	e0 90 7a 01 	lds	r14, 0x017A	; 0x80017a <q2+0x2>
    1076:	f0 90 7b 01 	lds	r15, 0x017B	; 0x80017b <q2+0x3>
    107a:	80 90 74 01 	lds	r8, 0x0174	; 0x800174 <q3>
    107e:	90 90 75 01 	lds	r9, 0x0175	; 0x800175 <q3+0x1>
    1082:	a0 90 76 01 	lds	r10, 0x0176	; 0x800176 <q3+0x2>
    1086:	b0 90 77 01 	lds	r11, 0x0177	; 0x800177 <q3+0x3>
    108a:	40 90 7c 01 	lds	r4, 0x017C	; 0x80017c <q1>
    108e:	50 90 7d 01 	lds	r5, 0x017D	; 0x80017d <q1+0x1>
    1092:	60 90 7e 01 	lds	r6, 0x017E	; 0x80017e <q1+0x2>
    1096:	70 90 7f 01 	lds	r7, 0x017F	; 0x80017f <q1+0x3>
    109a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <q0>
    109e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <q0+0x1>
    10a2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <q0+0x2>
    10a6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <q0+0x3>
    10aa:	9b 01       	movw	r18, r22
    10ac:	ac 01       	movw	r20, r24
    10ae:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
    10b2:	69 87       	std	Y+9, r22	; 0x09
    10b4:	7a 87       	std	Y+10, r23	; 0x0a
    10b6:	8b 87       	std	Y+11, r24	; 0x0b
    10b8:	9c 87       	std	Y+12, r25	; 0x0c
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	50 ec       	ldi	r21, 0xC0	; 192
    10c2:	c7 01       	movw	r24, r14
    10c4:	b6 01       	movw	r22, r12
    10c6:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    10ca:	a7 01       	movw	r20, r14
    10cc:	96 01       	movw	r18, r12
    10ce:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    10d2:	69 83       	std	Y+1, r22	; 0x01
    10d4:	7a 83       	std	Y+2, r23	; 0x02
    10d6:	8b 83       	std	Y+3, r24	; 0x03
    10d8:	9c 83       	std	Y+4, r25	; 0x04
    10da:	a5 01       	movw	r20, r10
    10dc:	94 01       	movw	r18, r8
    10de:	c5 01       	movw	r24, r10
    10e0:	b4 01       	movw	r22, r8
    10e2:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
    10e6:	a5 01       	movw	r20, r10
    10e8:	94 01       	movw	r18, r8
    10ea:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    10ee:	9b 01       	movw	r18, r22
    10f0:	ac 01       	movw	r20, r24
    10f2:	69 81       	ldd	r22, Y+1	; 0x01
    10f4:	7a 81       	ldd	r23, Y+2	; 0x02
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
    110a:	69 83       	std	Y+1, r22	; 0x01
    110c:	7a 83       	std	Y+2, r23	; 0x02
    110e:	8b 83       	std	Y+3, r24	; 0x03
    1110:	9c 83       	std	Y+4, r25	; 0x04
    1112:	a3 01       	movw	r20, r6
    1114:	92 01       	movw	r18, r4
    1116:	c3 01       	movw	r24, r6
    1118:	b2 01       	movw	r22, r4
    111a:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
    111e:	a7 01       	movw	r20, r14
    1120:	96 01       	movw	r18, r12
    1122:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    1126:	6d 83       	std	Y+5, r22	; 0x05
    1128:	7e 83       	std	Y+6, r23	; 0x06
    112a:	8f 83       	std	Y+7, r24	; 0x07
    112c:	98 87       	std	Y+8, r25	; 0x08
    112e:	29 85       	ldd	r18, Y+9	; 0x09
    1130:	3a 85       	ldd	r19, Y+10	; 0x0a
    1132:	4b 85       	ldd	r20, Y+11	; 0x0b
    1134:	5c 85       	ldd	r21, Y+12	; 0x0c
    1136:	c5 01       	movw	r24, r10
    1138:	b4 01       	movw	r22, r8
    113a:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    113e:	9b 01       	movw	r18, r22
    1140:	ac 01       	movw	r20, r24
    1142:	6d 81       	ldd	r22, Y+5	; 0x05
    1144:	7e 81       	ldd	r23, Y+6	; 0x06
    1146:	8f 81       	ldd	r24, Y+7	; 0x07
    1148:	98 85       	ldd	r25, Y+8	; 0x08
    114a:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
    114e:	29 81       	ldd	r18, Y+1	; 0x01
    1150:	3a 81       	ldd	r19, Y+2	; 0x02
    1152:	4b 81       	ldd	r20, Y+3	; 0x03
    1154:	5c 81       	ldd	r21, Y+4	; 0x04
    1156:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <atan2>
    115a:	23 e3       	ldi	r18, 0x33	; 51
    115c:	33 e3       	ldi	r19, 0x33	; 51
    115e:	45 e6       	ldi	r20, 0x65	; 101
    1160:	52 e4       	ldi	r21, 0x42	; 66
    1162:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    1166:	ed 85       	ldd	r30, Y+13	; 0x0d
    1168:	fe 85       	ldd	r31, Y+14	; 0x0e
    116a:	60 87       	std	Z+8, r22	; 0x08
    116c:	71 87       	std	Z+9, r23	; 0x09
    116e:	82 87       	std	Z+10, r24	; 0x0a
    1170:	93 87       	std	Z+11, r25	; 0x0b

	angle[1] = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; // pitch
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	50 ec       	ldi	r21, 0xC0	; 192
    117a:	c3 01       	movw	r24, r6
    117c:	b2 01       	movw	r22, r4
    117e:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    1182:	69 83       	std	Y+1, r22	; 0x01
    1184:	7a 83       	std	Y+2, r23	; 0x02
    1186:	8b 83       	std	Y+3, r24	; 0x03
    1188:	9c 83       	std	Y+4, r25	; 0x04
    118a:	9b 01       	movw	r18, r22
    118c:	ac 01       	movw	r20, r24
    118e:	c5 01       	movw	r24, r10
    1190:	b4 01       	movw	r22, r8
    1192:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    1196:	6d 83       	std	Y+5, r22	; 0x05
    1198:	7e 83       	std	Y+6, r23	; 0x06
    119a:	8f 83       	std	Y+7, r24	; 0x07
    119c:	98 87       	std	Y+8, r25	; 0x08
    119e:	29 85       	ldd	r18, Y+9	; 0x09
    11a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    11a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    11a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    11a6:	c7 01       	movw	r24, r14
    11a8:	b6 01       	movw	r22, r12
    11aa:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    11ae:	9b 01       	movw	r18, r22
    11b0:	ac 01       	movw	r20, r24
    11b2:	6d 81       	ldd	r22, Y+5	; 0x05
    11b4:	7e 81       	ldd	r23, Y+6	; 0x06
    11b6:	8f 81       	ldd	r24, Y+7	; 0x07
    11b8:	98 85       	ldd	r25, Y+8	; 0x08
    11ba:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
    11be:	0e 94 c5 18 	call	0x318a	; 0x318a <asin>
    11c2:	23 e3       	ldi	r18, 0x33	; 51
    11c4:	33 e3       	ldi	r19, 0x33	; 51
    11c6:	45 e6       	ldi	r20, 0x65	; 101
    11c8:	52 e4       	ldi	r21, 0x42	; 66
    11ca:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    11ce:	ed 85       	ldd	r30, Y+13	; 0x0d
    11d0:	fe 85       	ldd	r31, Y+14	; 0x0e
    11d2:	64 83       	std	Z+4, r22	; 0x04
    11d4:	75 83       	std	Z+5, r23	; 0x05
    11d6:	86 83       	std	Z+6, r24	; 0x06
    11d8:	97 83       	std	Z+7, r25	; 0x07

	angle[0] = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
    11da:	a7 01       	movw	r20, r14
    11dc:	96 01       	movw	r18, r12
    11de:	c7 01       	movw	r24, r14
    11e0:	b6 01       	movw	r22, r12
    11e2:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
    11e6:	6d 83       	std	Y+5, r22	; 0x05
    11e8:	7e 83       	std	Y+6, r23	; 0x06
    11ea:	8f 83       	std	Y+7, r24	; 0x07
    11ec:	98 87       	std	Y+8, r25	; 0x08
    11ee:	29 81       	ldd	r18, Y+1	; 0x01
    11f0:	3a 81       	ldd	r19, Y+2	; 0x02
    11f2:	4b 81       	ldd	r20, Y+3	; 0x03
    11f4:	5c 81       	ldd	r21, Y+4	; 0x04
    11f6:	c3 01       	movw	r24, r6
    11f8:	b2 01       	movw	r22, r4
    11fa:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    11fe:	69 83       	std	Y+1, r22	; 0x01
    1200:	7a 83       	std	Y+2, r23	; 0x02
    1202:	8b 83       	std	Y+3, r24	; 0x03
    1204:	9c 83       	std	Y+4, r25	; 0x04
    1206:	2d 81       	ldd	r18, Y+5	; 0x05
    1208:	3e 81       	ldd	r19, Y+6	; 0x06
    120a:	4f 81       	ldd	r20, Y+7	; 0x07
    120c:	58 85       	ldd	r21, Y+8	; 0x08
    120e:	c7 01       	movw	r24, r14
    1210:	b6 01       	movw	r22, r12
    1212:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    1216:	9b 01       	movw	r18, r22
    1218:	ac 01       	movw	r20, r24
    121a:	69 81       	ldd	r22, Y+1	; 0x01
    121c:	7a 81       	ldd	r23, Y+2	; 0x02
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e8       	ldi	r20, 0x80	; 128
    122c:	5f e3       	ldi	r21, 0x3F	; 63
    122e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
    1232:	6b 01       	movw	r12, r22
    1234:	7c 01       	movw	r14, r24
    1236:	2d 81       	ldd	r18, Y+5	; 0x05
    1238:	3e 81       	ldd	r19, Y+6	; 0x06
    123a:	4f 81       	ldd	r20, Y+7	; 0x07
    123c:	58 85       	ldd	r21, Y+8	; 0x08
    123e:	c5 01       	movw	r24, r10
    1240:	b4 01       	movw	r22, r8
    1242:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    1246:	4b 01       	movw	r8, r22
    1248:	5c 01       	movw	r10, r24
    124a:	29 85       	ldd	r18, Y+9	; 0x09
    124c:	3a 85       	ldd	r19, Y+10	; 0x0a
    124e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1250:	5c 85       	ldd	r21, Y+12	; 0x0c
    1252:	c3 01       	movw	r24, r6
    1254:	b2 01       	movw	r22, r4
    1256:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    125a:	9b 01       	movw	r18, r22
    125c:	ac 01       	movw	r20, r24
    125e:	c5 01       	movw	r24, r10
    1260:	b4 01       	movw	r22, r8
    1262:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
    1266:	a7 01       	movw	r20, r14
    1268:	96 01       	movw	r18, r12
    126a:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <atan2>
    126e:	23 e3       	ldi	r18, 0x33	; 51
    1270:	33 e3       	ldi	r19, 0x33	; 51
    1272:	45 e6       	ldi	r20, 0x65	; 101
    1274:	52 e4       	ldi	r21, 0x42	; 66
    1276:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    127a:	ed 85       	ldd	r30, Y+13	; 0x0d
    127c:	fe 85       	ldd	r31, Y+14	; 0x0e
    127e:	60 83       	st	Z, r22
    1280:	71 83       	std	Z+1, r23	; 0x01
    1282:	82 83       	std	Z+2, r24	; 0x02
    1284:	93 83       	std	Z+3, r25	; 0x03
    1286:	2e 96       	adiw	r28, 0x0e	; 14
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	bf 90       	pop	r11
    12a0:	af 90       	pop	r10
    12a2:	9f 90       	pop	r9
    12a4:	8f 90       	pop	r8
    12a6:	7f 90       	pop	r7
    12a8:	6f 90       	pop	r6
    12aa:	5f 90       	pop	r5
    12ac:	4f 90       	pop	r4
    12ae:	08 95       	ret

000012b0 <MPU_read>:
	
	MPU_Calib(AccData,GyroData);
}

void MPU_read(float Acc[3], float Gyro[3])
{
    12b0:	4f 92       	push	r4
    12b2:	5f 92       	push	r5
    12b4:	6f 92       	push	r6
    12b6:	7f 92       	push	r7
    12b8:	af 92       	push	r10
    12ba:	bf 92       	push	r11
    12bc:	cf 92       	push	r12
    12be:	df 92       	push	r13
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	8c 01       	movw	r16, r24
    12ce:	eb 01       	movw	r28, r22
	I2C_Start_Wait(MPU6050_addr);
    12d0:	80 ed       	ldi	r24, 0xD0	; 208
    12d2:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <I2C_Start_Wait>
	I2C_Write(0x3B);
    12d6:	8b e3       	ldi	r24, 0x3B	; 59
    12d8:	0e 94 05 18 	call	0x300a	; 0x300a <I2C_Write>
	I2C_Repeated_Start(0xD1);
    12dc:	81 ed       	ldi	r24, 0xD1	; 209
    12de:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <I2C_Repeated_Start>
	Acc[0] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    12e2:	0e 94 1c 18 	call	0x3038	; 0x3038 <I2C_Read_Ack>
    12e6:	f8 2e       	mov	r15, r24
    12e8:	0e 94 1c 18 	call	0x3038	; 0x3038 <I2C_Read_Ack>
    12ec:	6f 2d       	mov	r22, r15
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	76 2f       	mov	r23, r22
    12f2:	66 27       	eor	r22, r22
    12f4:	68 2b       	or	r22, r24
    12f6:	07 2e       	mov	r0, r23
    12f8:	00 0c       	add	r0, r0
    12fa:	88 0b       	sbc	r24, r24
    12fc:	99 0b       	sbc	r25, r25
    12fe:	0e 94 01 1a 	call	0x3402	; 0x3402 <__floatsisf>
    1302:	f8 01       	movw	r30, r16
    1304:	60 83       	st	Z, r22
    1306:	71 83       	std	Z+1, r23	; 0x01
    1308:	82 83       	std	Z+2, r24	; 0x02
    130a:	93 83       	std	Z+3, r25	; 0x03
	Acc[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    130c:	0e 94 1c 18 	call	0x3038	; 0x3038 <I2C_Read_Ack>
    1310:	f8 2e       	mov	r15, r24
    1312:	0e 94 1c 18 	call	0x3038	; 0x3038 <I2C_Read_Ack>
    1316:	6f 2d       	mov	r22, r15
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	76 2f       	mov	r23, r22
    131c:	66 27       	eor	r22, r22
    131e:	68 2b       	or	r22, r24
    1320:	07 2e       	mov	r0, r23
    1322:	00 0c       	add	r0, r0
    1324:	88 0b       	sbc	r24, r24
    1326:	99 0b       	sbc	r25, r25
    1328:	0e 94 01 1a 	call	0x3402	; 0x3402 <__floatsisf>
    132c:	f8 01       	movw	r30, r16
    132e:	64 83       	std	Z+4, r22	; 0x04
    1330:	75 83       	std	Z+5, r23	; 0x05
    1332:	86 83       	std	Z+6, r24	; 0x06
    1334:	97 83       	std	Z+7, r25	; 0x07
	Acc[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    1336:	0e 94 1c 18 	call	0x3038	; 0x3038 <I2C_Read_Ack>
    133a:	f8 2e       	mov	r15, r24
    133c:	0e 94 1c 18 	call	0x3038	; 0x3038 <I2C_Read_Ack>
    1340:	6f 2d       	mov	r22, r15
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	76 2f       	mov	r23, r22
    1346:	66 27       	eor	r22, r22
    1348:	68 2b       	or	r22, r24
    134a:	07 2e       	mov	r0, r23
    134c:	00 0c       	add	r0, r0
    134e:	88 0b       	sbc	r24, r24
    1350:	99 0b       	sbc	r25, r25
    1352:	0e 94 01 1a 	call	0x3402	; 0x3402 <__floatsisf>
    1356:	f8 01       	movw	r30, r16
    1358:	60 87       	std	Z+8, r22	; 0x08
    135a:	71 87       	std	Z+9, r23	; 0x09
    135c:	82 87       	std	Z+10, r24	; 0x0a
    135e:	93 87       	std	Z+11, r25	; 0x0b
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    1360:	0e 94 1c 18 	call	0x3038	; 0x3038 <I2C_Read_Ack>
    1364:	f8 2e       	mov	r15, r24
    1366:	0e 94 1c 18 	call	0x3038	; 0x3038 <I2C_Read_Ack>
    136a:	6f 2d       	mov	r22, r15
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	76 2f       	mov	r23, r22
    1370:	66 27       	eor	r22, r22
    1372:	68 2b       	or	r22, r24
    1374:	07 2e       	mov	r0, r23
    1376:	00 0c       	add	r0, r0
    1378:	88 0b       	sbc	r24, r24
    137a:	99 0b       	sbc	r25, r25
    137c:	0e 94 01 1a 	call	0x3402	; 0x3402 <__floatsisf>
    1380:	60 93 35 02 	sts	0x0235, r22	; 0x800235 <Temperature>
    1384:	70 93 36 02 	sts	0x0236, r23	; 0x800236 <Temperature+0x1>
    1388:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <Temperature+0x2>
    138c:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <Temperature+0x3>
	Gyro[0] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    1390:	0e 94 1c 18 	call	0x3038	; 0x3038 <I2C_Read_Ack>
    1394:	f8 2e       	mov	r15, r24
    1396:	0e 94 1c 18 	call	0x3038	; 0x3038 <I2C_Read_Ack>
    139a:	6f 2d       	mov	r22, r15
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	76 2f       	mov	r23, r22
    13a0:	66 27       	eor	r22, r22
    13a2:	68 2b       	or	r22, r24
    13a4:	07 2e       	mov	r0, r23
    13a6:	00 0c       	add	r0, r0
    13a8:	88 0b       	sbc	r24, r24
    13aa:	99 0b       	sbc	r25, r25
    13ac:	0e 94 01 1a 	call	0x3402	; 0x3402 <__floatsisf>
    13b0:	68 83       	st	Y, r22
    13b2:	79 83       	std	Y+1, r23	; 0x01
    13b4:	8a 83       	std	Y+2, r24	; 0x02
    13b6:	9b 83       	std	Y+3, r25	; 0x03
	Gyro[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    13b8:	0e 94 1c 18 	call	0x3038	; 0x3038 <I2C_Read_Ack>
    13bc:	f8 2e       	mov	r15, r24
    13be:	0e 94 1c 18 	call	0x3038	; 0x3038 <I2C_Read_Ack>
    13c2:	6f 2d       	mov	r22, r15
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	76 2f       	mov	r23, r22
    13c8:	66 27       	eor	r22, r22
    13ca:	68 2b       	or	r22, r24
    13cc:	07 2e       	mov	r0, r23
    13ce:	00 0c       	add	r0, r0
    13d0:	88 0b       	sbc	r24, r24
    13d2:	99 0b       	sbc	r25, r25
    13d4:	0e 94 01 1a 	call	0x3402	; 0x3402 <__floatsisf>
    13d8:	6c 83       	std	Y+4, r22	; 0x04
    13da:	7d 83       	std	Y+5, r23	; 0x05
    13dc:	8e 83       	std	Y+6, r24	; 0x06
    13de:	9f 83       	std	Y+7, r25	; 0x07
	Gyro[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
    13e0:	0e 94 1c 18 	call	0x3038	; 0x3038 <I2C_Read_Ack>
    13e4:	f8 2e       	mov	r15, r24
    13e6:	0e 94 27 18 	call	0x304e	; 0x304e <I2C_Read_Nack>
    13ea:	6f 2d       	mov	r22, r15
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	76 2f       	mov	r23, r22
    13f0:	66 27       	eor	r22, r22
    13f2:	68 2b       	or	r22, r24
    13f4:	07 2e       	mov	r0, r23
    13f6:	00 0c       	add	r0, r0
    13f8:	88 0b       	sbc	r24, r24
    13fa:	99 0b       	sbc	r25, r25
    13fc:	0e 94 01 1a 	call	0x3402	; 0x3402 <__floatsisf>
    1400:	68 87       	std	Y+8, r22	; 0x08
    1402:	79 87       	std	Y+9, r23	; 0x09
    1404:	8a 87       	std	Y+10, r24	; 0x0a
    1406:	9b 87       	std	Y+11, r25	; 0x0b
	I2C_Stop();
    1408:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <I2C_Stop>
    140c:	0f 2e       	mov	r0, r31
    140e:	f9 e3       	ldi	r31, 0x39	; 57
    1410:	ef 2e       	mov	r14, r31
    1412:	f2 e0       	ldi	r31, 0x02	; 2
    1414:	ff 2e       	mov	r15, r31
    1416:	f0 2d       	mov	r31, r0
    1418:	0f 2e       	mov	r0, r31
    141a:	f5 e4       	ldi	r31, 0x45	; 69
    141c:	cf 2e       	mov	r12, r31
    141e:	f2 e0       	ldi	r31, 0x02	; 2
    1420:	df 2e       	mov	r13, r31
    1422:	f0 2d       	mov	r31, r0
    1424:	0f 2e       	mov	r0, r31
    1426:	f5 e4       	ldi	r31, 0x45	; 69
    1428:	af 2e       	mov	r10, r31
    142a:	f2 e0       	ldi	r31, 0x02	; 2
    142c:	bf 2e       	mov	r11, r31
    142e:	f0 2d       	mov	r31, r0
	//_delay_ms(10);
	//transform the raw data to corresponding range
	for (int i=0;i<3;i++)
	{
		Acc[i] =  Acc[i]*8*9.8/32768 - acc_calib[i]; //range of +- 8g
    1430:	f7 01       	movw	r30, r14
    1432:	41 90       	ld	r4, Z+
    1434:	51 90       	ld	r5, Z+
    1436:	61 90       	ld	r6, Z+
    1438:	71 90       	ld	r7, Z+
    143a:	7f 01       	movw	r14, r30
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	51 e4       	ldi	r21, 0x41	; 65
    1444:	f8 01       	movw	r30, r16
    1446:	60 81       	ld	r22, Z
    1448:	71 81       	ldd	r23, Z+1	; 0x01
    144a:	82 81       	ldd	r24, Z+2	; 0x02
    144c:	93 81       	ldd	r25, Z+3	; 0x03
    144e:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    1452:	2d ec       	ldi	r18, 0xCD	; 205
    1454:	3c ec       	ldi	r19, 0xCC	; 204
    1456:	4c e1       	ldi	r20, 0x1C	; 28
    1458:	51 e4       	ldi	r21, 0x41	; 65
    145a:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	58 e3       	ldi	r21, 0x38	; 56
    1466:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    146a:	a3 01       	movw	r20, r6
    146c:	92 01       	movw	r18, r4
    146e:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
    1472:	f8 01       	movw	r30, r16
    1474:	61 93       	st	Z+, r22
    1476:	71 93       	st	Z+, r23
    1478:	81 93       	st	Z+, r24
    147a:	91 93       	st	Z+, r25
    147c:	8f 01       	movw	r16, r30
		Gyro[i] = Gyro[i]*1000/32768/180*3.14 - gyro_calib[i]; //range of +- 1000 degrees /180*pi 
    147e:	f6 01       	movw	r30, r12
    1480:	41 90       	ld	r4, Z+
    1482:	51 90       	ld	r5, Z+
    1484:	61 90       	ld	r6, Z+
    1486:	71 90       	ld	r7, Z+
    1488:	6f 01       	movw	r12, r30
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	4a e7       	ldi	r20, 0x7A	; 122
    1490:	54 e4       	ldi	r21, 0x44	; 68
    1492:	68 81       	ld	r22, Y
    1494:	79 81       	ldd	r23, Y+1	; 0x01
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	9b 81       	ldd	r25, Y+3	; 0x03
    149a:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	58 e3       	ldi	r21, 0x38	; 56
    14a6:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	44 e3       	ldi	r20, 0x34	; 52
    14b0:	53 e4       	ldi	r21, 0x43	; 67
    14b2:	0e 94 57 19 	call	0x32ae	; 0x32ae <__divsf3>
    14b6:	23 ec       	ldi	r18, 0xC3	; 195
    14b8:	35 ef       	ldi	r19, 0xF5	; 245
    14ba:	48 e4       	ldi	r20, 0x48	; 72
    14bc:	50 e4       	ldi	r21, 0x40	; 64
    14be:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    14c2:	a3 01       	movw	r20, r6
    14c4:	92 01       	movw	r18, r4
    14c6:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
    14ca:	69 93       	st	Y+, r22
    14cc:	79 93       	st	Y+, r23
    14ce:	89 93       	st	Y+, r24
    14d0:	99 93       	st	Y+, r25
	Gyro[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
	I2C_Stop();
	//_delay_ms(10);
	//transform the raw data to corresponding range
	for (int i=0;i<3;i++)
    14d2:	ea 14       	cp	r14, r10
    14d4:	fb 04       	cpc	r15, r11
    14d6:	09 f0       	breq	.+2      	; 0x14da <MPU_read+0x22a>
    14d8:	ab cf       	rjmp	.-170    	; 0x1430 <MPU_read+0x180>
	{
		Acc[i] =  Acc[i]*8*9.8/32768 - acc_calib[i]; //range of +- 8g
		Gyro[i] = Gyro[i]*1000/32768/180*3.14 - gyro_calib[i]; //range of +- 1000 degrees /180*pi 
	}
}
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	df 90       	pop	r13
    14e8:	cf 90       	pop	r12
    14ea:	bf 90       	pop	r11
    14ec:	af 90       	pop	r10
    14ee:	7f 90       	pop	r7
    14f0:	6f 90       	pop	r6
    14f2:	5f 90       	pop	r5
    14f4:	4f 90       	pop	r4
    14f6:	08 95       	ret

000014f8 <MPU_Calib>:

void MPU_Calib(float Acc[3], float Gyro[3])
{
    14f8:	2f 92       	push	r2
    14fa:	3f 92       	push	r3
    14fc:	4f 92       	push	r4
    14fe:	5f 92       	push	r5
    1500:	6f 92       	push	r6
    1502:	7f 92       	push	r7
    1504:	8f 92       	push	r8
    1506:	9f 92       	push	r9
    1508:	af 92       	push	r10
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	00 d0       	rcall	.+0      	; 0x151e <MPU_Calib+0x26>
    151e:	00 d0       	rcall	.+0      	; 0x1520 <MPU_Calib+0x28>
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	1c 01       	movw	r2, r24
    1526:	69 83       	std	Y+1, r22	; 0x01
    1528:	7a 83       	std	Y+2, r23	; 0x02
    152a:	81 2c       	mov	r8, r1
    152c:	91 2c       	mov	r9, r1
    152e:	5c 01       	movw	r10, r24
    1530:	8c e0       	ldi	r24, 0x0C	; 12
    1532:	a8 0e       	add	r10, r24
    1534:	b1 1c       	adc	r11, r1
	static float calib_loops = 1000;
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
	{ 
		MPU_read(Acc,Gyro);
    1536:	69 81       	ldd	r22, Y+1	; 0x01
    1538:	7a 81       	ldd	r23, Y+2	; 0x02
    153a:	c1 01       	movw	r24, r2
    153c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <MPU_read>
    1540:	71 01       	movw	r14, r2
    1542:	0f 2e       	mov	r0, r31
    1544:	fc e8       	ldi	r31, 0x8C	; 140
    1546:	6f 2e       	mov	r6, r31
    1548:	f1 e0       	ldi	r31, 0x01	; 1
    154a:	7f 2e       	mov	r7, r31
    154c:	f0 2d       	mov	r31, r0
    154e:	c9 80       	ldd	r12, Y+1	; 0x01
    1550:	da 80       	ldd	r13, Y+2	; 0x02
    1552:	0f 2e       	mov	r0, r31
    1554:	f0 e8       	ldi	r31, 0x80	; 128
    1556:	4f 2e       	mov	r4, r31
    1558:	f1 e0       	ldi	r31, 0x01	; 1
    155a:	5f 2e       	mov	r5, r31
    155c:	f0 2d       	mov	r31, r0
    155e:	82 01       	movw	r16, r4
    1560:	7c 82       	std	Y+4, r7	; 0x04
    1562:	6b 82       	std	Y+3, r6	; 0x03
		for (int j=0;j<3;j++)
		{
			sum_acc_cal_sum[j] += Acc[j];
    1564:	f7 01       	movw	r30, r14
    1566:	21 91       	ld	r18, Z+
    1568:	31 91       	ld	r19, Z+
    156a:	41 91       	ld	r20, Z+
    156c:	51 91       	ld	r21, Z+
    156e:	7f 01       	movw	r14, r30
    1570:	eb 81       	ldd	r30, Y+3	; 0x03
    1572:	fc 81       	ldd	r31, Y+4	; 0x04
    1574:	60 81       	ld	r22, Z
    1576:	71 81       	ldd	r23, Z+1	; 0x01
    1578:	82 81       	ldd	r24, Z+2	; 0x02
    157a:	93 81       	ldd	r25, Z+3	; 0x03
    157c:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
    1580:	eb 81       	ldd	r30, Y+3	; 0x03
    1582:	fc 81       	ldd	r31, Y+4	; 0x04
    1584:	61 93       	st	Z+, r22
    1586:	71 93       	st	Z+, r23
    1588:	81 93       	st	Z+, r24
    158a:	91 93       	st	Z+, r25
    158c:	fc 83       	std	Y+4, r31	; 0x04
    158e:	eb 83       	std	Y+3, r30	; 0x03
			sum_gyro_cal_sum[j] += Gyro[j];
    1590:	f6 01       	movw	r30, r12
    1592:	21 91       	ld	r18, Z+
    1594:	31 91       	ld	r19, Z+
    1596:	41 91       	ld	r20, Z+
    1598:	51 91       	ld	r21, Z+
    159a:	6f 01       	movw	r12, r30
    159c:	f8 01       	movw	r30, r16
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__addsf3>
    15aa:	f8 01       	movw	r30, r16
    15ac:	61 93       	st	Z+, r22
    15ae:	71 93       	st	Z+, r23
    15b0:	81 93       	st	Z+, r24
    15b2:	91 93       	st	Z+, r25
    15b4:	8f 01       	movw	r16, r30
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
	{ 
		MPU_read(Acc,Gyro);
		for (int j=0;j<3;j++)
    15b6:	ea 14       	cp	r14, r10
    15b8:	fb 04       	cpc	r15, r11
    15ba:	a1 f6       	brne	.-88     	; 0x1564 <MPU_Calib+0x6c>
void MPU_Calib(float Acc[3], float Gyro[3])
{
	static float calib_loops = 1000;
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
    15bc:	ff ef       	ldi	r31, 0xFF	; 255
    15be:	8f 1a       	sub	r8, r31
    15c0:	9f 0a       	sbc	r9, r31
    15c2:	88 ee       	ldi	r24, 0xE8	; 232
    15c4:	88 16       	cp	r8, r24
    15c6:	83 e0       	ldi	r24, 0x03	; 3
    15c8:	98 06       	cpc	r9, r24
    15ca:	09 f0       	breq	.+2      	; 0x15ce <MPU_Calib+0xd6>
    15cc:	b4 cf       	rjmp	.-152    	; 0x1536 <MPU_Calib+0x3e>
    15ce:	09 e3       	ldi	r16, 0x39	; 57
    15d0:	12 e0       	ldi	r17, 0x02	; 2
    15d2:	e5 e4       	ldi	r30, 0x45	; 69
    15d4:	f2 e0       	ldi	r31, 0x02	; 2
    15d6:	fc 83       	std	Y+4, r31	; 0x04
    15d8:	eb 83       	std	Y+3, r30	; 0x03
    15da:	0f 2e       	mov	r0, r31
    15dc:	f8 e9       	ldi	r31, 0x98	; 152
    15de:	ef 2e       	mov	r14, r31
    15e0:	f1 e0       	ldi	r31, 0x01	; 1
    15e2:	ff 2e       	mov	r15, r31
    15e4:	f0 2d       	mov	r31, r0
			sum_gyro_cal_sum[j] += Gyro[j];
		}
	}
	for (int j=0;j<3;j++)
	{
		acc_calib[j] =  sum_acc_cal_sum[j]/(float)calib_loops;
    15e6:	f3 01       	movw	r30, r6
    15e8:	61 91       	ld	r22, Z+
    15ea:	71 91       	ld	r23, Z+
    15ec:	81 91       	ld	r24, Z+
    15ee:	91 91       	ld	r25, Z+
    15f0:	3f 01       	movw	r6, r30
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	4a e7       	ldi	r20, 0x7A	; 122
    15f8:	54 e4       	ldi	r21, 0x44	; 68
    15fa:	0e 94 57 19 	call	0x32ae	; 0x32ae <__divsf3>
    15fe:	f8 01       	movw	r30, r16
    1600:	61 93       	st	Z+, r22
    1602:	71 93       	st	Z+, r23
    1604:	81 93       	st	Z+, r24
    1606:	91 93       	st	Z+, r25
    1608:	8f 01       	movw	r16, r30
		gyro_calib[j] = sum_gyro_cal_sum[j]/(float)calib_loops;
    160a:	f2 01       	movw	r30, r4
    160c:	61 91       	ld	r22, Z+
    160e:	71 91       	ld	r23, Z+
    1610:	81 91       	ld	r24, Z+
    1612:	91 91       	ld	r25, Z+
    1614:	2f 01       	movw	r4, r30
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	4a e7       	ldi	r20, 0x7A	; 122
    161c:	54 e4       	ldi	r21, 0x44	; 68
    161e:	0e 94 57 19 	call	0x32ae	; 0x32ae <__divsf3>
    1622:	eb 81       	ldd	r30, Y+3	; 0x03
    1624:	fc 81       	ldd	r31, Y+4	; 0x04
    1626:	61 93       	st	Z+, r22
    1628:	71 93       	st	Z+, r23
    162a:	81 93       	st	Z+, r24
    162c:	91 93       	st	Z+, r25
    162e:	fc 83       	std	Y+4, r31	; 0x04
    1630:	eb 83       	std	Y+3, r30	; 0x03
		{
			sum_acc_cal_sum[j] += Acc[j];
			sum_gyro_cal_sum[j] += Gyro[j];
		}
	}
	for (int j=0;j<3;j++)
    1632:	6e 14       	cp	r6, r14
    1634:	7f 04       	cpc	r7, r15
    1636:	b9 f6       	brne	.-82     	; 0x15e6 <MPU_Calib+0xee>
	{
		acc_calib[j] =  sum_acc_cal_sum[j]/(float)calib_loops;
		gyro_calib[j] = sum_gyro_cal_sum[j]/(float)calib_loops;
	}
	acc_calib[2] -= 10;
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e2       	ldi	r20, 0x20	; 32
    163e:	51 e4       	ldi	r21, 0x41	; 65
    1640:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <acc_calib+0x8>
    1644:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <acc_calib+0x9>
    1648:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <acc_calib+0xa>
    164c:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <acc_calib+0xb>
    1650:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
    1654:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <acc_calib+0x8>
    1658:	70 93 42 02 	sts	0x0242, r23	; 0x800242 <acc_calib+0x9>
    165c:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <acc_calib+0xa>
    1660:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <acc_calib+0xb>
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	1f 91       	pop	r17
    1672:	0f 91       	pop	r16
    1674:	ff 90       	pop	r15
    1676:	ef 90       	pop	r14
    1678:	df 90       	pop	r13
    167a:	cf 90       	pop	r12
    167c:	bf 90       	pop	r11
    167e:	af 90       	pop	r10
    1680:	9f 90       	pop	r9
    1682:	8f 90       	pop	r8
    1684:	7f 90       	pop	r7
    1686:	6f 90       	pop	r6
    1688:	5f 90       	pop	r5
    168a:	4f 90       	pop	r4
    168c:	3f 90       	pop	r3
    168e:	2f 90       	pop	r2
    1690:	08 95       	ret

00001692 <MPU_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1692:	8b e7       	ldi	r24, 0x7B	; 123
    1694:	92 e9       	ldi	r25, 0x92	; 146
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <MPU_Init+0x4>
    169a:	00 c0       	rjmp	.+0      	; 0x169c <MPU_Init+0xa>
    169c:	00 00       	nop
void MPU_Init(void)
{
	//
	_delay_ms(150);										/* Power up time >100ms */
	//0x68
	I2C_Start_Wait(MPU6050_addr);
    169e:	80 ed       	ldi	r24, 0xD0	; 208
    16a0:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <I2C_Start_Wait>
	I2C_Write(0x6B);								/* Write to power management register */
    16a4:	8b e6       	ldi	r24, 0x6B	; 107
    16a6:	0e 94 05 18 	call	0x300a	; 0x300a <I2C_Write>
	I2C_Write(0x01);									//select the clock X-axis 
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	0e 94 05 18 	call	0x300a	; 0x300a <I2C_Write>
	I2C_Stop();
    16b0:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <I2C_Stop>

	I2C_Start_Wait(MPU6050_addr);
    16b4:	80 ed       	ldi	r24, 0xD0	; 208
    16b6:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <I2C_Start_Wait>
	I2C_Write(0x1A);								//Low pass digital filter
    16ba:	8a e1       	ldi	r24, 0x1A	; 26
    16bc:	0e 94 05 18 	call	0x300a	; 0x300a <I2C_Write>
	I2C_Write(0x05);									
    16c0:	85 e0       	ldi	r24, 0x05	; 5
    16c2:	0e 94 05 18 	call	0x300a	; 0x300a <I2C_Write>
	I2C_Stop();
    16c6:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <I2C_Stop>
	00	+- 250 degrees/s
	01	+- 500 degrees/s
	10	+- 1000 degrees/s
	11	+- 2000 degrees/s
	*/
	I2C_Start_Wait(MPU6050_addr);
    16ca:	80 ed       	ldi	r24, 0xD0	; 208
    16cc:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <I2C_Start_Wait>
	I2C_Write(0x1B);			
    16d0:	8b e1       	ldi	r24, 0x1B	; 27
    16d2:	0e 94 05 18 	call	0x300a	; 0x300a <I2C_Write>
	I2C_Write(0x10);
    16d6:	80 e1       	ldi	r24, 0x10	; 16
    16d8:	0e 94 05 18 	call	0x300a	; 0x300a <I2C_Write>
	I2C_Stop();
    16dc:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <I2C_Stop>
	00	+- 2 g
	01	+- 4 g
	10	+- 8 g
	11	+- 16 g
	*/
	I2C_Start_Wait(MPU6050_addr);
    16e0:	80 ed       	ldi	r24, 0xD0	; 208
    16e2:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <I2C_Start_Wait>
	I2C_Write(0x1C);
    16e6:	8c e1       	ldi	r24, 0x1C	; 28
    16e8:	0e 94 05 18 	call	0x300a	; 0x300a <I2C_Write>
	I2C_Write(0x10);
    16ec:	80 e1       	ldi	r24, 0x10	; 16
    16ee:	0e 94 05 18 	call	0x300a	; 0x300a <I2C_Write>
	I2C_Stop();
    16f2:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <I2C_Stop>
	//disable INT 
	I2C_Start_Wait(MPU6050_addr);
    16f6:	80 ed       	ldi	r24, 0xD0	; 208
    16f8:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <I2C_Start_Wait>
	I2C_Write(0x38);								/* Write to interrupt enable register */
    16fc:	88 e3       	ldi	r24, 0x38	; 56
    16fe:	0e 94 05 18 	call	0x300a	; 0x300a <I2C_Write>
	I2C_Write(0x01);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	0e 94 05 18 	call	0x300a	; 0x300a <I2C_Write>
	I2C_Stop();
    1708:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <I2C_Stop>
	//
	I2C_Start_Wait(0xD0);								/* Start with device write address */
    170c:	80 ed       	ldi	r24, 0xD0	; 208
    170e:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <I2C_Start_Wait>
	I2C_Write(0x19);								/* Write to sample rate register */
    1712:	89 e1       	ldi	r24, 0x19	; 25
    1714:	0e 94 05 18 	call	0x300a	; 0x300a <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
    1718:	87 e0       	ldi	r24, 0x07	; 7
    171a:	0e 94 05 18 	call	0x300a	; 0x300a <I2C_Write>
	I2C_Stop();
    171e:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <I2C_Stop>
	
	MPU_Calib(AccData,GyroData);
    1722:	6a e0       	ldi	r22, 0x0A	; 10
    1724:	71 e0       	ldi	r23, 0x01	; 1
    1726:	86 e1       	ldi	r24, 0x16	; 22
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <MPU_Calib>
    172e:	08 95       	ret

00001730 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
    1736:	0e 94 42 12 	call	0x2484	; 0x2484 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    173a:	ce 01       	movw	r24, r28
    173c:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <malloc>
    1740:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1742:	0e 94 11 13 	call	0x2622	; 0x2622 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
    1746:	20 97       	sbiw	r28, 0x00	; 0
    1748:	11 f4       	brne	.+4      	; 0x174e <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
    174a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
    174e:	ce 01       	movw	r24, r28
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    if( pv )
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	41 f0       	breq	.+16     	; 0x176e <vPortFree+0x18>
    175e:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    1760:	0e 94 42 12 	call	0x2484	; 0x2484 <vTaskSuspendAll>
        {
            free( pv );
    1764:	ce 01       	movw	r24, r28
    1766:	0e 94 37 20 	call	0x406e	; 0x406e <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    176a:	0e 94 11 13 	call	0x2622	; 0x2622 <xTaskResumeAll>
    }
}
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <vApplicationIdleHook>:

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // with 1284p
    DIDR0 = 0xFF;

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino with 328p
    DIDR0 = 0x3F;
    1774:	8f e3       	ldi	r24, 0x3F	; 63
    1776:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
    // When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
    // This bit can be set at any time to turn off the Analogue Comparator.
    // This will Yellowuce power consumption in Active and Idle mode.
    // When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
    // Otherwise an interrupt can occur when the ACD bit is changed.
    ACSR &= ~_BV(ACIE);
    177a:	80 b7       	in	r24, 0x30	; 48
    177c:	87 7f       	andi	r24, 0xF7	; 247
    177e:	80 bf       	out	0x30, r24	; 48
    ACSR |=  _BV(ACD);
    1780:	80 b7       	in	r24, 0x30	; 48
    1782:	80 68       	ori	r24, 0x80	; 128
    1784:	80 bf       	out	0x30, r24	; 48
    // SLEEP_MODE_PWR_DOWN     _BV(SM1)
    // SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
    // SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
    // SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

    set_sleep_mode( SLEEP_MODE_IDLE );
    1786:	83 b7       	in	r24, 0x33	; 51
    1788:	81 7f       	andi	r24, 0xF1	; 241
    178a:	83 bf       	out	0x33, r24	; 51

    portENTER_CRITICAL();
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	0f 92       	push	r0
    sleep_enable();
    1792:	83 b7       	in	r24, 0x33	; 51
    1794:	81 60       	ori	r24, 0x01	; 1
    1796:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
    sleep_bod_disable();
    1798:	85 b7       	in	r24, 0x35	; 53
    179a:	80 66       	ori	r24, 0x60	; 96
    179c:	85 bf       	out	0x35, r24	; 53
    179e:	8f 7d       	andi	r24, 0xDF	; 223
    17a0:	85 bf       	out	0x35, r24	; 53
#endif

    portEXIT_CRITICAL();
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    sleep_cpu();            // good night.
    17a6:	88 95       	sleep

    sleep_reset();          // reset the sleep_mode() faster than sleep_disable();
    17a8:	13 be       	out	0x33, r1	; 51
    17aa:	08 95       	ret

000017ac <vApplicationMallocFailedHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (Yellow PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    17ac:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (Yellow PB5) LED on. Main LED on.
    17ae:	2d 9a       	sbi	0x05, 5	; 5
    17b0:	83 ed       	ldi	r24, 0xD3	; 211
    17b2:	90 e3       	ldi	r25, 0x30	; 48
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <vApplicationMallocFailedHook+0x8>
    17b8:	00 c0       	rjmp	.+0      	; 0x17ba <vApplicationMallocFailedHook+0xe>
    17ba:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (Yellow PB7) LED toggle. Main LED fast blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (Yellow PB5) LED toggle. Main LED fast blink.
    17bc:	1d 9a       	sbi	0x03, 5	; 3
    17be:	f8 cf       	rjmp	.-16     	; 0x17b0 <vApplicationMallocFailedHook+0x4>

000017c0 <vApplicationStackOverflowHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (Yellow PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    17c0:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (Yellow PB5) LED on. Main LED on.
    17c2:	2d 9a       	sbi	0x05, 5	; 5
    17c4:	2f e7       	ldi	r18, 0x7F	; 127
    17c6:	8a e1       	ldi	r24, 0x1A	; 26
    17c8:	96 e0       	ldi	r25, 0x06	; 6
    17ca:	21 50       	subi	r18, 0x01	; 1
    17cc:	80 40       	sbci	r24, 0x00	; 0
    17ce:	90 40       	sbci	r25, 0x00	; 0
    17d0:	e1 f7       	brne	.-8      	; 0x17ca <vApplicationStackOverflowHook+0xa>
    17d2:	00 c0       	rjmp	.+0      	; 0x17d4 <vApplicationStackOverflowHook+0x14>
    17d4:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (Yellow PB7) LED toggle. Main LED slow blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (Yellow PB5) LED toggle. Main LED slow blink.
    17d6:	1d 9a       	sbi	0x03, 5	; 3
    17d8:	f5 cf       	rjmp	.-22     	; 0x17c4 <vApplicationStackOverflowHook+0x4>

000017da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    17da:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    17dc:	03 96       	adiw	r24, 0x03	; 3
    17de:	92 83       	std	Z+2, r25	; 0x02
    17e0:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    17e2:	2f ef       	ldi	r18, 0xFF	; 255
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	34 83       	std	Z+4, r19	; 0x04
    17e8:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    17ea:	96 83       	std	Z+6, r25	; 0x06
    17ec:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    17ee:	90 87       	std	Z+8, r25	; 0x08
    17f0:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    17f2:	10 82       	st	Z, r1
    17f4:	08 95       	ret

000017f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    17f6:	fc 01       	movw	r30, r24
    17f8:	11 86       	std	Z+9, r1	; 0x09
    17fa:	10 86       	std	Z+8, r1	; 0x08
    17fc:	08 95       	ret

000017fe <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	9c 01       	movw	r18, r24
    1804:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1806:	dc 01       	movw	r26, r24
    1808:	11 96       	adiw	r26, 0x01	; 1
    180a:	cd 91       	ld	r28, X+
    180c:	dc 91       	ld	r29, X
    180e:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1810:	d3 83       	std	Z+3, r29	; 0x03
    1812:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	95 83       	std	Z+5, r25	; 0x05
    181a:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	9d 81       	ldd	r25, Y+5	; 0x05
    1820:	dc 01       	movw	r26, r24
    1822:	13 96       	adiw	r26, 0x03	; 3
    1824:	7c 93       	st	X, r23
    1826:	6e 93       	st	-X, r22
    1828:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    182a:	7d 83       	std	Y+5, r23	; 0x05
    182c:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    182e:	31 87       	std	Z+9, r19	; 0x09
    1830:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    1832:	f9 01       	movw	r30, r18
    1834:	80 81       	ld	r24, Z
    1836:	8f 5f       	subi	r24, 0xFF	; 255
    1838:	80 83       	st	Z, r24
}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	08 95       	ret

00001840 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1846:	48 81       	ld	r20, Y
    1848:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stoYellow in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    184a:	4f 3f       	cpi	r20, 0xFF	; 255
    184c:	2f ef       	ldi	r18, 0xFF	; 255
    184e:	52 07       	cpc	r21, r18
    1850:	21 f4       	brne	.+8      	; 0x185a <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1852:	fc 01       	movw	r30, r24
    1854:	a7 81       	ldd	r26, Z+7	; 0x07
    1856:	b0 85       	ldd	r27, Z+8	; 0x08
    1858:	0d c0       	rjmp	.+26     	; 0x1874 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    185a:	dc 01       	movw	r26, r24
    185c:	13 96       	adiw	r26, 0x03	; 3
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <vListInsert+0x22>
    1860:	df 01       	movw	r26, r30
    1862:	12 96       	adiw	r26, 0x02	; 2
    1864:	ed 91       	ld	r30, X+
    1866:	fc 91       	ld	r31, X
    1868:	13 97       	sbiw	r26, 0x03	; 3
    186a:	20 81       	ld	r18, Z
    186c:	31 81       	ldd	r19, Z+1	; 0x01
    186e:	42 17       	cp	r20, r18
    1870:	53 07       	cpc	r21, r19
    1872:	b0 f7       	brcc	.-20     	; 0x1860 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1874:	12 96       	adiw	r26, 0x02	; 2
    1876:	ed 91       	ld	r30, X+
    1878:	fc 91       	ld	r31, X
    187a:	13 97       	sbiw	r26, 0x03	; 3
    187c:	fb 83       	std	Y+3, r31	; 0x03
    187e:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1880:	d5 83       	std	Z+5, r29	; 0x05
    1882:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    1884:	bd 83       	std	Y+5, r27	; 0x05
    1886:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    1888:	13 96       	adiw	r26, 0x03	; 3
    188a:	dc 93       	st	X, r29
    188c:	ce 93       	st	-X, r28
    188e:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    1890:	99 87       	std	Y+9, r25	; 0x09
    1892:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    1894:	fc 01       	movw	r30, r24
    1896:	20 81       	ld	r18, Z
    1898:	2f 5f       	subi	r18, 0xFF	; 255
    189a:	20 83       	st	Z, r18
}
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	08 95       	ret

000018a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    18a8:	a0 85       	ldd	r26, Z+8	; 0x08
    18aa:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    18ac:	c2 81       	ldd	r28, Z+2	; 0x02
    18ae:	d3 81       	ldd	r29, Z+3	; 0x03
    18b0:	84 81       	ldd	r24, Z+4	; 0x04
    18b2:	95 81       	ldd	r25, Z+5	; 0x05
    18b4:	9d 83       	std	Y+5, r25	; 0x05
    18b6:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    18b8:	c4 81       	ldd	r28, Z+4	; 0x04
    18ba:	d5 81       	ldd	r29, Z+5	; 0x05
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	9b 83       	std	Y+3, r25	; 0x03
    18c2:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    18c4:	11 96       	adiw	r26, 0x01	; 1
    18c6:	8d 91       	ld	r24, X+
    18c8:	9c 91       	ld	r25, X
    18ca:	12 97       	sbiw	r26, 0x02	; 2
    18cc:	e8 17       	cp	r30, r24
    18ce:	f9 07       	cpc	r31, r25
    18d0:	31 f4       	brne	.+12     	; 0x18de <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    18d2:	84 81       	ldd	r24, Z+4	; 0x04
    18d4:	95 81       	ldd	r25, Z+5	; 0x05
    18d6:	12 96       	adiw	r26, 0x02	; 2
    18d8:	9c 93       	st	X, r25
    18da:	8e 93       	st	-X, r24
    18dc:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    18de:	11 86       	std	Z+9, r1	; 0x09
    18e0:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    18e2:	8c 91       	ld	r24, X
    18e4:	81 50       	subi	r24, 0x01	; 1
    18e6:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    18e8:	8c 91       	ld	r24, X
}
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    18f0:	fc 01       	movw	r30, r24
    18f2:	60 83       	st	Z, r22
    18f4:	31 97       	sbiw	r30, 0x01	; 1
    18f6:	70 83       	st	Z, r23
    18f8:	31 97       	sbiw	r30, 0x01	; 1
    18fa:	10 82       	st	Z, r1
    18fc:	31 97       	sbiw	r30, 0x01	; 1
    18fe:	20 e8       	ldi	r18, 0x80	; 128
    1900:	20 83       	st	Z, r18
    1902:	31 97       	sbiw	r30, 0x01	; 1
    1904:	10 82       	st	Z, r1
    1906:	77 97       	sbiw	r30, 0x17	; 23
    1908:	40 83       	st	Z, r20
    190a:	31 97       	sbiw	r30, 0x01	; 1
    190c:	50 83       	st	Z, r21
    190e:	83 97       	sbiw	r24, 0x23	; 35
    1910:	08 95       	ret

00001912 <xPortStartScheduler>:
    1912:	a8 95       	wdr
    1914:	90 ec       	ldi	r25, 0xC0	; 192
    1916:	88 e1       	ldi	r24, 0x18	; 24
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	a8 95       	wdr
    191e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    1928:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <pxCurrentTCB>
    192c:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    1930:	cd 91       	ld	r28, X+
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	dd 91       	ld	r29, X+
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	ff 91       	pop	r31
    193a:	ef 91       	pop	r30
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	bf 91       	pop	r27
    1942:	af 91       	pop	r26
    1944:	9f 91       	pop	r25
    1946:	8f 91       	pop	r24
    1948:	7f 91       	pop	r23
    194a:	6f 91       	pop	r22
    194c:	5f 91       	pop	r21
    194e:	4f 91       	pop	r20
    1950:	3f 91       	pop	r19
    1952:	2f 91       	pop	r18
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	df 90       	pop	r13
    195e:	cf 90       	pop	r12
    1960:	bf 90       	pop	r11
    1962:	af 90       	pop	r10
    1964:	9f 90       	pop	r9
    1966:	8f 90       	pop	r8
    1968:	7f 90       	pop	r7
    196a:	6f 90       	pop	r6
    196c:	5f 90       	pop	r5
    196e:	4f 90       	pop	r4
    1970:	3f 90       	pop	r3
    1972:	2f 90       	pop	r2
    1974:	1f 90       	pop	r1
    1976:	0f 90       	pop	r0
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	0f 90       	pop	r0
    197c:	08 95       	ret
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	08 95       	ret

00001982 <vPortYield>:
    1982:	0f 92       	push	r0
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	0f 92       	push	r0
    198a:	1f 92       	push	r1
    198c:	11 24       	eor	r1, r1
    198e:	2f 92       	push	r2
    1990:	3f 92       	push	r3
    1992:	4f 92       	push	r4
    1994:	5f 92       	push	r5
    1996:	6f 92       	push	r6
    1998:	7f 92       	push	r7
    199a:	8f 92       	push	r8
    199c:	9f 92       	push	r9
    199e:	af 92       	push	r10
    19a0:	bf 92       	push	r11
    19a2:	cf 92       	push	r12
    19a4:	df 92       	push	r13
    19a6:	ef 92       	push	r14
    19a8:	ff 92       	push	r15
    19aa:	0f 93       	push	r16
    19ac:	1f 93       	push	r17
    19ae:	2f 93       	push	r18
    19b0:	3f 93       	push	r19
    19b2:	4f 93       	push	r20
    19b4:	5f 93       	push	r21
    19b6:	6f 93       	push	r22
    19b8:	7f 93       	push	r23
    19ba:	8f 93       	push	r24
    19bc:	9f 93       	push	r25
    19be:	af 93       	push	r26
    19c0:	bf 93       	push	r27
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ef 93       	push	r30
    19c8:	ff 93       	push	r31
    19ca:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <pxCurrentTCB>
    19ce:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    19d2:	0d b6       	in	r0, 0x3d	; 61
    19d4:	0d 92       	st	X+, r0
    19d6:	0e b6       	in	r0, 0x3e	; 62
    19d8:	0d 92       	st	X+, r0
    19da:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vTaskSwitchContext>
    19de:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <pxCurrentTCB>
    19e2:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    19e6:	cd 91       	ld	r28, X+
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	dd 91       	ld	r29, X+
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	ff 91       	pop	r31
    19f0:	ef 91       	pop	r30
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	bf 91       	pop	r27
    19f8:	af 91       	pop	r26
    19fa:	9f 91       	pop	r25
    19fc:	8f 91       	pop	r24
    19fe:	7f 91       	pop	r23
    1a00:	6f 91       	pop	r22
    1a02:	5f 91       	pop	r21
    1a04:	4f 91       	pop	r20
    1a06:	3f 91       	pop	r19
    1a08:	2f 91       	pop	r18
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	ff 90       	pop	r15
    1a10:	ef 90       	pop	r14
    1a12:	df 90       	pop	r13
    1a14:	cf 90       	pop	r12
    1a16:	bf 90       	pop	r11
    1a18:	af 90       	pop	r10
    1a1a:	9f 90       	pop	r9
    1a1c:	8f 90       	pop	r8
    1a1e:	7f 90       	pop	r7
    1a20:	6f 90       	pop	r6
    1a22:	5f 90       	pop	r5
    1a24:	4f 90       	pop	r4
    1a26:	3f 90       	pop	r3
    1a28:	2f 90       	pop	r2
    1a2a:	1f 90       	pop	r1
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	0f 90       	pop	r0
    1a32:	08 95       	ret

00001a34 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1a34:	0f 92       	push	r0
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	0f 92       	push	r0
    1a3c:	1f 92       	push	r1
    1a3e:	11 24       	eor	r1, r1
    1a40:	2f 92       	push	r2
    1a42:	3f 92       	push	r3
    1a44:	4f 92       	push	r4
    1a46:	5f 92       	push	r5
    1a48:	6f 92       	push	r6
    1a4a:	7f 92       	push	r7
    1a4c:	8f 92       	push	r8
    1a4e:	9f 92       	push	r9
    1a50:	af 92       	push	r10
    1a52:	bf 92       	push	r11
    1a54:	cf 92       	push	r12
    1a56:	df 92       	push	r13
    1a58:	ef 92       	push	r14
    1a5a:	ff 92       	push	r15
    1a5c:	0f 93       	push	r16
    1a5e:	1f 93       	push	r17
    1a60:	2f 93       	push	r18
    1a62:	3f 93       	push	r19
    1a64:	4f 93       	push	r20
    1a66:	5f 93       	push	r21
    1a68:	6f 93       	push	r22
    1a6a:	7f 93       	push	r23
    1a6c:	8f 93       	push	r24
    1a6e:	9f 93       	push	r25
    1a70:	af 93       	push	r26
    1a72:	bf 93       	push	r27
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	ef 93       	push	r30
    1a7a:	ff 93       	push	r31
    1a7c:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <pxCurrentTCB>
    1a80:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    1a84:	0d b6       	in	r0, 0x3d	; 61
    1a86:	0d 92       	st	X+, r0
    1a88:	0e b6       	in	r0, 0x3e	; 62
    1a8a:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1a8c:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    1a8e:	0e 94 52 12 	call	0x24a4	; 0x24a4 <xTaskIncrementTick>
    1a92:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1a94:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1a98:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <pxCurrentTCB>
    1a9c:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    1aa0:	cd 91       	ld	r28, X+
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	dd 91       	ld	r29, X+
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	ff 91       	pop	r31
    1aaa:	ef 91       	pop	r30
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	bf 91       	pop	r27
    1ab2:	af 91       	pop	r26
    1ab4:	9f 91       	pop	r25
    1ab6:	8f 91       	pop	r24
    1ab8:	7f 91       	pop	r23
    1aba:	6f 91       	pop	r22
    1abc:	5f 91       	pop	r21
    1abe:	4f 91       	pop	r20
    1ac0:	3f 91       	pop	r19
    1ac2:	2f 91       	pop	r18
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	ff 90       	pop	r15
    1aca:	ef 90       	pop	r14
    1acc:	df 90       	pop	r13
    1ace:	cf 90       	pop	r12
    1ad0:	bf 90       	pop	r11
    1ad2:	af 90       	pop	r10
    1ad4:	9f 90       	pop	r9
    1ad6:	8f 90       	pop	r8
    1ad8:	7f 90       	pop	r7
    1ada:	6f 90       	pop	r6
    1adc:	5f 90       	pop	r5
    1ade:	4f 90       	pop	r4
    1ae0:	3f 90       	pop	r3
    1ae2:	2f 90       	pop	r2
    1ae4:	1f 90       	pop	r1
    1ae6:	0f 90       	pop	r0
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1aec:	08 95       	ret

00001aee <__vector_6>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1aee:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1af2:	18 95       	reti

00001af4 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	0f 92       	push	r0
    1afa:	fc 01       	movw	r30, r24
    1afc:	92 8d       	ldd	r25, Z+26	; 0x1a
    1afe:	0f 90       	pop	r0
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	91 11       	cpse	r25, r1
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	08 95       	ret

00001b0a <prvCopyDataToQueue>:
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	ec 01       	movw	r28, r24
    1b14:	04 2f       	mov	r16, r20
    1b16:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1b18:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1b1a:	41 11       	cpse	r20, r1
    1b1c:	0c c0       	rjmp	.+24     	; 0x1b36 <prvCopyDataToQueue+0x2c>
    1b1e:	88 81       	ld	r24, Y
    1b20:	99 81       	ldd	r25, Y+1	; 0x01
    1b22:	89 2b       	or	r24, r25
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <prvCopyDataToQueue+0x1e>
    1b26:	42 c0       	rjmp	.+132    	; 0x1bac <prvCopyDataToQueue+0xa2>
    1b28:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2c:	0e 94 19 15 	call	0x2a32	; 0x2a32 <xTaskPriorityDisinherit>
    1b30:	1d 82       	std	Y+5, r1	; 0x05
    1b32:	1c 82       	std	Y+4, r1	; 0x04
    1b34:	42 c0       	rjmp	.+132    	; 0x1bba <prvCopyDataToQueue+0xb0>
    1b36:	01 11       	cpse	r16, r1
    1b38:	17 c0       	rjmp	.+46     	; 0x1b68 <prvCopyDataToQueue+0x5e>
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b40:	0e 94 a3 21 	call	0x4346	; 0x4346 <memcpy>
    1b44:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4a:	82 0f       	add	r24, r18
    1b4c:	91 1d       	adc	r25, r1
    1b4e:	9b 83       	std	Y+3, r25	; 0x03
    1b50:	8a 83       	std	Y+2, r24	; 0x02
    1b52:	2c 81       	ldd	r18, Y+4	; 0x04
    1b54:	3d 81       	ldd	r19, Y+5	; 0x05
    1b56:	82 17       	cp	r24, r18
    1b58:	93 07       	cpc	r25, r19
    1b5a:	50 f1       	brcs	.+84     	; 0x1bb0 <prvCopyDataToQueue+0xa6>
    1b5c:	88 81       	ld	r24, Y
    1b5e:	99 81       	ldd	r25, Y+1	; 0x01
    1b60:	9b 83       	std	Y+3, r25	; 0x03
    1b62:	8a 83       	std	Y+2, r24	; 0x02
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	29 c0       	rjmp	.+82     	; 0x1bba <prvCopyDataToQueue+0xb0>
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b6e:	0e 94 a3 21 	call	0x4346	; 0x4346 <memcpy>
    1b72:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	91 95       	neg	r25
    1b78:	81 95       	neg	r24
    1b7a:	91 09       	sbc	r25, r1
    1b7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b80:	28 0f       	add	r18, r24
    1b82:	39 1f       	adc	r19, r25
    1b84:	3f 83       	std	Y+7, r19	; 0x07
    1b86:	2e 83       	std	Y+6, r18	; 0x06
    1b88:	48 81       	ld	r20, Y
    1b8a:	59 81       	ldd	r21, Y+1	; 0x01
    1b8c:	24 17       	cp	r18, r20
    1b8e:	35 07       	cpc	r19, r21
    1b90:	30 f4       	brcc	.+12     	; 0x1b9e <prvCopyDataToQueue+0x94>
    1b92:	2c 81       	ldd	r18, Y+4	; 0x04
    1b94:	3d 81       	ldd	r19, Y+5	; 0x05
    1b96:	82 0f       	add	r24, r18
    1b98:	93 1f       	adc	r25, r19
    1b9a:	9f 83       	std	Y+7, r25	; 0x07
    1b9c:	8e 83       	std	Y+6, r24	; 0x06
    1b9e:	02 30       	cpi	r16, 0x02	; 2
    1ba0:	49 f4       	brne	.+18     	; 0x1bb4 <prvCopyDataToQueue+0xaa>
    1ba2:	11 23       	and	r17, r17
    1ba4:	49 f0       	breq	.+18     	; 0x1bb8 <prvCopyDataToQueue+0xae>
    1ba6:	11 50       	subi	r17, 0x01	; 1
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	07 c0       	rjmp	.+14     	; 0x1bba <prvCopyDataToQueue+0xb0>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	05 c0       	rjmp	.+10     	; 0x1bba <prvCopyDataToQueue+0xb0>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	03 c0       	rjmp	.+6      	; 0x1bba <prvCopyDataToQueue+0xb0>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	01 c0       	rjmp	.+2      	; 0x1bba <prvCopyDataToQueue+0xb0>
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	1f 5f       	subi	r17, 0xFF	; 255
    1bbc:	1a 8f       	std	Y+26, r17	; 0x1a
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	08 95       	ret

00001bc8 <prvCopyDataFromQueue>:
    1bc8:	fc 01       	movw	r30, r24
    1bca:	44 8d       	ldd	r20, Z+28	; 0x1c
    1bcc:	44 23       	and	r20, r20
    1bce:	a9 f0       	breq	.+42     	; 0x1bfa <prvCopyDataFromQueue+0x32>
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	26 81       	ldd	r18, Z+6	; 0x06
    1bd4:	37 81       	ldd	r19, Z+7	; 0x07
    1bd6:	24 0f       	add	r18, r20
    1bd8:	35 1f       	adc	r19, r21
    1bda:	37 83       	std	Z+7, r19	; 0x07
    1bdc:	26 83       	std	Z+6, r18	; 0x06
    1bde:	84 81       	ldd	r24, Z+4	; 0x04
    1be0:	95 81       	ldd	r25, Z+5	; 0x05
    1be2:	28 17       	cp	r18, r24
    1be4:	39 07       	cpc	r19, r25
    1be6:	20 f0       	brcs	.+8      	; 0x1bf0 <prvCopyDataFromQueue+0x28>
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	97 83       	std	Z+7, r25	; 0x07
    1bee:	86 83       	std	Z+6, r24	; 0x06
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	66 81       	ldd	r22, Z+6	; 0x06
    1bf4:	77 81       	ldd	r23, Z+7	; 0x07
    1bf6:	0e 94 a3 21 	call	0x4346	; 0x4346 <memcpy>
    1bfa:	08 95       	ret

00001bfc <prvUnlockQueue>:
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	8c 01       	movw	r16, r24
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	0f 92       	push	r0
    1c0e:	fc 01       	movw	r30, r24
    1c10:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1c12:	1c 16       	cp	r1, r28
    1c14:	ac f4       	brge	.+42     	; 0x1c40 <prvUnlockQueue+0x44>
    1c16:	81 89       	ldd	r24, Z+17	; 0x11
    1c18:	81 11       	cpse	r24, r1
    1c1a:	06 c0       	rjmp	.+12     	; 0x1c28 <prvUnlockQueue+0x2c>
    1c1c:	11 c0       	rjmp	.+34     	; 0x1c40 <prvUnlockQueue+0x44>
    1c1e:	f8 01       	movw	r30, r16
    1c20:	81 89       	ldd	r24, Z+17	; 0x11
    1c22:	81 11       	cpse	r24, r1
    1c24:	05 c0       	rjmp	.+10     	; 0x1c30 <prvUnlockQueue+0x34>
    1c26:	0c c0       	rjmp	.+24     	; 0x1c40 <prvUnlockQueue+0x44>
    1c28:	78 01       	movw	r14, r16
    1c2a:	f1 e1       	ldi	r31, 0x11	; 17
    1c2c:	ef 0e       	add	r14, r31
    1c2e:	f1 1c       	adc	r15, r1
    1c30:	c7 01       	movw	r24, r14
    1c32:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskRemoveFromEventList>
    1c36:	81 11       	cpse	r24, r1
    1c38:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <vTaskMissedYield>
    1c3c:	c1 50       	subi	r28, 0x01	; 1
    1c3e:	79 f7       	brne	.-34     	; 0x1c1e <prvUnlockQueue+0x22>
    1c40:	8f ef       	ldi	r24, 0xFF	; 255
    1c42:	f8 01       	movw	r30, r16
    1c44:	86 8f       	std	Z+30, r24	; 0x1e
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	0f 92       	push	r0
    1c50:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1c52:	1c 16       	cp	r1, r28
    1c54:	ac f4       	brge	.+42     	; 0x1c80 <prvUnlockQueue+0x84>
    1c56:	80 85       	ldd	r24, Z+8	; 0x08
    1c58:	81 11       	cpse	r24, r1
    1c5a:	06 c0       	rjmp	.+12     	; 0x1c68 <prvUnlockQueue+0x6c>
    1c5c:	11 c0       	rjmp	.+34     	; 0x1c80 <prvUnlockQueue+0x84>
    1c5e:	f8 01       	movw	r30, r16
    1c60:	80 85       	ldd	r24, Z+8	; 0x08
    1c62:	81 11       	cpse	r24, r1
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <prvUnlockQueue+0x74>
    1c66:	0c c0       	rjmp	.+24     	; 0x1c80 <prvUnlockQueue+0x84>
    1c68:	78 01       	movw	r14, r16
    1c6a:	f8 e0       	ldi	r31, 0x08	; 8
    1c6c:	ef 0e       	add	r14, r31
    1c6e:	f1 1c       	adc	r15, r1
    1c70:	c7 01       	movw	r24, r14
    1c72:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskRemoveFromEventList>
    1c76:	81 11       	cpse	r24, r1
    1c78:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <vTaskMissedYield>
    1c7c:	c1 50       	subi	r28, 0x01	; 1
    1c7e:	79 f7       	brne	.-34     	; 0x1c5e <prvUnlockQueue+0x62>
    1c80:	8f ef       	ldi	r24, 0xFF	; 255
    1c82:	f8 01       	movw	r30, r16
    1c84:	85 8f       	std	Z+29, r24	; 0x1d
    1c86:	0f 90       	pop	r0
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	ff 90       	pop	r15
    1c92:	ef 90       	pop	r14
    1c94:	08 95       	ret

00001c96 <xQueueGenericReset>:
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	ec 01       	movw	r28, r24
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	0f 92       	push	r0
    1ca2:	e8 81       	ld	r30, Y
    1ca4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ca6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	82 9f       	mul	r24, r18
    1cb0:	a0 01       	movw	r20, r0
    1cb2:	83 9f       	mul	r24, r19
    1cb4:	50 0d       	add	r21, r0
    1cb6:	92 9f       	mul	r25, r18
    1cb8:	50 0d       	add	r21, r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	4e 0f       	add	r20, r30
    1cbe:	5f 1f       	adc	r21, r31
    1cc0:	5d 83       	std	Y+5, r21	; 0x05
    1cc2:	4c 83       	std	Y+4, r20	; 0x04
    1cc4:	1a 8e       	std	Y+26, r1	; 0x1a
    1cc6:	fb 83       	std	Y+3, r31	; 0x03
    1cc8:	ea 83       	std	Y+2, r30	; 0x02
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	82 9f       	mul	r24, r18
    1cce:	a0 01       	movw	r20, r0
    1cd0:	83 9f       	mul	r24, r19
    1cd2:	50 0d       	add	r21, r0
    1cd4:	92 9f       	mul	r25, r18
    1cd6:	50 0d       	add	r21, r0
    1cd8:	11 24       	eor	r1, r1
    1cda:	cf 01       	movw	r24, r30
    1cdc:	84 0f       	add	r24, r20
    1cde:	95 1f       	adc	r25, r21
    1ce0:	9f 83       	std	Y+7, r25	; 0x07
    1ce2:	8e 83       	std	Y+6, r24	; 0x06
    1ce4:	8f ef       	ldi	r24, 0xFF	; 255
    1ce6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ce8:	8e 8f       	std	Y+30, r24	; 0x1e
    1cea:	61 11       	cpse	r22, r1
    1cec:	0c c0       	rjmp	.+24     	; 0x1d06 <xQueueGenericReset+0x70>
    1cee:	88 85       	ldd	r24, Y+8	; 0x08
    1cf0:	88 23       	and	r24, r24
    1cf2:	89 f0       	breq	.+34     	; 0x1d16 <xQueueGenericReset+0x80>
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	08 96       	adiw	r24, 0x08	; 8
    1cf8:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskRemoveFromEventList>
    1cfc:	88 23       	and	r24, r24
    1cfe:	59 f0       	breq	.+22     	; 0x1d16 <xQueueGenericReset+0x80>
    1d00:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vPortYield>
    1d04:	08 c0       	rjmp	.+16     	; 0x1d16 <xQueueGenericReset+0x80>
    1d06:	ce 01       	movw	r24, r28
    1d08:	08 96       	adiw	r24, 0x08	; 8
    1d0a:	0e 94 ed 0b 	call	0x17da	; 0x17da <vListInitialise>
    1d0e:	ce 01       	movw	r24, r28
    1d10:	41 96       	adiw	r24, 0x11	; 17
    1d12:	0e 94 ed 0b 	call	0x17da	; 0x17da <vListInitialise>
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	08 95       	ret

00001d22 <xQueueGenericCreate>:
    1d22:	0f 93       	push	r16
    1d24:	1f 93       	push	r17
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	08 2f       	mov	r16, r24
    1d2c:	16 2f       	mov	r17, r22
    1d2e:	86 9f       	mul	r24, r22
    1d30:	c0 01       	movw	r24, r0
    1d32:	11 24       	eor	r1, r1
    1d34:	4f 96       	adiw	r24, 0x1f	; 31
    1d36:	0e 94 98 0b 	call	0x1730	; 0x1730 <pvPortMalloc>
    1d3a:	ec 01       	movw	r28, r24
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	71 f0       	breq	.+28     	; 0x1d5c <xQueueGenericCreate+0x3a>
    1d40:	11 11       	cpse	r17, r1
    1d42:	03 c0       	rjmp	.+6      	; 0x1d4a <xQueueGenericCreate+0x28>
    1d44:	99 83       	std	Y+1, r25	; 0x01
    1d46:	88 83       	st	Y, r24
    1d48:	03 c0       	rjmp	.+6      	; 0x1d50 <xQueueGenericCreate+0x2e>
    1d4a:	4f 96       	adiw	r24, 0x1f	; 31
    1d4c:	99 83       	std	Y+1, r25	; 0x01
    1d4e:	88 83       	st	Y, r24
    1d50:	0b 8f       	std	Y+27, r16	; 0x1b
    1d52:	1c 8f       	std	Y+28, r17	; 0x1c
    1d54:	61 e0       	ldi	r22, 0x01	; 1
    1d56:	ce 01       	movw	r24, r28
    1d58:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <xQueueGenericReset>
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	08 95       	ret

00001d68 <xQueueGenericSend>:
    1d68:	9f 92       	push	r9
    1d6a:	af 92       	push	r10
    1d6c:	bf 92       	push	r11
    1d6e:	cf 92       	push	r12
    1d70:	df 92       	push	r13
    1d72:	ef 92       	push	r14
    1d74:	ff 92       	push	r15
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <xQueueGenericSend+0x18>
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <xQueueGenericSend+0x1a>
    1d82:	1f 92       	push	r1
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	8c 01       	movw	r16, r24
    1d8a:	6b 01       	movw	r12, r22
    1d8c:	5d 83       	std	Y+5, r21	; 0x05
    1d8e:	4c 83       	std	Y+4, r20	; 0x04
    1d90:	a2 2e       	mov	r10, r18
    1d92:	b1 2c       	mov	r11, r1
    1d94:	99 24       	eor	r9, r9
    1d96:	93 94       	inc	r9
    1d98:	7c 01       	movw	r14, r24
    1d9a:	88 e0       	ldi	r24, 0x08	; 8
    1d9c:	e8 0e       	add	r14, r24
    1d9e:	f1 1c       	adc	r15, r1
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	0f 92       	push	r0
    1da6:	f8 01       	movw	r30, r16
    1da8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1daa:	83 8d       	ldd	r24, Z+27	; 0x1b
    1dac:	98 17       	cp	r25, r24
    1dae:	18 f0       	brcs	.+6      	; 0x1db6 <xQueueGenericSend+0x4e>
    1db0:	f2 e0       	ldi	r31, 0x02	; 2
    1db2:	af 12       	cpse	r10, r31
    1db4:	19 c0       	rjmp	.+50     	; 0x1de8 <xQueueGenericSend+0x80>
    1db6:	4a 2d       	mov	r20, r10
    1db8:	b6 01       	movw	r22, r12
    1dba:	c8 01       	movw	r24, r16
    1dbc:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <prvCopyDataToQueue>
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	91 89       	ldd	r25, Z+17	; 0x11
    1dc4:	99 23       	and	r25, r25
    1dc6:	49 f0       	breq	.+18     	; 0x1dda <xQueueGenericSend+0x72>
    1dc8:	c8 01       	movw	r24, r16
    1dca:	41 96       	adiw	r24, 0x11	; 17
    1dcc:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskRemoveFromEventList>
    1dd0:	88 23       	and	r24, r24
    1dd2:	31 f0       	breq	.+12     	; 0x1de0 <xQueueGenericSend+0x78>
    1dd4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vPortYield>
    1dd8:	03 c0       	rjmp	.+6      	; 0x1de0 <xQueueGenericSend+0x78>
    1dda:	81 11       	cpse	r24, r1
    1ddc:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vPortYield>
    1de0:	0f 90       	pop	r0
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	50 c0       	rjmp	.+160    	; 0x1e88 <xQueueGenericSend+0x120>
    1de8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dea:	9d 81       	ldd	r25, Y+5	; 0x05
    1dec:	89 2b       	or	r24, r25
    1dee:	21 f4       	brne	.+8      	; 0x1df8 <xQueueGenericSend+0x90>
    1df0:	0f 90       	pop	r0
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	48 c0       	rjmp	.+144    	; 0x1e88 <xQueueGenericSend+0x120>
    1df8:	b1 10       	cpse	r11, r1
    1dfa:	05 c0       	rjmp	.+10     	; 0x1e06 <xQueueGenericSend+0x9e>
    1dfc:	ce 01       	movw	r24, r28
    1dfe:	01 96       	adiw	r24, 0x01	; 1
    1e00:	0e 94 c6 14 	call	0x298c	; 0x298c <vTaskInternalSetTimeOutState>
    1e04:	b9 2c       	mov	r11, r9
    1e06:	0f 90       	pop	r0
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	0e 94 42 12 	call	0x2484	; 0x2484 <vTaskSuspendAll>
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	0f 92       	push	r0
    1e14:	f8 01       	movw	r30, r16
    1e16:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e18:	8f 3f       	cpi	r24, 0xFF	; 255
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <xQueueGenericSend+0xb6>
    1e1c:	15 8e       	std	Z+29, r1	; 0x1d
    1e1e:	f8 01       	movw	r30, r16
    1e20:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e22:	8f 3f       	cpi	r24, 0xFF	; 255
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <xQueueGenericSend+0xc0>
    1e26:	16 8e       	std	Z+30, r1	; 0x1e
    1e28:	0f 90       	pop	r0
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	be 01       	movw	r22, r28
    1e2e:	6c 5f       	subi	r22, 0xFC	; 252
    1e30:	7f 4f       	sbci	r23, 0xFF	; 255
    1e32:	ce 01       	movw	r24, r28
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <xTaskCheckForTimeOut>
    1e3a:	81 11       	cpse	r24, r1
    1e3c:	1f c0       	rjmp	.+62     	; 0x1e7c <xQueueGenericSend+0x114>
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	0f 92       	push	r0
    1e44:	f8 01       	movw	r30, r16
    1e46:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e48:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e4a:	0f 90       	pop	r0
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	98 13       	cpse	r25, r24
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <xQueueGenericSend+0x108>
    1e52:	6c 81       	ldd	r22, Y+4	; 0x04
    1e54:	7d 81       	ldd	r23, Y+5	; 0x05
    1e56:	c7 01       	movw	r24, r14
    1e58:	0e 94 53 14 	call	0x28a6	; 0x28a6 <vTaskPlaceOnEventList>
    1e5c:	c8 01       	movw	r24, r16
    1e5e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <prvUnlockQueue>
    1e62:	0e 94 11 13 	call	0x2622	; 0x2622 <xTaskResumeAll>
    1e66:	81 11       	cpse	r24, r1
    1e68:	9b cf       	rjmp	.-202    	; 0x1da0 <xQueueGenericSend+0x38>
    1e6a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vPortYield>
    1e6e:	98 cf       	rjmp	.-208    	; 0x1da0 <xQueueGenericSend+0x38>
    1e70:	c8 01       	movw	r24, r16
    1e72:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <prvUnlockQueue>
    1e76:	0e 94 11 13 	call	0x2622	; 0x2622 <xTaskResumeAll>
    1e7a:	92 cf       	rjmp	.-220    	; 0x1da0 <xQueueGenericSend+0x38>
    1e7c:	c8 01       	movw	r24, r16
    1e7e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <prvUnlockQueue>
    1e82:	0e 94 11 13 	call	0x2622	; 0x2622 <xTaskResumeAll>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	df 90       	pop	r13
    1ea0:	cf 90       	pop	r12
    1ea2:	bf 90       	pop	r11
    1ea4:	af 90       	pop	r10
    1ea6:	9f 90       	pop	r9
    1ea8:	08 95       	ret

00001eaa <xQueueGenericSendFromISR>:
    1eaa:	ef 92       	push	r14
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	8a 01       	movw	r16, r20
    1eb8:	fc 01       	movw	r30, r24
    1eba:	52 8d       	ldd	r21, Z+26	; 0x1a
    1ebc:	33 8d       	ldd	r19, Z+27	; 0x1b
    1ebe:	53 17       	cp	r21, r19
    1ec0:	10 f0       	brcs	.+4      	; 0x1ec6 <xQueueGenericSendFromISR+0x1c>
    1ec2:	22 30       	cpi	r18, 0x02	; 2
    1ec4:	01 f5       	brne	.+64     	; 0x1f06 <xQueueGenericSendFromISR+0x5c>
    1ec6:	42 2f       	mov	r20, r18
    1ec8:	78 01       	movw	r14, r16
    1eca:	ec 01       	movw	r28, r24
    1ecc:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1ece:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <prvCopyDataToQueue>
    1ed6:	1f 3f       	cpi	r17, 0xFF	; 255
    1ed8:	81 f4       	brne	.+32     	; 0x1efa <xQueueGenericSendFromISR+0x50>
    1eda:	89 89       	ldd	r24, Y+17	; 0x11
    1edc:	88 23       	and	r24, r24
    1ede:	a9 f0       	breq	.+42     	; 0x1f0a <xQueueGenericSendFromISR+0x60>
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	41 96       	adiw	r24, 0x11	; 17
    1ee4:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskRemoveFromEventList>
    1ee8:	88 23       	and	r24, r24
    1eea:	89 f0       	breq	.+34     	; 0x1f0e <xQueueGenericSendFromISR+0x64>
    1eec:	e1 14       	cp	r14, r1
    1eee:	f1 04       	cpc	r15, r1
    1ef0:	81 f0       	breq	.+32     	; 0x1f12 <xQueueGenericSendFromISR+0x68>
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	f7 01       	movw	r30, r14
    1ef6:	80 83       	st	Z, r24
    1ef8:	0d c0       	rjmp	.+26     	; 0x1f14 <xQueueGenericSendFromISR+0x6a>
    1efa:	ff 24       	eor	r15, r15
    1efc:	f3 94       	inc	r15
    1efe:	f1 0e       	add	r15, r17
    1f00:	fe 8e       	std	Y+30, r15	; 0x1e
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	07 c0       	rjmp	.+14     	; 0x1f14 <xQueueGenericSendFromISR+0x6a>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	05 c0       	rjmp	.+10     	; 0x1f14 <xQueueGenericSendFromISR+0x6a>
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	03 c0       	rjmp	.+6      	; 0x1f14 <xQueueGenericSendFromISR+0x6a>
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <xQueueGenericSendFromISR+0x6a>
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	ff 90       	pop	r15
    1f1e:	ef 90       	pop	r14
    1f20:	08 95       	ret

00001f22 <xQueueReceive>:
    1f22:	9f 92       	push	r9
    1f24:	af 92       	push	r10
    1f26:	bf 92       	push	r11
    1f28:	cf 92       	push	r12
    1f2a:	df 92       	push	r13
    1f2c:	ef 92       	push	r14
    1f2e:	ff 92       	push	r15
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <xQueueReceive+0x18>
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <xQueueReceive+0x1a>
    1f3c:	1f 92       	push	r1
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	8c 01       	movw	r16, r24
    1f44:	5b 01       	movw	r10, r22
    1f46:	5d 83       	std	Y+5, r21	; 0x05
    1f48:	4c 83       	std	Y+4, r20	; 0x04
    1f4a:	e1 2c       	mov	r14, r1
    1f4c:	99 24       	eor	r9, r9
    1f4e:	93 94       	inc	r9
    1f50:	6c 01       	movw	r12, r24
    1f52:	81 e1       	ldi	r24, 0x11	; 17
    1f54:	c8 0e       	add	r12, r24
    1f56:	d1 1c       	adc	r13, r1
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	0f 92       	push	r0
    1f5e:	f8 01       	movw	r30, r16
    1f60:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1f62:	ff 20       	and	r15, r15
    1f64:	a9 f0       	breq	.+42     	; 0x1f90 <xQueueReceive+0x6e>
    1f66:	b5 01       	movw	r22, r10
    1f68:	c8 01       	movw	r24, r16
    1f6a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <prvCopyDataFromQueue>
    1f6e:	fa 94       	dec	r15
    1f70:	f8 01       	movw	r30, r16
    1f72:	f2 8e       	std	Z+26, r15	; 0x1a
    1f74:	80 85       	ldd	r24, Z+8	; 0x08
    1f76:	88 23       	and	r24, r24
    1f78:	39 f0       	breq	.+14     	; 0x1f88 <xQueueReceive+0x66>
    1f7a:	c8 01       	movw	r24, r16
    1f7c:	08 96       	adiw	r24, 0x08	; 8
    1f7e:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskRemoveFromEventList>
    1f82:	81 11       	cpse	r24, r1
    1f84:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vPortYield>
    1f88:	0f 90       	pop	r0
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	51 c0       	rjmp	.+162    	; 0x2032 <xQueueReceive+0x110>
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	9d 81       	ldd	r25, Y+5	; 0x05
    1f94:	89 2b       	or	r24, r25
    1f96:	21 f4       	brne	.+8      	; 0x1fa0 <xQueueReceive+0x7e>
    1f98:	0f 90       	pop	r0
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	49 c0       	rjmp	.+146    	; 0x2032 <xQueueReceive+0x110>
    1fa0:	e1 10       	cpse	r14, r1
    1fa2:	05 c0       	rjmp	.+10     	; 0x1fae <xQueueReceive+0x8c>
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	01 96       	adiw	r24, 0x01	; 1
    1fa8:	0e 94 c6 14 	call	0x298c	; 0x298c <vTaskInternalSetTimeOutState>
    1fac:	e9 2c       	mov	r14, r9
    1fae:	0f 90       	pop	r0
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	0e 94 42 12 	call	0x2484	; 0x2484 <vTaskSuspendAll>
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	0f 92       	push	r0
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	85 8d       	ldd	r24, Z+29	; 0x1d
    1fc0:	8f 3f       	cpi	r24, 0xFF	; 255
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <xQueueReceive+0xa4>
    1fc4:	15 8e       	std	Z+29, r1	; 0x1d
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fca:	8f 3f       	cpi	r24, 0xFF	; 255
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <xQueueReceive+0xae>
    1fce:	16 8e       	std	Z+30, r1	; 0x1e
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	be 01       	movw	r22, r28
    1fd6:	6c 5f       	subi	r22, 0xFC	; 252
    1fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fda:	ce 01       	movw	r24, r28
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <xTaskCheckForTimeOut>
    1fe2:	81 11       	cpse	r24, r1
    1fe4:	1a c0       	rjmp	.+52     	; 0x201a <xQueueReceive+0xf8>
    1fe6:	c8 01       	movw	r24, r16
    1fe8:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <prvIsQueueEmpty>
    1fec:	88 23       	and	r24, r24
    1fee:	79 f0       	breq	.+30     	; 0x200e <xQueueReceive+0xec>
    1ff0:	6c 81       	ldd	r22, Y+4	; 0x04
    1ff2:	7d 81       	ldd	r23, Y+5	; 0x05
    1ff4:	c6 01       	movw	r24, r12
    1ff6:	0e 94 53 14 	call	0x28a6	; 0x28a6 <vTaskPlaceOnEventList>
    1ffa:	c8 01       	movw	r24, r16
    1ffc:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <prvUnlockQueue>
    2000:	0e 94 11 13 	call	0x2622	; 0x2622 <xTaskResumeAll>
    2004:	81 11       	cpse	r24, r1
    2006:	a8 cf       	rjmp	.-176    	; 0x1f58 <xQueueReceive+0x36>
    2008:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vPortYield>
    200c:	a5 cf       	rjmp	.-182    	; 0x1f58 <xQueueReceive+0x36>
    200e:	c8 01       	movw	r24, r16
    2010:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <prvUnlockQueue>
    2014:	0e 94 11 13 	call	0x2622	; 0x2622 <xTaskResumeAll>
    2018:	9f cf       	rjmp	.-194    	; 0x1f58 <xQueueReceive+0x36>
    201a:	c8 01       	movw	r24, r16
    201c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <prvUnlockQueue>
    2020:	0e 94 11 13 	call	0x2622	; 0x2622 <xTaskResumeAll>
    2024:	c8 01       	movw	r24, r16
    2026:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <prvIsQueueEmpty>
    202a:	88 23       	and	r24, r24
    202c:	09 f4       	brne	.+2      	; 0x2030 <xQueueReceive+0x10e>
    202e:	94 cf       	rjmp	.-216    	; 0x1f58 <xQueueReceive+0x36>
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	ff 90       	pop	r15
    2046:	ef 90       	pop	r14
    2048:	df 90       	pop	r13
    204a:	cf 90       	pop	r12
    204c:	bf 90       	pop	r11
    204e:	af 90       	pop	r10
    2050:	9f 90       	pop	r9
    2052:	08 95       	ret

00002054 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	0f 92       	push	r0
    2060:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2062:	8f 3f       	cpi	r24, 0xFF	; 255
    2064:	09 f4       	brne	.+2      	; 0x2068 <vQueueWaitForMessageRestricted+0x14>
    2066:	1d 8e       	std	Y+29, r1	; 0x1d
    2068:	8e 8d       	ldd	r24, Y+30	; 0x1e
    206a:	8f 3f       	cpi	r24, 0xFF	; 255
    206c:	09 f4       	brne	.+2      	; 0x2070 <vQueueWaitForMessageRestricted+0x1c>
    206e:	1e 8e       	std	Y+30, r1	; 0x1e
    2070:	0f 90       	pop	r0
    2072:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2074:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2076:	81 11       	cpse	r24, r1
    2078:	04 c0       	rjmp	.+8      	; 0x2082 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    207a:	ce 01       	movw	r24, r28
    207c:	41 96       	adiw	r24, 0x11	; 17
    207e:	0e 94 65 14 	call	0x28ca	; 0x28ca <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2082:	ce 01       	movw	r24, r28
    2084:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <prvUnlockQueue>
    }
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	08 95       	ret

0000208e <prvResetNextTaskUnblockTime>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    208e:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <pxDelayedTaskList>
    2092:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <pxDelayedTaskList+0x1>
    2096:	80 81       	ld	r24, Z
    2098:	81 11       	cpse	r24, r1
    209a:	07 c0       	rjmp	.+14     	; 0x20aa <prvResetNextTaskUnblockTime+0x1c>
    209c:	8f ef       	ldi	r24, 0xFF	; 255
    209e:	9f ef       	ldi	r25, 0xFF	; 255
    20a0:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <xNextTaskUnblockTime+0x1>
    20a4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <xNextTaskUnblockTime>
    20a8:	08 95       	ret
    20aa:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <pxDelayedTaskList>
    20ae:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <pxDelayedTaskList+0x1>
    20b2:	05 80       	ldd	r0, Z+5	; 0x05
    20b4:	f6 81       	ldd	r31, Z+6	; 0x06
    20b6:	e0 2d       	mov	r30, r0
    20b8:	06 80       	ldd	r0, Z+6	; 0x06
    20ba:	f7 81       	ldd	r31, Z+7	; 0x07
    20bc:	e0 2d       	mov	r30, r0
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <xNextTaskUnblockTime+0x1>
    20c6:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <xNextTaskUnblockTime>
    20ca:	08 95       	ret

000020cc <prvAddCurrentTaskToDelayedList>:
    20cc:	ff 92       	push	r15
    20ce:	0f 93       	push	r16
    20d0:	1f 93       	push	r17
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
    20d6:	ec 01       	movw	r28, r24
    20d8:	f6 2e       	mov	r15, r22
    20da:	00 91 a4 01 	lds	r16, 0x01A4	; 0x8001a4 <xTickCount>
    20de:	10 91 a5 01 	lds	r17, 0x01A5	; 0x8001a5 <xTickCount+0x1>
    20e2:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <pxCurrentTCB>
    20e6:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    20ea:	02 96       	adiw	r24, 0x02	; 2
    20ec:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <uxListRemove>
    20f0:	cf 3f       	cpi	r28, 0xFF	; 255
    20f2:	8f ef       	ldi	r24, 0xFF	; 255
    20f4:	d8 07       	cpc	r29, r24
    20f6:	69 f4       	brne	.+26     	; 0x2112 <prvAddCurrentTaskToDelayedList+0x46>
    20f8:	ff 20       	and	r15, r15
    20fa:	59 f0       	breq	.+22     	; 0x2112 <prvAddCurrentTaskToDelayedList+0x46>
    20fc:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <pxCurrentTCB>
    2100:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    2104:	6e 5f       	subi	r22, 0xFE	; 254
    2106:	7f 4f       	sbci	r23, 0xFF	; 255
    2108:	87 ea       	ldi	r24, 0xA7	; 167
    210a:	91 e0       	ldi	r25, 0x01	; 1
    210c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <vListInsertEnd>
    2110:	2f c0       	rjmp	.+94     	; 0x2170 <prvAddCurrentTaskToDelayedList+0xa4>
    2112:	c0 0f       	add	r28, r16
    2114:	d1 1f       	adc	r29, r17
    2116:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <pxCurrentTCB>
    211a:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    211e:	d3 83       	std	Z+3, r29	; 0x03
    2120:	c2 83       	std	Z+2, r28	; 0x02
    2122:	c0 17       	cp	r28, r16
    2124:	d1 07       	cpc	r29, r17
    2126:	68 f4       	brcc	.+26     	; 0x2142 <prvAddCurrentTaskToDelayedList+0x76>
    2128:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <pxCurrentTCB>
    212c:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    2130:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <pxOverflowDelayedTaskList>
    2134:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <pxOverflowDelayedTaskList+0x1>
    2138:	6e 5f       	subi	r22, 0xFE	; 254
    213a:	7f 4f       	sbci	r23, 0xFF	; 255
    213c:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsert>
    2140:	17 c0       	rjmp	.+46     	; 0x2170 <prvAddCurrentTaskToDelayedList+0xa4>
    2142:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <pxCurrentTCB>
    2146:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    214a:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <pxDelayedTaskList>
    214e:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <pxDelayedTaskList+0x1>
    2152:	6e 5f       	subi	r22, 0xFE	; 254
    2154:	7f 4f       	sbci	r23, 0xFF	; 255
    2156:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsert>
    215a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <xNextTaskUnblockTime>
    215e:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <xNextTaskUnblockTime+0x1>
    2162:	c8 17       	cp	r28, r24
    2164:	d9 07       	cpc	r29, r25
    2166:	20 f4       	brcc	.+8      	; 0x2170 <prvAddCurrentTaskToDelayedList+0xa4>
    2168:	d0 93 9c 01 	sts	0x019C, r29	; 0x80019c <xNextTaskUnblockTime+0x1>
    216c:	c0 93 9b 01 	sts	0x019B, r28	; 0x80019b <xNextTaskUnblockTime>
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	08 95       	ret

0000217c <prvIdleTask>:
    217c:	01 eb       	ldi	r16, 0xB1	; 177
    217e:	11 e0       	ldi	r17, 0x01	; 1
    2180:	0f 2e       	mov	r0, r31
    2182:	f9 ed       	ldi	r31, 0xD9	; 217
    2184:	ef 2e       	mov	r14, r31
    2186:	f1 e0       	ldi	r31, 0x01	; 1
    2188:	ff 2e       	mov	r15, r31
    218a:	f0 2d       	mov	r31, r0
    218c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <uxDeletedTasksWaitingCleanUp>
    2190:	88 23       	and	r24, r24
    2192:	29 f1       	breq	.+74     	; 0x21de <prvIdleTask+0x62>
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	0f 92       	push	r0
    219a:	d8 01       	movw	r26, r16
    219c:	15 96       	adiw	r26, 0x05	; 5
    219e:	ed 91       	ld	r30, X+
    21a0:	fc 91       	ld	r31, X
    21a2:	16 97       	sbiw	r26, 0x06	; 6
    21a4:	c6 81       	ldd	r28, Z+6	; 0x06
    21a6:	d7 81       	ldd	r29, Z+7	; 0x07
    21a8:	ce 01       	movw	r24, r28
    21aa:	02 96       	adiw	r24, 0x02	; 2
    21ac:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <uxListRemove>
    21b0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <uxCurrentNumberOfTasks>
    21b4:	81 50       	subi	r24, 0x01	; 1
    21b6:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <uxCurrentNumberOfTasks>
    21ba:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <uxDeletedTasksWaitingCleanUp>
    21be:	81 50       	subi	r24, 0x01	; 1
    21c0:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <uxDeletedTasksWaitingCleanUp>
    21c4:	0f 90       	pop	r0
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ca:	98 8d       	ldd	r25, Y+24	; 0x18
    21cc:	0e 94 ab 0b 	call	0x1756	; 0x1756 <vPortFree>
    21d0:	ce 01       	movw	r24, r28
    21d2:	0e 94 ab 0b 	call	0x1756	; 0x1756 <vPortFree>
    21d6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <uxDeletedTasksWaitingCleanUp>
    21da:	81 11       	cpse	r24, r1
    21dc:	db cf       	rjmp	.-74     	; 0x2194 <prvIdleTask+0x18>
    21de:	f7 01       	movw	r30, r14
    21e0:	80 81       	ld	r24, Z
    21e2:	82 30       	cpi	r24, 0x02	; 2
    21e4:	10 f0       	brcs	.+4      	; 0x21ea <prvIdleTask+0x6e>
    21e6:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vPortYield>
    21ea:	0e 94 ba 0b 	call	0x1774	; 0x1774 <vApplicationIdleHook>
    21ee:	ce cf       	rjmp	.-100    	; 0x218c <prvIdleTask+0x10>

000021f0 <xTaskCreate>:
    21f0:	4f 92       	push	r4
    21f2:	5f 92       	push	r5
    21f4:	6f 92       	push	r6
    21f6:	7f 92       	push	r7
    21f8:	8f 92       	push	r8
    21fa:	9f 92       	push	r9
    21fc:	af 92       	push	r10
    21fe:	bf 92       	push	r11
    2200:	cf 92       	push	r12
    2202:	df 92       	push	r13
    2204:	ef 92       	push	r14
    2206:	ff 92       	push	r15
    2208:	0f 93       	push	r16
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	4c 01       	movw	r8, r24
    2210:	6b 01       	movw	r12, r22
    2212:	5a 01       	movw	r10, r20
    2214:	29 01       	movw	r4, r18
    2216:	ca 01       	movw	r24, r20
    2218:	0e 94 98 0b 	call	0x1730	; 0x1730 <pvPortMalloc>
    221c:	3c 01       	movw	r6, r24
    221e:	89 2b       	or	r24, r25
    2220:	09 f4       	brne	.+2      	; 0x2224 <xTaskCreate+0x34>
    2222:	f1 c0       	rjmp	.+482    	; 0x2406 <xTaskCreate+0x216>
    2224:	88 e2       	ldi	r24, 0x28	; 40
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	0e 94 98 0b 	call	0x1730	; 0x1730 <pvPortMalloc>
    222c:	ec 01       	movw	r28, r24
    222e:	89 2b       	or	r24, r25
    2230:	99 f0       	breq	.+38     	; 0x2258 <xTaskCreate+0x68>
    2232:	78 8e       	std	Y+24, r7	; 0x18
    2234:	6f 8a       	std	Y+23, r6	; 0x17
    2236:	a5 01       	movw	r20, r10
    2238:	65 ea       	ldi	r22, 0xA5	; 165
    223a:	70 e0       	ldi	r23, 0x00	; 0
    223c:	c3 01       	movw	r24, r6
    223e:	0e 94 ac 21 	call	0x4358	; 0x4358 <memset>
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	a8 1a       	sub	r10, r24
    2246:	b1 08       	sbc	r11, r1
    2248:	8f 89       	ldd	r24, Y+23	; 0x17
    224a:	98 8d       	ldd	r25, Y+24	; 0x18
    224c:	a8 0e       	add	r10, r24
    224e:	b9 1e       	adc	r11, r25
    2250:	c1 14       	cp	r12, r1
    2252:	d1 04       	cpc	r13, r1
    2254:	29 f4       	brne	.+10     	; 0x2260 <xTaskCreate+0x70>
    2256:	20 c0       	rjmp	.+64     	; 0x2298 <xTaskCreate+0xa8>
    2258:	c3 01       	movw	r24, r6
    225a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <vPortFree>
    225e:	d3 c0       	rjmp	.+422    	; 0x2406 <xTaskCreate+0x216>
    2260:	d6 01       	movw	r26, r12
    2262:	8c 91       	ld	r24, X
    2264:	89 8f       	std	Y+25, r24	; 0x19
    2266:	8c 91       	ld	r24, X
    2268:	88 23       	and	r24, r24
    226a:	a1 f0       	breq	.+40     	; 0x2294 <xTaskCreate+0xa4>
    226c:	ae 01       	movw	r20, r28
    226e:	46 5e       	subi	r20, 0xE6	; 230
    2270:	5f 4f       	sbci	r21, 0xFF	; 255
    2272:	f6 01       	movw	r30, r12
    2274:	31 96       	adiw	r30, 0x01	; 1
    2276:	b8 e0       	ldi	r27, 0x08	; 8
    2278:	cb 0e       	add	r12, r27
    227a:	d1 1c       	adc	r13, r1
    227c:	cf 01       	movw	r24, r30
    227e:	21 91       	ld	r18, Z+
    2280:	da 01       	movw	r26, r20
    2282:	2d 93       	st	X+, r18
    2284:	ad 01       	movw	r20, r26
    2286:	dc 01       	movw	r26, r24
    2288:	8c 91       	ld	r24, X
    228a:	88 23       	and	r24, r24
    228c:	19 f0       	breq	.+6      	; 0x2294 <xTaskCreate+0xa4>
    228e:	ec 15       	cp	r30, r12
    2290:	fd 05       	cpc	r31, r13
    2292:	a1 f7       	brne	.-24     	; 0x227c <xTaskCreate+0x8c>
    2294:	18 a2       	std	Y+32, r1	; 0x20
    2296:	01 c0       	rjmp	.+2      	; 0x229a <xTaskCreate+0xaa>
    2298:	19 8e       	std	Y+25, r1	; 0x19
    229a:	04 30       	cpi	r16, 0x04	; 4
    229c:	08 f0       	brcs	.+2      	; 0x22a0 <xTaskCreate+0xb0>
    229e:	03 e0       	ldi	r16, 0x03	; 3
    22a0:	0e 8b       	std	Y+22, r16	; 0x16
    22a2:	09 a3       	std	Y+33, r16	; 0x21
    22a4:	1a a2       	std	Y+34, r1	; 0x22
    22a6:	6e 01       	movw	r12, r28
    22a8:	b2 e0       	ldi	r27, 0x02	; 2
    22aa:	cb 0e       	add	r12, r27
    22ac:	d1 1c       	adc	r13, r1
    22ae:	c6 01       	movw	r24, r12
    22b0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vListInitialiseItem>
    22b4:	ce 01       	movw	r24, r28
    22b6:	0c 96       	adiw	r24, 0x0c	; 12
    22b8:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vListInitialiseItem>
    22bc:	d9 87       	std	Y+9, r29	; 0x09
    22be:	c8 87       	std	Y+8, r28	; 0x08
    22c0:	84 e0       	ldi	r24, 0x04	; 4
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	80 1b       	sub	r24, r16
    22c6:	91 09       	sbc	r25, r1
    22c8:	9d 87       	std	Y+13, r25	; 0x0d
    22ca:	8c 87       	std	Y+12, r24	; 0x0c
    22cc:	db 8b       	std	Y+19, r29	; 0x13
    22ce:	ca 8b       	std	Y+18, r28	; 0x12
    22d0:	1b a2       	std	Y+35, r1	; 0x23
    22d2:	1c a2       	std	Y+36, r1	; 0x24
    22d4:	1d a2       	std	Y+37, r1	; 0x25
    22d6:	1e a2       	std	Y+38, r1	; 0x26
    22d8:	1f a2       	std	Y+39, r1	; 0x27
    22da:	a2 01       	movw	r20, r4
    22dc:	b4 01       	movw	r22, r8
    22de:	c5 01       	movw	r24, r10
    22e0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <pxPortInitialiseStack>
    22e4:	99 83       	std	Y+1, r25	; 0x01
    22e6:	88 83       	st	Y, r24
    22e8:	e1 14       	cp	r14, r1
    22ea:	f1 04       	cpc	r15, r1
    22ec:	19 f0       	breq	.+6      	; 0x22f4 <xTaskCreate+0x104>
    22ee:	f7 01       	movw	r30, r14
    22f0:	d1 83       	std	Z+1, r29	; 0x01
    22f2:	c0 83       	st	Z, r28
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	0f 92       	push	r0
    22fa:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <uxCurrentNumberOfTasks>
    22fe:	8f 5f       	subi	r24, 0xFF	; 255
    2300:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <uxCurrentNumberOfTasks>
    2304:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <pxCurrentTCB>
    2308:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    230c:	89 2b       	or	r24, r25
    230e:	d1 f5       	brne	.+116    	; 0x2384 <xTaskCreate+0x194>
    2310:	d0 93 fe 01 	sts	0x01FE, r29	; 0x8001fe <pxCurrentTCB+0x1>
    2314:	c0 93 fd 01 	sts	0x01FD, r28	; 0x8001fd <pxCurrentTCB>
    2318:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <uxCurrentNumberOfTasks>
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	09 f0       	breq	.+2      	; 0x2322 <xTaskCreate+0x132>
    2320:	41 c0       	rjmp	.+130    	; 0x23a4 <xTaskCreate+0x1b4>
    2322:	89 ed       	ldi	r24, 0xD9	; 217
    2324:	91 e0       	ldi	r25, 0x01	; 1
    2326:	0e 94 ed 0b 	call	0x17da	; 0x17da <vListInitialise>
    232a:	82 ee       	ldi	r24, 0xE2	; 226
    232c:	91 e0       	ldi	r25, 0x01	; 1
    232e:	0e 94 ed 0b 	call	0x17da	; 0x17da <vListInitialise>
    2332:	8b ee       	ldi	r24, 0xEB	; 235
    2334:	91 e0       	ldi	r25, 0x01	; 1
    2336:	0e 94 ed 0b 	call	0x17da	; 0x17da <vListInitialise>
    233a:	84 ef       	ldi	r24, 0xF4	; 244
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	0e 94 ed 0b 	call	0x17da	; 0x17da <vListInitialise>
    2342:	80 ed       	ldi	r24, 0xD0	; 208
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	0e 94 ed 0b 	call	0x17da	; 0x17da <vListInitialise>
    234a:	87 ec       	ldi	r24, 0xC7	; 199
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	0e 94 ed 0b 	call	0x17da	; 0x17da <vListInitialise>
    2352:	8a eb       	ldi	r24, 0xBA	; 186
    2354:	91 e0       	ldi	r25, 0x01	; 1
    2356:	0e 94 ed 0b 	call	0x17da	; 0x17da <vListInitialise>
    235a:	81 eb       	ldi	r24, 0xB1	; 177
    235c:	91 e0       	ldi	r25, 0x01	; 1
    235e:	0e 94 ed 0b 	call	0x17da	; 0x17da <vListInitialise>
    2362:	87 ea       	ldi	r24, 0xA7	; 167
    2364:	91 e0       	ldi	r25, 0x01	; 1
    2366:	0e 94 ed 0b 	call	0x17da	; 0x17da <vListInitialise>
    236a:	80 ed       	ldi	r24, 0xD0	; 208
    236c:	91 e0       	ldi	r25, 0x01	; 1
    236e:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <pxDelayedTaskList+0x1>
    2372:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <pxDelayedTaskList>
    2376:	87 ec       	ldi	r24, 0xC7	; 199
    2378:	91 e0       	ldi	r25, 0x01	; 1
    237a:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <pxOverflowDelayedTaskList+0x1>
    237e:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <pxOverflowDelayedTaskList>
    2382:	10 c0       	rjmp	.+32     	; 0x23a4 <xTaskCreate+0x1b4>
    2384:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <xSchedulerRunning>
    2388:	81 11       	cpse	r24, r1
    238a:	0c c0       	rjmp	.+24     	; 0x23a4 <xTaskCreate+0x1b4>
    238c:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <pxCurrentTCB>
    2390:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    2394:	96 89       	ldd	r25, Z+22	; 0x16
    2396:	8e 89       	ldd	r24, Y+22	; 0x16
    2398:	89 17       	cp	r24, r25
    239a:	20 f0       	brcs	.+8      	; 0x23a4 <xTaskCreate+0x1b4>
    239c:	d0 93 fe 01 	sts	0x01FE, r29	; 0x8001fe <pxCurrentTCB+0x1>
    23a0:	c0 93 fd 01 	sts	0x01FD, r28	; 0x8001fd <pxCurrentTCB>
    23a4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <uxTaskNumber>
    23a8:	8f 5f       	subi	r24, 0xFF	; 255
    23aa:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <uxTaskNumber>
    23ae:	8e 89       	ldd	r24, Y+22	; 0x16
    23b0:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <uxTopReadyPriority>
    23b4:	98 17       	cp	r25, r24
    23b6:	10 f4       	brcc	.+4      	; 0x23bc <xTaskCreate+0x1cc>
    23b8:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <uxTopReadyPriority>
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	9c 01       	movw	r18, r24
    23c0:	22 0f       	add	r18, r18
    23c2:	33 1f       	adc	r19, r19
    23c4:	22 0f       	add	r18, r18
    23c6:	33 1f       	adc	r19, r19
    23c8:	22 0f       	add	r18, r18
    23ca:	33 1f       	adc	r19, r19
    23cc:	82 0f       	add	r24, r18
    23ce:	93 1f       	adc	r25, r19
    23d0:	b6 01       	movw	r22, r12
    23d2:	87 52       	subi	r24, 0x27	; 39
    23d4:	9e 4f       	sbci	r25, 0xFE	; 254
    23d6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <vListInsertEnd>
    23da:	0f 90       	pop	r0
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <xSchedulerRunning>
    23e2:	88 23       	and	r24, r24
    23e4:	61 f0       	breq	.+24     	; 0x23fe <xTaskCreate+0x20e>
    23e6:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <pxCurrentTCB>
    23ea:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    23ee:	96 89       	ldd	r25, Z+22	; 0x16
    23f0:	8e 89       	ldd	r24, Y+22	; 0x16
    23f2:	98 17       	cp	r25, r24
    23f4:	30 f4       	brcc	.+12     	; 0x2402 <xTaskCreate+0x212>
    23f6:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vPortYield>
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	05 c0       	rjmp	.+10     	; 0x2408 <xTaskCreate+0x218>
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	03 c0       	rjmp	.+6      	; 0x2408 <xTaskCreate+0x218>
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	01 c0       	rjmp	.+2      	; 0x2408 <xTaskCreate+0x218>
    2406:	8f ef       	ldi	r24, 0xFF	; 255
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	0f 91       	pop	r16
    240e:	ff 90       	pop	r15
    2410:	ef 90       	pop	r14
    2412:	df 90       	pop	r13
    2414:	cf 90       	pop	r12
    2416:	bf 90       	pop	r11
    2418:	af 90       	pop	r10
    241a:	9f 90       	pop	r9
    241c:	8f 90       	pop	r8
    241e:	7f 90       	pop	r7
    2420:	6f 90       	pop	r6
    2422:	5f 90       	pop	r5
    2424:	4f 90       	pop	r4
    2426:	08 95       	ret

00002428 <vTaskStartScheduler>:
    2428:	ef 92       	push	r14
    242a:	ff 92       	push	r15
    242c:	0f 93       	push	r16
    242e:	0f 2e       	mov	r0, r31
    2430:	f9 e9       	ldi	r31, 0x99	; 153
    2432:	ef 2e       	mov	r14, r31
    2434:	f1 e0       	ldi	r31, 0x01	; 1
    2436:	ff 2e       	mov	r15, r31
    2438:	f0 2d       	mov	r31, r0
    243a:	00 e0       	ldi	r16, 0x00	; 0
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	45 e5       	ldi	r20, 0x55	; 85
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	62 e4       	ldi	r22, 0x42	; 66
    2446:	71 e0       	ldi	r23, 0x01	; 1
    2448:	8e eb       	ldi	r24, 0xBE	; 190
    244a:	90 e1       	ldi	r25, 0x10	; 16
    244c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <xTaskCreate>
    2450:	81 30       	cpi	r24, 0x01	; 1
    2452:	a1 f4       	brne	.+40     	; 0x247c <vTaskStartScheduler+0x54>
    2454:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <xTimerCreateTimerTask>
    2458:	81 30       	cpi	r24, 0x01	; 1
    245a:	81 f4       	brne	.+32     	; 0x247c <vTaskStartScheduler+0x54>
    245c:	f8 94       	cli
    245e:	8f ef       	ldi	r24, 0xFF	; 255
    2460:	9f ef       	ldi	r25, 0xFF	; 255
    2462:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <xNextTaskUnblockTime+0x1>
    2466:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <xNextTaskUnblockTime>
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <xSchedulerRunning>
    2470:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <xTickCount+0x1>
    2474:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <xTickCount>
    2478:	0e 94 89 0c 	call	0x1912	; 0x1912 <xPortStartScheduler>
    247c:	0f 91       	pop	r16
    247e:	ff 90       	pop	r15
    2480:	ef 90       	pop	r14
    2482:	08 95       	ret

00002484 <vTaskSuspendAll>:
    2484:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <uxSchedulerSuspended>
    2488:	8f 5f       	subi	r24, 0xFF	; 255
    248a:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <uxSchedulerSuspended>
    248e:	08 95       	ret

00002490 <xTaskGetTickCount>:
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	0f 92       	push	r0
    2496:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <xTickCount>
    249a:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <xTickCount+0x1>
    249e:	0f 90       	pop	r0
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	08 95       	ret

000024a4 <xTaskIncrementTick>:
    24a4:	cf 92       	push	r12
    24a6:	df 92       	push	r13
    24a8:	ef 92       	push	r14
    24aa:	ff 92       	push	r15
    24ac:	0f 93       	push	r16
    24ae:	1f 93       	push	r17
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <uxSchedulerSuspended>
    24b8:	81 11       	cpse	r24, r1
    24ba:	9f c0       	rjmp	.+318    	; 0x25fa <xTaskIncrementTick+0x156>
    24bc:	e0 90 a4 01 	lds	r14, 0x01A4	; 0x8001a4 <xTickCount>
    24c0:	f0 90 a5 01 	lds	r15, 0x01A5	; 0x8001a5 <xTickCount+0x1>
    24c4:	8f ef       	ldi	r24, 0xFF	; 255
    24c6:	e8 1a       	sub	r14, r24
    24c8:	f8 0a       	sbc	r15, r24
    24ca:	f0 92 a5 01 	sts	0x01A5, r15	; 0x8001a5 <xTickCount+0x1>
    24ce:	e0 92 a4 01 	sts	0x01A4, r14	; 0x8001a4 <xTickCount>
    24d2:	e1 14       	cp	r14, r1
    24d4:	f1 04       	cpc	r15, r1
    24d6:	b9 f4       	brne	.+46     	; 0x2506 <xTaskIncrementTick+0x62>
    24d8:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <pxDelayedTaskList>
    24dc:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <pxDelayedTaskList+0x1>
    24e0:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <pxOverflowDelayedTaskList>
    24e4:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <pxOverflowDelayedTaskList+0x1>
    24e8:	30 93 c6 01 	sts	0x01C6, r19	; 0x8001c6 <pxDelayedTaskList+0x1>
    24ec:	20 93 c5 01 	sts	0x01C5, r18	; 0x8001c5 <pxDelayedTaskList>
    24f0:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <pxOverflowDelayedTaskList+0x1>
    24f4:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <pxOverflowDelayedTaskList>
    24f8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <xNumOfOverflows>
    24fc:	8f 5f       	subi	r24, 0xFF	; 255
    24fe:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <xNumOfOverflows>
    2502:	0e 94 47 10 	call	0x208e	; 0x208e <prvResetNextTaskUnblockTime>
    2506:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <xNextTaskUnblockTime>
    250a:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <xNextTaskUnblockTime+0x1>
    250e:	e8 16       	cp	r14, r24
    2510:	f9 06       	cpc	r15, r25
    2512:	10 f4       	brcc	.+4      	; 0x2518 <xTaskIncrementTick+0x74>
    2514:	d1 2c       	mov	r13, r1
    2516:	53 c0       	rjmp	.+166    	; 0x25be <xTaskIncrementTick+0x11a>
    2518:	d1 2c       	mov	r13, r1
    251a:	cc 24       	eor	r12, r12
    251c:	c3 94       	inc	r12
    251e:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <pxDelayedTaskList>
    2522:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <pxDelayedTaskList+0x1>
    2526:	80 81       	ld	r24, Z
    2528:	81 11       	cpse	r24, r1
    252a:	07 c0       	rjmp	.+14     	; 0x253a <xTaskIncrementTick+0x96>
    252c:	8f ef       	ldi	r24, 0xFF	; 255
    252e:	9f ef       	ldi	r25, 0xFF	; 255
    2530:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <xNextTaskUnblockTime+0x1>
    2534:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <xNextTaskUnblockTime>
    2538:	42 c0       	rjmp	.+132    	; 0x25be <xTaskIncrementTick+0x11a>
    253a:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <pxDelayedTaskList>
    253e:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <pxDelayedTaskList+0x1>
    2542:	05 80       	ldd	r0, Z+5	; 0x05
    2544:	f6 81       	ldd	r31, Z+6	; 0x06
    2546:	e0 2d       	mov	r30, r0
    2548:	c6 81       	ldd	r28, Z+6	; 0x06
    254a:	d7 81       	ldd	r29, Z+7	; 0x07
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	9b 81       	ldd	r25, Y+3	; 0x03
    2550:	e8 16       	cp	r14, r24
    2552:	f9 06       	cpc	r15, r25
    2554:	28 f4       	brcc	.+10     	; 0x2560 <xTaskIncrementTick+0xbc>
    2556:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <xNextTaskUnblockTime+0x1>
    255a:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <xNextTaskUnblockTime>
    255e:	2f c0       	rjmp	.+94     	; 0x25be <xTaskIncrementTick+0x11a>
    2560:	8e 01       	movw	r16, r28
    2562:	0e 5f       	subi	r16, 0xFE	; 254
    2564:	1f 4f       	sbci	r17, 0xFF	; 255
    2566:	c8 01       	movw	r24, r16
    2568:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <uxListRemove>
    256c:	8c 89       	ldd	r24, Y+20	; 0x14
    256e:	9d 89       	ldd	r25, Y+21	; 0x15
    2570:	89 2b       	or	r24, r25
    2572:	21 f0       	breq	.+8      	; 0x257c <xTaskIncrementTick+0xd8>
    2574:	ce 01       	movw	r24, r28
    2576:	0c 96       	adiw	r24, 0x0c	; 12
    2578:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <uxListRemove>
    257c:	8e 89       	ldd	r24, Y+22	; 0x16
    257e:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <uxTopReadyPriority>
    2582:	98 17       	cp	r25, r24
    2584:	10 f4       	brcc	.+4      	; 0x258a <xTaskIncrementTick+0xe6>
    2586:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <uxTopReadyPriority>
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9c 01       	movw	r18, r24
    258e:	22 0f       	add	r18, r18
    2590:	33 1f       	adc	r19, r19
    2592:	22 0f       	add	r18, r18
    2594:	33 1f       	adc	r19, r19
    2596:	22 0f       	add	r18, r18
    2598:	33 1f       	adc	r19, r19
    259a:	82 0f       	add	r24, r18
    259c:	93 1f       	adc	r25, r19
    259e:	b8 01       	movw	r22, r16
    25a0:	87 52       	subi	r24, 0x27	; 39
    25a2:	9e 4f       	sbci	r25, 0xFE	; 254
    25a4:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <vListInsertEnd>
    25a8:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <pxCurrentTCB>
    25ac:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    25b0:	9e 89       	ldd	r25, Y+22	; 0x16
    25b2:	86 89       	ldd	r24, Z+22	; 0x16
    25b4:	98 17       	cp	r25, r24
    25b6:	08 f4       	brcc	.+2      	; 0x25ba <xTaskIncrementTick+0x116>
    25b8:	b2 cf       	rjmp	.-156    	; 0x251e <xTaskIncrementTick+0x7a>
    25ba:	dc 2c       	mov	r13, r12
    25bc:	b0 cf       	rjmp	.-160    	; 0x251e <xTaskIncrementTick+0x7a>
    25be:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <pxCurrentTCB>
    25c2:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    25c6:	86 89       	ldd	r24, Z+22	; 0x16
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	fc 01       	movw	r30, r24
    25cc:	ee 0f       	add	r30, r30
    25ce:	ff 1f       	adc	r31, r31
    25d0:	ee 0f       	add	r30, r30
    25d2:	ff 1f       	adc	r31, r31
    25d4:	ee 0f       	add	r30, r30
    25d6:	ff 1f       	adc	r31, r31
    25d8:	8e 0f       	add	r24, r30
    25da:	9f 1f       	adc	r25, r31
    25dc:	fc 01       	movw	r30, r24
    25de:	e7 52       	subi	r30, 0x27	; 39
    25e0:	fe 4f       	sbci	r31, 0xFE	; 254
    25e2:	80 81       	ld	r24, Z
    25e4:	82 30       	cpi	r24, 0x02	; 2
    25e6:	10 f0       	brcs	.+4      	; 0x25ec <xTaskIncrementTick+0x148>
    25e8:	dd 24       	eor	r13, r13
    25ea:	d3 94       	inc	r13
    25ec:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <xYieldPending>
    25f0:	88 23       	and	r24, r24
    25f2:	69 f0       	breq	.+26     	; 0x260e <xTaskIncrementTick+0x16a>
    25f4:	dd 24       	eor	r13, r13
    25f6:	d3 94       	inc	r13
    25f8:	0a c0       	rjmp	.+20     	; 0x260e <xTaskIncrementTick+0x16a>
    25fa:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <xPendedTicks>
    25fe:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <xPendedTicks+0x1>
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <xPendedTicks+0x1>
    2608:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <xPendedTicks>
    260c:	d1 2c       	mov	r13, r1
    260e:	8d 2d       	mov	r24, r13
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	ff 90       	pop	r15
    261a:	ef 90       	pop	r14
    261c:	df 90       	pop	r13
    261e:	cf 90       	pop	r12
    2620:	08 95       	ret

00002622 <xTaskResumeAll>:
    2622:	df 92       	push	r13
    2624:	ef 92       	push	r14
    2626:	ff 92       	push	r15
    2628:	0f 93       	push	r16
    262a:	1f 93       	push	r17
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	0f 92       	push	r0
    2636:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <uxSchedulerSuspended>
    263a:	81 50       	subi	r24, 0x01	; 1
    263c:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <uxSchedulerSuspended>
    2640:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <uxSchedulerSuspended>
    2644:	81 11       	cpse	r24, r1
    2646:	63 c0       	rjmp	.+198    	; 0x270e <xTaskResumeAll+0xec>
    2648:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <uxCurrentNumberOfTasks>
    264c:	81 11       	cpse	r24, r1
    264e:	33 c0       	rjmp	.+102    	; 0x26b6 <xTaskResumeAll+0x94>
    2650:	61 c0       	rjmp	.+194    	; 0x2714 <xTaskResumeAll+0xf2>
    2652:	d7 01       	movw	r26, r14
    2654:	15 96       	adiw	r26, 0x05	; 5
    2656:	ed 91       	ld	r30, X+
    2658:	fc 91       	ld	r31, X
    265a:	16 97       	sbiw	r26, 0x06	; 6
    265c:	c6 81       	ldd	r28, Z+6	; 0x06
    265e:	d7 81       	ldd	r29, Z+7	; 0x07
    2660:	ce 01       	movw	r24, r28
    2662:	0c 96       	adiw	r24, 0x0c	; 12
    2664:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <uxListRemove>
    2668:	8e 01       	movw	r16, r28
    266a:	0e 5f       	subi	r16, 0xFE	; 254
    266c:	1f 4f       	sbci	r17, 0xFF	; 255
    266e:	c8 01       	movw	r24, r16
    2670:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <uxListRemove>
    2674:	8e 89       	ldd	r24, Y+22	; 0x16
    2676:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <uxTopReadyPriority>
    267a:	98 17       	cp	r25, r24
    267c:	10 f4       	brcc	.+4      	; 0x2682 <xTaskResumeAll+0x60>
    267e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <uxTopReadyPriority>
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9c 01       	movw	r18, r24
    2686:	22 0f       	add	r18, r18
    2688:	33 1f       	adc	r19, r19
    268a:	22 0f       	add	r18, r18
    268c:	33 1f       	adc	r19, r19
    268e:	22 0f       	add	r18, r18
    2690:	33 1f       	adc	r19, r19
    2692:	82 0f       	add	r24, r18
    2694:	93 1f       	adc	r25, r19
    2696:	b8 01       	movw	r22, r16
    2698:	87 52       	subi	r24, 0x27	; 39
    269a:	9e 4f       	sbci	r25, 0xFE	; 254
    269c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <vListInsertEnd>
    26a0:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <pxCurrentTCB>
    26a4:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    26a8:	9e 89       	ldd	r25, Y+22	; 0x16
    26aa:	86 89       	ldd	r24, Z+22	; 0x16
    26ac:	98 17       	cp	r25, r24
    26ae:	68 f0       	brcs	.+26     	; 0x26ca <xTaskResumeAll+0xa8>
    26b0:	d0 92 9f 01 	sts	0x019F, r13	; 0x80019f <xYieldPending>
    26b4:	0a c0       	rjmp	.+20     	; 0x26ca <xTaskResumeAll+0xa8>
    26b6:	c0 e0       	ldi	r28, 0x00	; 0
    26b8:	d0 e0       	ldi	r29, 0x00	; 0
    26ba:	0f 2e       	mov	r0, r31
    26bc:	fa eb       	ldi	r31, 0xBA	; 186
    26be:	ef 2e       	mov	r14, r31
    26c0:	f1 e0       	ldi	r31, 0x01	; 1
    26c2:	ff 2e       	mov	r15, r31
    26c4:	f0 2d       	mov	r31, r0
    26c6:	dd 24       	eor	r13, r13
    26c8:	d3 94       	inc	r13
    26ca:	f7 01       	movw	r30, r14
    26cc:	80 81       	ld	r24, Z
    26ce:	81 11       	cpse	r24, r1
    26d0:	c0 cf       	rjmp	.-128    	; 0x2652 <xTaskResumeAll+0x30>
    26d2:	cd 2b       	or	r28, r29
    26d4:	11 f0       	breq	.+4      	; 0x26da <xTaskResumeAll+0xb8>
    26d6:	0e 94 47 10 	call	0x208e	; 0x208e <prvResetNextTaskUnblockTime>
    26da:	c0 91 a0 01 	lds	r28, 0x01A0	; 0x8001a0 <xPendedTicks>
    26de:	d0 91 a1 01 	lds	r29, 0x01A1	; 0x8001a1 <xPendedTicks+0x1>
    26e2:	20 97       	sbiw	r28, 0x00	; 0
    26e4:	61 f0       	breq	.+24     	; 0x26fe <xTaskResumeAll+0xdc>
    26e6:	11 e0       	ldi	r17, 0x01	; 1
    26e8:	0e 94 52 12 	call	0x24a4	; 0x24a4 <xTaskIncrementTick>
    26ec:	81 11       	cpse	r24, r1
    26ee:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <xYieldPending>
    26f2:	21 97       	sbiw	r28, 0x01	; 1
    26f4:	c9 f7       	brne	.-14     	; 0x26e8 <xTaskResumeAll+0xc6>
    26f6:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <xPendedTicks+0x1>
    26fa:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <xPendedTicks>
    26fe:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <xYieldPending>
    2702:	88 23       	and	r24, r24
    2704:	31 f0       	breq	.+12     	; 0x2712 <xTaskResumeAll+0xf0>
    2706:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vPortYield>
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	03 c0       	rjmp	.+6      	; 0x2714 <xTaskResumeAll+0xf2>
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <xTaskResumeAll+0xf2>
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	0f 90       	pop	r0
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	ff 90       	pop	r15
    2722:	ef 90       	pop	r14
    2724:	df 90       	pop	r13
    2726:	08 95       	ret

00002728 <vTaskDelayUntil>:
    2728:	0f 93       	push	r16
    272a:	1f 93       	push	r17
    272c:	cf 93       	push	r28
    272e:	df 93       	push	r29
    2730:	8c 01       	movw	r16, r24
    2732:	eb 01       	movw	r28, r22
    2734:	0e 94 42 12 	call	0x2484	; 0x2484 <vTaskSuspendAll>
    2738:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <xTickCount>
    273c:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <xTickCount+0x1>
    2740:	f8 01       	movw	r30, r16
    2742:	20 81       	ld	r18, Z
    2744:	31 81       	ldd	r19, Z+1	; 0x01
    2746:	c9 01       	movw	r24, r18
    2748:	8c 0f       	add	r24, r28
    274a:	9d 1f       	adc	r25, r29
    274c:	42 17       	cp	r20, r18
    274e:	53 07       	cpc	r21, r19
    2750:	48 f4       	brcc	.+18     	; 0x2764 <vTaskDelayUntil+0x3c>
    2752:	82 17       	cp	r24, r18
    2754:	93 07       	cpc	r25, r19
    2756:	e8 f4       	brcc	.+58     	; 0x2792 <vTaskDelayUntil+0x6a>
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	80 83       	st	Z, r24
    275c:	48 17       	cp	r20, r24
    275e:	59 07       	cpc	r21, r25
    2760:	68 f4       	brcc	.+26     	; 0x277c <vTaskDelayUntil+0x54>
    2762:	07 c0       	rjmp	.+14     	; 0x2772 <vTaskDelayUntil+0x4a>
    2764:	82 17       	cp	r24, r18
    2766:	93 07       	cpc	r25, r19
    2768:	80 f0       	brcs	.+32     	; 0x278a <vTaskDelayUntil+0x62>
    276a:	48 17       	cp	r20, r24
    276c:	59 07       	cpc	r21, r25
    276e:	68 f0       	brcs	.+26     	; 0x278a <vTaskDelayUntil+0x62>
    2770:	10 c0       	rjmp	.+32     	; 0x2792 <vTaskDelayUntil+0x6a>
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	84 1b       	sub	r24, r20
    2776:	95 0b       	sbc	r25, r21
    2778:	0e 94 66 10 	call	0x20cc	; 0x20cc <prvAddCurrentTaskToDelayedList>
    277c:	0e 94 11 13 	call	0x2622	; 0x2622 <xTaskResumeAll>
    2780:	81 11       	cpse	r24, r1
    2782:	0b c0       	rjmp	.+22     	; 0x279a <vTaskDelayUntil+0x72>
    2784:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vPortYield>
    2788:	08 c0       	rjmp	.+16     	; 0x279a <vTaskDelayUntil+0x72>
    278a:	f8 01       	movw	r30, r16
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	80 83       	st	Z, r24
    2790:	f0 cf       	rjmp	.-32     	; 0x2772 <vTaskDelayUntil+0x4a>
    2792:	f8 01       	movw	r30, r16
    2794:	91 83       	std	Z+1, r25	; 0x01
    2796:	80 83       	st	Z, r24
    2798:	f1 cf       	rjmp	.-30     	; 0x277c <vTaskDelayUntil+0x54>
    279a:	df 91       	pop	r29
    279c:	cf 91       	pop	r28
    279e:	1f 91       	pop	r17
    27a0:	0f 91       	pop	r16
    27a2:	08 95       	ret

000027a4 <vTaskSwitchContext>:
    27a4:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <uxSchedulerSuspended>
    27a8:	88 23       	and	r24, r24
    27aa:	21 f0       	breq	.+8      	; 0x27b4 <vTaskSwitchContext+0x10>
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xYieldPending>
    27b2:	08 95       	ret
    27b4:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <xYieldPending>
    27b8:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <pxCurrentTCB>
    27bc:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    27c0:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <pxCurrentTCB>
    27c4:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    27c8:	2d 91       	ld	r18, X+
    27ca:	3c 91       	ld	r19, X
    27cc:	87 89       	ldd	r24, Z+23	; 0x17
    27ce:	90 8d       	ldd	r25, Z+24	; 0x18
    27d0:	82 17       	cp	r24, r18
    27d2:	93 07       	cpc	r25, r19
    27d4:	60 f0       	brcs	.+24     	; 0x27ee <vTaskSwitchContext+0x4a>
    27d6:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <pxCurrentTCB>
    27da:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    27de:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <pxCurrentTCB>
    27e2:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    27e6:	67 5e       	subi	r22, 0xE7	; 231
    27e8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ea:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <vApplicationStackOverflowHook>
    27ee:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <uxTopReadyPriority>
    27f2:	82 2f       	mov	r24, r18
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	fc 01       	movw	r30, r24
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31
    2800:	ee 0f       	add	r30, r30
    2802:	ff 1f       	adc	r31, r31
    2804:	e8 0f       	add	r30, r24
    2806:	f9 1f       	adc	r31, r25
    2808:	e7 52       	subi	r30, 0x27	; 39
    280a:	fe 4f       	sbci	r31, 0xFE	; 254
    280c:	30 81       	ld	r19, Z
    280e:	31 11       	cpse	r19, r1
    2810:	11 c0       	rjmp	.+34     	; 0x2834 <vTaskSwitchContext+0x90>
    2812:	21 50       	subi	r18, 0x01	; 1
    2814:	82 2f       	mov	r24, r18
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	fc 01       	movw	r30, r24
    281a:	ee 0f       	add	r30, r30
    281c:	ff 1f       	adc	r31, r31
    281e:	ee 0f       	add	r30, r30
    2820:	ff 1f       	adc	r31, r31
    2822:	ee 0f       	add	r30, r30
    2824:	ff 1f       	adc	r31, r31
    2826:	e8 0f       	add	r30, r24
    2828:	f9 1f       	adc	r31, r25
    282a:	e7 52       	subi	r30, 0x27	; 39
    282c:	fe 4f       	sbci	r31, 0xFE	; 254
    282e:	30 81       	ld	r19, Z
    2830:	33 23       	and	r19, r19
    2832:	79 f3       	breq	.-34     	; 0x2812 <vTaskSwitchContext+0x6e>
    2834:	ac 01       	movw	r20, r24
    2836:	44 0f       	add	r20, r20
    2838:	55 1f       	adc	r21, r21
    283a:	44 0f       	add	r20, r20
    283c:	55 1f       	adc	r21, r21
    283e:	44 0f       	add	r20, r20
    2840:	55 1f       	adc	r21, r21
    2842:	48 0f       	add	r20, r24
    2844:	59 1f       	adc	r21, r25
    2846:	da 01       	movw	r26, r20
    2848:	a7 52       	subi	r26, 0x27	; 39
    284a:	be 4f       	sbci	r27, 0xFE	; 254
    284c:	11 96       	adiw	r26, 0x01	; 1
    284e:	ed 91       	ld	r30, X+
    2850:	fc 91       	ld	r31, X
    2852:	12 97       	sbiw	r26, 0x02	; 2
    2854:	02 80       	ldd	r0, Z+2	; 0x02
    2856:	f3 81       	ldd	r31, Z+3	; 0x03
    2858:	e0 2d       	mov	r30, r0
    285a:	12 96       	adiw	r26, 0x02	; 2
    285c:	fc 93       	st	X, r31
    285e:	ee 93       	st	-X, r30
    2860:	11 97       	sbiw	r26, 0x01	; 1
    2862:	44 52       	subi	r20, 0x24	; 36
    2864:	5e 4f       	sbci	r21, 0xFE	; 254
    2866:	e4 17       	cp	r30, r20
    2868:	f5 07       	cpc	r31, r21
    286a:	29 f4       	brne	.+10     	; 0x2876 <vTaskSwitchContext+0xd2>
    286c:	42 81       	ldd	r20, Z+2	; 0x02
    286e:	53 81       	ldd	r21, Z+3	; 0x03
    2870:	fd 01       	movw	r30, r26
    2872:	52 83       	std	Z+2, r21	; 0x02
    2874:	41 83       	std	Z+1, r20	; 0x01
    2876:	fc 01       	movw	r30, r24
    2878:	ee 0f       	add	r30, r30
    287a:	ff 1f       	adc	r31, r31
    287c:	ee 0f       	add	r30, r30
    287e:	ff 1f       	adc	r31, r31
    2880:	ee 0f       	add	r30, r30
    2882:	ff 1f       	adc	r31, r31
    2884:	8e 0f       	add	r24, r30
    2886:	9f 1f       	adc	r25, r31
    2888:	fc 01       	movw	r30, r24
    288a:	e7 52       	subi	r30, 0x27	; 39
    288c:	fe 4f       	sbci	r31, 0xFE	; 254
    288e:	01 80       	ldd	r0, Z+1	; 0x01
    2890:	f2 81       	ldd	r31, Z+2	; 0x02
    2892:	e0 2d       	mov	r30, r0
    2894:	86 81       	ldd	r24, Z+6	; 0x06
    2896:	97 81       	ldd	r25, Z+7	; 0x07
    2898:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <pxCurrentTCB+0x1>
    289c:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <pxCurrentTCB>
    28a0:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <uxTopReadyPriority>
    28a4:	08 95       	ret

000028a6 <vTaskPlaceOnEventList>:
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	eb 01       	movw	r28, r22
    28ac:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <pxCurrentTCB>
    28b0:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    28b4:	64 5f       	subi	r22, 0xF4	; 244
    28b6:	7f 4f       	sbci	r23, 0xFF	; 255
    28b8:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsert>
    28bc:	61 e0       	ldi	r22, 0x01	; 1
    28be:	ce 01       	movw	r24, r28
    28c0:	0e 94 66 10 	call	0x20cc	; 0x20cc <prvAddCurrentTaskToDelayedList>
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	08 95       	ret

000028ca <vTaskPlaceOnEventListRestricted>:
    28ca:	0f 93       	push	r16
    28cc:	1f 93       	push	r17
    28ce:	cf 93       	push	r28
    28d0:	8b 01       	movw	r16, r22
    28d2:	c4 2f       	mov	r28, r20
    28d4:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <pxCurrentTCB>
    28d8:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    28dc:	64 5f       	subi	r22, 0xF4	; 244
    28de:	7f 4f       	sbci	r23, 0xFF	; 255
    28e0:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <vListInsertEnd>
    28e4:	cc 23       	and	r28, r28
    28e6:	11 f0       	breq	.+4      	; 0x28ec <vTaskPlaceOnEventListRestricted+0x22>
    28e8:	0f ef       	ldi	r16, 0xFF	; 255
    28ea:	1f ef       	ldi	r17, 0xFF	; 255
    28ec:	6c 2f       	mov	r22, r28
    28ee:	c8 01       	movw	r24, r16
    28f0:	0e 94 66 10 	call	0x20cc	; 0x20cc <prvAddCurrentTaskToDelayedList>
    28f4:	cf 91       	pop	r28
    28f6:	1f 91       	pop	r17
    28f8:	0f 91       	pop	r16
    28fa:	08 95       	ret

000028fc <xTaskRemoveFromEventList>:
    28fc:	0f 93       	push	r16
    28fe:	1f 93       	push	r17
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	dc 01       	movw	r26, r24
    2906:	15 96       	adiw	r26, 0x05	; 5
    2908:	ed 91       	ld	r30, X+
    290a:	fc 91       	ld	r31, X
    290c:	16 97       	sbiw	r26, 0x06	; 6
    290e:	c6 81       	ldd	r28, Z+6	; 0x06
    2910:	d7 81       	ldd	r29, Z+7	; 0x07
    2912:	8e 01       	movw	r16, r28
    2914:	04 5f       	subi	r16, 0xF4	; 244
    2916:	1f 4f       	sbci	r17, 0xFF	; 255
    2918:	c8 01       	movw	r24, r16
    291a:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <uxListRemove>
    291e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <uxSchedulerSuspended>
    2922:	81 11       	cpse	r24, r1
    2924:	1c c0       	rjmp	.+56     	; 0x295e <xTaskRemoveFromEventList+0x62>
    2926:	0a 50       	subi	r16, 0x0A	; 10
    2928:	11 09       	sbc	r17, r1
    292a:	c8 01       	movw	r24, r16
    292c:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <uxListRemove>
    2930:	8e 89       	ldd	r24, Y+22	; 0x16
    2932:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <uxTopReadyPriority>
    2936:	98 17       	cp	r25, r24
    2938:	10 f4       	brcc	.+4      	; 0x293e <xTaskRemoveFromEventList+0x42>
    293a:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <uxTopReadyPriority>
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9c 01       	movw	r18, r24
    2942:	22 0f       	add	r18, r18
    2944:	33 1f       	adc	r19, r19
    2946:	22 0f       	add	r18, r18
    2948:	33 1f       	adc	r19, r19
    294a:	22 0f       	add	r18, r18
    294c:	33 1f       	adc	r19, r19
    294e:	82 0f       	add	r24, r18
    2950:	93 1f       	adc	r25, r19
    2952:	b8 01       	movw	r22, r16
    2954:	87 52       	subi	r24, 0x27	; 39
    2956:	9e 4f       	sbci	r25, 0xFE	; 254
    2958:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <vListInsertEnd>
    295c:	05 c0       	rjmp	.+10     	; 0x2968 <xTaskRemoveFromEventList+0x6c>
    295e:	b8 01       	movw	r22, r16
    2960:	8a eb       	ldi	r24, 0xBA	; 186
    2962:	91 e0       	ldi	r25, 0x01	; 1
    2964:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <vListInsertEnd>
    2968:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <pxCurrentTCB>
    296c:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <pxCurrentTCB+0x1>
    2970:	9e 89       	ldd	r25, Y+22	; 0x16
    2972:	86 89       	ldd	r24, Z+22	; 0x16
    2974:	89 17       	cp	r24, r25
    2976:	20 f4       	brcc	.+8      	; 0x2980 <xTaskRemoveFromEventList+0x84>
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xYieldPending>
    297e:	01 c0       	rjmp	.+2      	; 0x2982 <xTaskRemoveFromEventList+0x86>
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	1f 91       	pop	r17
    2988:	0f 91       	pop	r16
    298a:	08 95       	ret

0000298c <vTaskInternalSetTimeOutState>:
    298c:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <xNumOfOverflows>
    2990:	fc 01       	movw	r30, r24
    2992:	20 83       	st	Z, r18
    2994:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <xTickCount>
    2998:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <xTickCount+0x1>
    299c:	32 83       	std	Z+2, r19	; 0x02
    299e:	21 83       	std	Z+1, r18	; 0x01
    29a0:	08 95       	ret

000029a2 <xTaskCheckForTimeOut>:
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	0f 92       	push	r0
    29ac:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <xTickCount>
    29b0:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <xTickCount+0x1>
    29b4:	db 01       	movw	r26, r22
    29b6:	4d 91       	ld	r20, X+
    29b8:	5c 91       	ld	r21, X
    29ba:	4f 3f       	cpi	r20, 0xFF	; 255
    29bc:	bf ef       	ldi	r27, 0xFF	; 255
    29be:	5b 07       	cpc	r21, r27
    29c0:	f1 f0       	breq	.+60     	; 0x29fe <xTaskCheckForTimeOut+0x5c>
    29c2:	ec 01       	movw	r28, r24
    29c4:	e9 81       	ldd	r30, Y+1	; 0x01
    29c6:	fa 81       	ldd	r31, Y+2	; 0x02
    29c8:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <xNumOfOverflows>
    29cc:	b8 81       	ld	r27, Y
    29ce:	ba 17       	cp	r27, r26
    29d0:	19 f0       	breq	.+6      	; 0x29d8 <xTaskCheckForTimeOut+0x36>
    29d2:	2e 17       	cp	r18, r30
    29d4:	3f 07       	cpc	r19, r31
    29d6:	a8 f4       	brcc	.+42     	; 0x2a02 <xTaskCheckForTimeOut+0x60>
    29d8:	2e 1b       	sub	r18, r30
    29da:	3f 0b       	sbc	r19, r31
    29dc:	24 17       	cp	r18, r20
    29de:	35 07       	cpc	r19, r21
    29e0:	48 f4       	brcc	.+18     	; 0x29f4 <xTaskCheckForTimeOut+0x52>
    29e2:	fb 01       	movw	r30, r22
    29e4:	42 1b       	sub	r20, r18
    29e6:	53 0b       	sbc	r21, r19
    29e8:	51 83       	std	Z+1, r21	; 0x01
    29ea:	40 83       	st	Z, r20
    29ec:	0e 94 c6 14 	call	0x298c	; 0x298c <vTaskInternalSetTimeOutState>
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	08 c0       	rjmp	.+16     	; 0x2a04 <xTaskCheckForTimeOut+0x62>
    29f4:	fb 01       	movw	r30, r22
    29f6:	11 82       	std	Z+1, r1	; 0x01
    29f8:	10 82       	st	Z, r1
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	03 c0       	rjmp	.+6      	; 0x2a04 <xTaskCheckForTimeOut+0x62>
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	01 c0       	rjmp	.+2      	; 0x2a04 <xTaskCheckForTimeOut+0x62>
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	08 95       	ret

00002a0e <vTaskMissedYield>:
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xYieldPending>
    2a14:	08 95       	ret

00002a16 <xTaskGetSchedulerState>:
    2a16:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <xSchedulerRunning>
    2a1a:	88 23       	and	r24, r24
    2a1c:	31 f0       	breq	.+12     	; 0x2a2a <xTaskGetSchedulerState+0x14>
    2a1e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <uxSchedulerSuspended>
    2a22:	88 23       	and	r24, r24
    2a24:	21 f0       	breq	.+8      	; 0x2a2e <xTaskGetSchedulerState+0x18>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	08 95       	ret
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	08 95       	ret
    2a2e:	82 e0       	ldi	r24, 0x02	; 2
    2a30:	08 95       	ret

00002a32 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    2a32:	0f 93       	push	r16
    2a34:	1f 93       	push	r17
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
    2a3a:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    2a3c:	89 2b       	or	r24, r25
    2a3e:	79 f1       	breq	.+94     	; 0x2a9e <xTaskPriorityDisinherit+0x6c>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    2a40:	82 a1       	ldd	r24, Z+34	; 0x22
    2a42:	81 50       	subi	r24, 0x01	; 1
    2a44:	82 a3       	std	Z+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2a46:	26 89       	ldd	r18, Z+22	; 0x16
    2a48:	91 a1       	ldd	r25, Z+33	; 0x21
    2a4a:	29 17       	cp	r18, r25
    2a4c:	51 f1       	breq	.+84     	; 0x2aa2 <xTaskPriorityDisinherit+0x70>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2a4e:	81 11       	cpse	r24, r1
    2a50:	2a c0       	rjmp	.+84     	; 0x2aa6 <xTaskPriorityDisinherit+0x74>
    2a52:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready/delayed list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2a54:	8f 01       	movw	r16, r30
    2a56:	0e 5f       	subi	r16, 0xFE	; 254
    2a58:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5a:	c8 01       	movw	r24, r16
    2a5c:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    2a60:	89 a1       	ldd	r24, Y+33	; 0x21
    2a62:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only Yellowundant for some ports. */
    2a64:	24 e0       	ldi	r18, 0x04	; 4
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	28 1b       	sub	r18, r24
    2a6a:	31 09       	sbc	r19, r1
    2a6c:	3d 87       	std	Y+13, r19	; 0x0d
    2a6e:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    2a70:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <uxTopReadyPriority>
    2a74:	98 17       	cp	r25, r24
    2a76:	10 f4       	brcc	.+4      	; 0x2a7c <xTaskPriorityDisinherit+0x4a>
    2a78:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <uxTopReadyPriority>
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	9c 01       	movw	r18, r24
    2a80:	22 0f       	add	r18, r18
    2a82:	33 1f       	adc	r19, r19
    2a84:	22 0f       	add	r18, r18
    2a86:	33 1f       	adc	r19, r19
    2a88:	22 0f       	add	r18, r18
    2a8a:	33 1f       	adc	r19, r19
    2a8c:	82 0f       	add	r24, r18
    2a8e:	93 1f       	adc	r25, r19
    2a90:	b8 01       	movw	r22, r16
    2a92:	87 52       	subi	r24, 0x27	; 39
    2a94:	9e 4f       	sbci	r25, 0xFE	; 254
    2a96:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	05 c0       	rjmp	.+10     	; 0x2aa8 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	03 c0       	rjmp	.+6      	; 0x2aa8 <xTaskPriorityDisinherit+0x76>
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	01 c0       	rjmp	.+2      	; 0x2aa8 <xTaskPriorityDisinherit+0x76>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	1f 91       	pop	r17
    2aae:	0f 91       	pop	r16
    2ab0:	08 95       	ret

00002ab2 <prvInsertTimerInActiveList>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	73 83       	std	Z+3, r23	; 0x03
    2ab6:	62 83       	std	Z+2, r22	; 0x02
    2ab8:	91 87       	std	Z+9, r25	; 0x09
    2aba:	80 87       	std	Z+8, r24	; 0x08
    2abc:	46 17       	cp	r20, r22
    2abe:	57 07       	cpc	r21, r23
    2ac0:	90 f0       	brcs	.+36     	; 0x2ae6 <prvInsertTimerInActiveList+0x34>
    2ac2:	42 1b       	sub	r20, r18
    2ac4:	53 0b       	sbc	r21, r19
    2ac6:	84 85       	ldd	r24, Z+12	; 0x0c
    2ac8:	95 85       	ldd	r25, Z+13	; 0x0d
    2aca:	48 17       	cp	r20, r24
    2acc:	59 07       	cpc	r21, r25
    2ace:	e0 f4       	brcc	.+56     	; 0x2b08 <prvInsertTimerInActiveList+0x56>
    2ad0:	bf 01       	movw	r22, r30
    2ad2:	6e 5f       	subi	r22, 0xFE	; 254
    2ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad6:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <pxOverflowTimerList>
    2ada:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <pxOverflowTimerList+0x1>
    2ade:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsert>
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	08 95       	ret
    2ae6:	42 17       	cp	r20, r18
    2ae8:	53 07       	cpc	r21, r19
    2aea:	18 f4       	brcc	.+6      	; 0x2af2 <prvInsertTimerInActiveList+0x40>
    2aec:	62 17       	cp	r22, r18
    2aee:	73 07       	cpc	r23, r19
    2af0:	68 f4       	brcc	.+26     	; 0x2b0c <prvInsertTimerInActiveList+0x5a>
    2af2:	bf 01       	movw	r22, r30
    2af4:	6e 5f       	subi	r22, 0xFE	; 254
    2af6:	7f 4f       	sbci	r23, 0xFF	; 255
    2af8:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <pxCurrentTimerList>
    2afc:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <pxCurrentTimerList+0x1>
    2b00:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsert>
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	08 95       	ret
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	08 95       	ret
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	08 95       	ret

00002b10 <prvCheckForValidListAndQueue>:
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	0f 92       	push	r0
    2b16:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <xTimerQueue>
    2b1a:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <xTimerQueue+0x1>
    2b1e:	89 2b       	or	r24, r25
    2b20:	e9 f4       	brne	.+58     	; 0x2b5c <prvCheckForValidListAndQueue+0x4c>
    2b22:	82 e1       	ldi	r24, 0x12	; 18
    2b24:	92 e0       	ldi	r25, 0x02	; 2
    2b26:	0e 94 ed 0b 	call	0x17da	; 0x17da <vListInitialise>
    2b2a:	89 e0       	ldi	r24, 0x09	; 9
    2b2c:	92 e0       	ldi	r25, 0x02	; 2
    2b2e:	0e 94 ed 0b 	call	0x17da	; 0x17da <vListInitialise>
    2b32:	82 e1       	ldi	r24, 0x12	; 18
    2b34:	92 e0       	ldi	r25, 0x02	; 2
    2b36:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <pxCurrentTimerList+0x1>
    2b3a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <pxCurrentTimerList>
    2b3e:	89 e0       	ldi	r24, 0x09	; 9
    2b40:	92 e0       	ldi	r25, 0x02	; 2
    2b42:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <pxOverflowTimerList+0x1>
    2b46:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <pxOverflowTimerList>
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	65 e0       	ldi	r22, 0x05	; 5
    2b4e:	8a e0       	ldi	r24, 0x0A	; 10
    2b50:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <xQueueGenericCreate>
    2b54:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <xTimerQueue+0x1>
    2b58:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <xTimerQueue>
    2b5c:	0f 90       	pop	r0
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	08 95       	ret

00002b62 <xTimerCreateTimerTask>:
    2b62:	ef 92       	push	r14
    2b64:	ff 92       	push	r15
    2b66:	0f 93       	push	r16
    2b68:	0e 94 88 15 	call	0x2b10	; 0x2b10 <prvCheckForValidListAndQueue>
    2b6c:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <xTimerQueue>
    2b70:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <xTimerQueue+0x1>
    2b74:	89 2b       	or	r24, r25
    2b76:	91 f0       	breq	.+36     	; 0x2b9c <xTimerCreateTimerTask+0x3a>
    2b78:	0f 2e       	mov	r0, r31
    2b7a:	f1 e0       	ldi	r31, 0x01	; 1
    2b7c:	ef 2e       	mov	r14, r31
    2b7e:	f2 e0       	ldi	r31, 0x02	; 2
    2b80:	ff 2e       	mov	r15, r31
    2b82:	f0 2d       	mov	r31, r0
    2b84:	03 e0       	ldi	r16, 0x03	; 3
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	45 e5       	ldi	r20, 0x55	; 85
    2b8c:	50 e0       	ldi	r21, 0x00	; 0
    2b8e:	67 e4       	ldi	r22, 0x47	; 71
    2b90:	71 e0       	ldi	r23, 0x01	; 1
    2b92:	8b e8       	ldi	r24, 0x8B	; 139
    2b94:	96 e1       	ldi	r25, 0x16	; 22
    2b96:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <xTaskCreate>
    2b9a:	01 c0       	rjmp	.+2      	; 0x2b9e <xTimerCreateTimerTask+0x3c>
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	0f 91       	pop	r16
    2ba0:	ff 90       	pop	r15
    2ba2:	ef 90       	pop	r14
    2ba4:	08 95       	ret

00002ba6 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2ba6:	0f 93       	push	r16
    2ba8:	1f 93       	push	r17
    2baa:	cf 93       	push	r28
    2bac:	df 93       	push	r29
    2bae:	00 d0       	rcall	.+0      	; 0x2bb0 <xTimerGenericCommand+0xa>
    2bb0:	00 d0       	rcall	.+0      	; 0x2bb2 <xTimerGenericCommand+0xc>
    2bb2:	1f 92       	push	r1
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2bb8:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <xTimerQueue>
    2bbc:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <xTimerQueue+0x1>
    2bc0:	30 97       	sbiw	r30, 0x00	; 0
    2bc2:	71 f1       	breq	.+92     	; 0x2c20 <xTimerGenericCommand+0x7a>
    2bc4:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2bc6:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2bc8:	5b 83       	std	Y+3, r21	; 0x03
    2bca:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2bcc:	9d 83       	std	Y+5, r25	; 0x05
    2bce:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2bd0:	66 30       	cpi	r22, 0x06	; 6
    2bd2:	ec f4       	brge	.+58     	; 0x2c0e <xTimerGenericCommand+0x68>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2bd4:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <xTaskGetSchedulerState>
    2bd8:	82 30       	cpi	r24, 0x02	; 2
    2bda:	61 f4       	brne	.+24     	; 0x2bf4 <xTimerGenericCommand+0x4e>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	a8 01       	movw	r20, r16
    2be0:	be 01       	movw	r22, r28
    2be2:	6f 5f       	subi	r22, 0xFF	; 255
    2be4:	7f 4f       	sbci	r23, 0xFF	; 255
    2be6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <xTimerQueue>
    2bea:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <xTimerQueue+0x1>
    2bee:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <xQueueGenericSend>
    2bf2:	17 c0       	rjmp	.+46     	; 0x2c22 <xTimerGenericCommand+0x7c>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	50 e0       	ldi	r21, 0x00	; 0
    2bfa:	be 01       	movw	r22, r28
    2bfc:	6f 5f       	subi	r22, 0xFF	; 255
    2bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2c00:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <xTimerQueue>
    2c04:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <xTimerQueue+0x1>
    2c08:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <xQueueGenericSend>
    2c0c:	0a c0       	rjmp	.+20     	; 0x2c22 <xTimerGenericCommand+0x7c>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	ad 01       	movw	r20, r26
    2c12:	be 01       	movw	r22, r28
    2c14:	6f 5f       	subi	r22, 0xFF	; 255
    2c16:	7f 4f       	sbci	r23, 0xFF	; 255
    2c18:	cf 01       	movw	r24, r30
    2c1a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xQueueGenericSendFromISR>
    2c1e:	01 c0       	rjmp	.+2      	; 0x2c22 <xTimerGenericCommand+0x7c>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	08 95       	ret

00002c36 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2c36:	af 92       	push	r10
    2c38:	bf 92       	push	r11
    2c3a:	cf 92       	push	r12
    2c3c:	df 92       	push	r13
    2c3e:	ef 92       	push	r14
    2c40:	ff 92       	push	r15
    2c42:	0f 93       	push	r16
    2c44:	1f 93       	push	r17
    2c46:	cf 93       	push	r28
    2c48:	df 93       	push	r29
    2c4a:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2c4c:	0e 94 48 12 	call	0x2490	; 0x2490 <xTaskGetTickCount>
    2c50:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2c52:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <xLastTime.2416>
    2c56:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <xLastTime.2416+0x1>
    2c5a:	e8 16       	cp	r14, r24
    2c5c:	f9 06       	cpc	r15, r25
    2c5e:	08 f0       	brcs	.+2      	; 0x2c62 <prvSampleTimeNow+0x2c>
    2c60:	48 c0       	rjmp	.+144    	; 0x2cf2 <prvSampleTimeNow+0xbc>
    2c62:	30 c0       	rjmp	.+96     	; 0x2cc4 <prvSampleTimeNow+0x8e>
    If there are any timers still referenced from the current timer list
    then they must have expiYellow and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2c64:	05 80       	ldd	r0, Z+5	; 0x05
    2c66:	f6 81       	ldd	r31, Z+6	; 0x06
    2c68:	e0 2d       	mov	r30, r0
    2c6a:	a0 80       	ld	r10, Z
    2c6c:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stoYellow and retrieved is the same. */
    2c6e:	c6 81       	ldd	r28, Z+6	; 0x06
    2c70:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c72:	8e 01       	movw	r16, r28
    2c74:	0e 5f       	subi	r16, 0xFE	; 254
    2c76:	1f 4f       	sbci	r17, 0xFF	; 255
    2c78:	c8 01       	movw	r24, r16
    2c7a:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <uxListRemove>
        traceTIMER_EXPIYellow( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2c7e:	e8 89       	ldd	r30, Y+16	; 0x10
    2c80:	f9 89       	ldd	r31, Y+17	; 0x11
    2c82:	ce 01       	movw	r24, r28
    2c84:	09 95       	icall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c86:	8a 89       	ldd	r24, Y+18	; 0x12
    2c88:	82 ff       	sbrs	r24, 2
    2c8a:	1c c0       	rjmp	.+56     	; 0x2cc4 <prvSampleTimeNow+0x8e>
            the timer going into the same timer list then it has already expiYellow
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2c8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c8e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c90:	8a 0d       	add	r24, r10
    2c92:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2c94:	a8 16       	cp	r10, r24
    2c96:	b9 06       	cpc	r11, r25
    2c98:	60 f4       	brcc	.+24     	; 0x2cb2 <prvSampleTimeNow+0x7c>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2c9a:	9b 83       	std	Y+3, r25	; 0x03
    2c9c:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2c9e:	d9 87       	std	Y+9, r29	; 0x09
    2ca0:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2ca2:	b8 01       	movw	r22, r16
    2ca4:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <pxCurrentTimerList>
    2ca8:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <pxCurrentTimerList+0x1>
    2cac:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInsert>
    2cb0:	09 c0       	rjmp	.+18     	; 0x2cc4 <prvSampleTimeNow+0x8e>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2cb2:	00 e0       	ldi	r16, 0x00	; 0
    2cb4:	10 e0       	ldi	r17, 0x00	; 0
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	a5 01       	movw	r20, r10
    2cbc:	60 e0       	ldi	r22, 0x00	; 0
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expiYellow and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2cc4:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <pxCurrentTimerList>
    2cc8:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <pxCurrentTimerList+0x1>
    2ccc:	80 81       	ld	r24, Z
    2cce:	81 11       	cpse	r24, r1
    2cd0:	c9 cf       	rjmp	.-110    	; 0x2c64 <prvSampleTimeNow+0x2e>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2cd2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <pxOverflowTimerList>
    2cd6:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <pxOverflowTimerList+0x1>
    2cda:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <pxCurrentTimerList+0x1>
    2cde:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2ce2:	f0 93 06 02 	sts	0x0206, r31	; 0x800206 <pxOverflowTimerList+0x1>
    2ce6:	e0 93 05 02 	sts	0x0205, r30	; 0x800205 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	f6 01       	movw	r30, r12
    2cee:	80 83       	st	Z, r24
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <prvSampleTimeNow+0xc0>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2cf2:	f6 01       	movw	r30, r12
    2cf4:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2cf6:	f0 92 00 02 	sts	0x0200, r15	; 0x800200 <xLastTime.2416+0x1>
    2cfa:	e0 92 ff 01 	sts	0x01FF, r14	; 0x8001ff <xLastTime.2416>

    return xTimeNow;
}
    2cfe:	c7 01       	movw	r24, r14
    2d00:	df 91       	pop	r29
    2d02:	cf 91       	pop	r28
    2d04:	1f 91       	pop	r17
    2d06:	0f 91       	pop	r16
    2d08:	ff 90       	pop	r15
    2d0a:	ef 90       	pop	r14
    2d0c:	df 90       	pop	r13
    2d0e:	cf 90       	pop	r12
    2d10:	bf 90       	pop	r11
    2d12:	af 90       	pop	r10
    2d14:	08 95       	ret

00002d16 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    2d16:	cf 93       	push	r28
    2d18:	df 93       	push	r29
    2d1a:	00 d0       	rcall	.+0      	; 0x2d1c <prvTimerTask+0x6>
    2d1c:	00 d0       	rcall	.+0      	; 0x2d1e <prvTimerTask+0x8>
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <prvTimerTask+0xa>
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d24:	ce 01       	movw	r24, r28
    2d26:	01 96       	adiw	r24, 0x01	; 1
    2d28:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2d2a:	44 24       	eor	r4, r4
    2d2c:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2d2e:	e1 2c       	mov	r14, r1
    2d30:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2d32:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2d34:	c8 2e       	mov	r12, r24
    2d36:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2d38:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <pxCurrentTimerList>
    2d3c:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <pxCurrentTimerList+0x1>
    2d40:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    2d42:	88 23       	and	r24, r24
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <prvTimerTask+0x32>
    2d46:	dc c0       	rjmp	.+440    	; 0x2f00 <prvTimerTask+0x1ea>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2d48:	05 80       	ldd	r0, Z+5	; 0x05
    2d4a:	f6 81       	ldd	r31, Z+6	; 0x06
    2d4c:	e0 2d       	mov	r30, r0
    2d4e:	a0 80       	ld	r10, Z
    2d50:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2d52:	0e 94 42 12 	call	0x2484	; 0x2484 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d56:	c4 01       	movw	r24, r8
    2d58:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <prvSampleTimeNow>
    2d5c:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	81 11       	cpse	r24, r1
    2d62:	4b c0       	rjmp	.+150    	; 0x2dfa <prvTimerTask+0xe4>
        {
            /* The tick count has not overflowed, has the timer expiYellow? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2d64:	0a 15       	cp	r16, r10
    2d66:	1b 05       	cpc	r17, r11
    2d68:	b8 f1       	brcs	.+110    	; 0x2dd8 <prvTimerTask+0xc2>
            {
                ( void ) xTaskResumeAll();
    2d6a:	0e 94 11 13 	call	0x2622	; 0x2622 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiYellowTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stoYellow and retrieved is the same. */
    2d6e:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <pxCurrentTimerList>
    2d72:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <pxCurrentTimerList+0x1>
    2d76:	05 80       	ldd	r0, Z+5	; 0x05
    2d78:	f6 81       	ldd	r31, Z+6	; 0x06
    2d7a:	e0 2d       	mov	r30, r0
    2d7c:	66 80       	ldd	r6, Z+6	; 0x06
    2d7e:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2d80:	c3 01       	movw	r24, r6
    2d82:	02 96       	adiw	r24, 0x02	; 2
    2d84:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <uxListRemove>
    traceTIMER_EXPIYellow( pxTimer );

    /* If the timer is an auto-reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2d88:	d3 01       	movw	r26, r6
    2d8a:	52 96       	adiw	r26, 0x12	; 18
    2d8c:	8c 91       	ld	r24, X
    2d8e:	52 97       	sbiw	r26, 0x12	; 18
    2d90:	82 ff       	sbrs	r24, 2
    2d92:	17 c0       	rjmp	.+46     	; 0x2dc2 <prvTimerTask+0xac>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2d94:	1c 96       	adiw	r26, 0x0c	; 12
    2d96:	6d 91       	ld	r22, X+
    2d98:	7c 91       	ld	r23, X
    2d9a:	1d 97       	sbiw	r26, 0x0d	; 13
    2d9c:	6a 0d       	add	r22, r10
    2d9e:	7b 1d       	adc	r23, r11
    2da0:	95 01       	movw	r18, r10
    2da2:	a8 01       	movw	r20, r16
    2da4:	c3 01       	movw	r24, r6
    2da6:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <prvInsertTimerInActiveList>
    2daa:	88 23       	and	r24, r24
    2dac:	69 f0       	breq	.+26     	; 0x2dc8 <prvTimerTask+0xb2>
        {
            /* The timer expiYellow before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2dae:	0e 2d       	mov	r16, r14
    2db0:	1f 2d       	mov	r17, r15
    2db2:	2e 2d       	mov	r18, r14
    2db4:	3f 2d       	mov	r19, r15
    2db6:	a5 01       	movw	r20, r10
    2db8:	65 2d       	mov	r22, r5
    2dba:	c3 01       	movw	r24, r6
    2dbc:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <xTimerGenericCommand>
    2dc0:	03 c0       	rjmp	.+6      	; 0x2dc8 <prvTimerTask+0xb2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2dc2:	8e 7f       	andi	r24, 0xFE	; 254
    2dc4:	f3 01       	movw	r30, r6
    2dc6:	82 8b       	std	Z+18, r24	; 0x12
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2dc8:	d3 01       	movw	r26, r6
    2dca:	50 96       	adiw	r26, 0x10	; 16
    2dcc:	ed 91       	ld	r30, X+
    2dce:	fc 91       	ld	r31, X
    2dd0:	51 97       	sbiw	r26, 0x11	; 17
    2dd2:	c3 01       	movw	r24, r6
    2dd4:	09 95       	icall
    2dd6:	87 c0       	rjmp	.+270    	; 0x2ee6 <prvTimerTask+0x1d0>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expiYellow? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2dd8:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2dda:	b5 01       	movw	r22, r10
    2ddc:	60 1b       	sub	r22, r16
    2dde:	71 0b       	sbc	r23, r17
    2de0:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <xTimerQueue>
    2de4:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <xTimerQueue+0x1>
    2de8:	0e 94 2a 10 	call	0x2054	; 0x2054 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    2dec:	0e 94 11 13 	call	0x2622	; 0x2622 <xTaskResumeAll>
    2df0:	81 11       	cpse	r24, r1
    2df2:	79 c0       	rjmp	.+242    	; 0x2ee6 <prvTimerTask+0x1d0>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    2df4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vPortYield>
    2df8:	76 c0       	rjmp	.+236    	; 0x2ee6 <prvTimerTask+0x1d0>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    2dfa:	0e 94 11 13 	call	0x2622	; 0x2622 <xTaskResumeAll>
    2dfe:	73 c0       	rjmp	.+230    	; 0x2ee6 <prvTimerTask+0x1d0>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	88 23       	and	r24, r24
    2e04:	0c f4       	brge	.+2      	; 0x2e08 <prvTimerTask+0xf2>
    2e06:	6f c0       	rjmp	.+222    	; 0x2ee6 <prvTimerTask+0x1d0>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2e08:	ac 80       	ldd	r10, Y+4	; 0x04
    2e0a:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only Yellowundant when NULL is passed into the macro. */
    2e0c:	f5 01       	movw	r30, r10
    2e0e:	82 85       	ldd	r24, Z+10	; 0x0a
    2e10:	93 85       	ldd	r25, Z+11	; 0x0b
    2e12:	89 2b       	or	r24, r25
    2e14:	21 f0       	breq	.+8      	; 0x2e1e <prvTimerTask+0x108>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e16:	c5 01       	movw	r24, r10
    2e18:	02 96       	adiw	r24, 0x02	; 2
    2e1a:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2e1e:	ce 01       	movw	r24, r28
    2e20:	06 96       	adiw	r24, 0x06	; 6
    2e22:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <prvSampleTimeNow>

            switch( xMessage.xMessageID )
    2e26:	e9 81       	ldd	r30, Y+1	; 0x01
    2e28:	0e 2e       	mov	r0, r30
    2e2a:	00 0c       	add	r0, r0
    2e2c:	ff 0b       	sbc	r31, r31
    2e2e:	ea 30       	cpi	r30, 0x0A	; 10
    2e30:	f1 05       	cpc	r31, r1
    2e32:	08 f0       	brcs	.+2      	; 0x2e36 <prvTimerTask+0x120>
    2e34:	58 c0       	rjmp	.+176    	; 0x2ee6 <prvTimerTask+0x1d0>
    2e36:	ec 5c       	subi	r30, 0xCC	; 204
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	0c 94 62 1f 	jmp	0x3ec4	; 0x3ec4 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2e3e:	d5 01       	movw	r26, r10
    2e40:	52 96       	adiw	r26, 0x12	; 18
    2e42:	2c 91       	ld	r18, X
    2e44:	52 97       	sbiw	r26, 0x12	; 18
    2e46:	21 60       	ori	r18, 0x01	; 1
    2e48:	52 96       	adiw	r26, 0x12	; 18
    2e4a:	2c 93       	st	X, r18
    2e4c:	52 97       	sbiw	r26, 0x12	; 18
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2e4e:	2a 81       	ldd	r18, Y+2	; 0x02
    2e50:	3b 81       	ldd	r19, Y+3	; 0x03
    2e52:	1c 96       	adiw	r26, 0x0c	; 12
    2e54:	6d 91       	ld	r22, X+
    2e56:	7c 91       	ld	r23, X
    2e58:	1d 97       	sbiw	r26, 0x0d	; 13
    2e5a:	62 0f       	add	r22, r18
    2e5c:	73 1f       	adc	r23, r19
    2e5e:	ac 01       	movw	r20, r24
    2e60:	c5 01       	movw	r24, r10
    2e62:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <prvInsertTimerInActiveList>
    2e66:	88 23       	and	r24, r24
    2e68:	f1 f1       	breq	.+124    	; 0x2ee6 <prvTimerTask+0x1d0>
                    {
                        /* The timer expiYellow before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e6a:	d5 01       	movw	r26, r10
    2e6c:	50 96       	adiw	r26, 0x10	; 16
    2e6e:	ed 91       	ld	r30, X+
    2e70:	fc 91       	ld	r31, X
    2e72:	51 97       	sbiw	r26, 0x11	; 17
    2e74:	c5 01       	movw	r24, r10
    2e76:	09 95       	icall
                        traceTIMER_EXPIYellow( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e78:	f5 01       	movw	r30, r10
    2e7a:	82 89       	ldd	r24, Z+18	; 0x12
    2e7c:	82 ff       	sbrs	r24, 2
    2e7e:	33 c0       	rjmp	.+102    	; 0x2ee6 <prvTimerTask+0x1d0>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2e80:	4a 81       	ldd	r20, Y+2	; 0x02
    2e82:	5b 81       	ldd	r21, Y+3	; 0x03
    2e84:	84 85       	ldd	r24, Z+12	; 0x0c
    2e86:	95 85       	ldd	r25, Z+13	; 0x0d
    2e88:	48 0f       	add	r20, r24
    2e8a:	59 1f       	adc	r21, r25
    2e8c:	0e 2d       	mov	r16, r14
    2e8e:	1f 2d       	mov	r17, r15
    2e90:	2e 2d       	mov	r18, r14
    2e92:	3f 2d       	mov	r19, r15
    2e94:	65 2d       	mov	r22, r5
    2e96:	c5 01       	movw	r24, r10
    2e98:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <xTimerGenericCommand>
    2e9c:	24 c0       	rjmp	.+72     	; 0x2ee6 <prvTimerTask+0x1d0>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2e9e:	d5 01       	movw	r26, r10
    2ea0:	52 96       	adiw	r26, 0x12	; 18
    2ea2:	8c 91       	ld	r24, X
    2ea4:	52 97       	sbiw	r26, 0x12	; 18
    2ea6:	8e 7f       	andi	r24, 0xFE	; 254
    2ea8:	52 96       	adiw	r26, 0x12	; 18
    2eaa:	8c 93       	st	X, r24
    2eac:	1c c0       	rjmp	.+56     	; 0x2ee6 <prvTimerTask+0x1d0>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2eae:	f5 01       	movw	r30, r10
    2eb0:	22 89       	ldd	r18, Z+18	; 0x12
    2eb2:	21 60       	ori	r18, 0x01	; 1
    2eb4:	22 8b       	std	Z+18, r18	; 0x12
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2eb6:	6a 81       	ldd	r22, Y+2	; 0x02
    2eb8:	7b 81       	ldd	r23, Y+3	; 0x03
    2eba:	75 87       	std	Z+13, r23	; 0x0d
    2ebc:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2ebe:	68 0f       	add	r22, r24
    2ec0:	79 1f       	adc	r23, r25
    2ec2:	9c 01       	movw	r18, r24
    2ec4:	ac 01       	movw	r20, r24
    2ec6:	c5 01       	movw	r24, r10
    2ec8:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <prvInsertTimerInActiveList>
    2ecc:	0c c0       	rjmp	.+24     	; 0x2ee6 <prvTimerTask+0x1d0>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2ece:	d5 01       	movw	r26, r10
    2ed0:	52 96       	adiw	r26, 0x12	; 18
    2ed2:	8c 91       	ld	r24, X
    2ed4:	81 fd       	sbrc	r24, 1
    2ed6:	04 c0       	rjmp	.+8      	; 0x2ee0 <prvTimerTask+0x1ca>
                        {
                            vPortFree( pxTimer );
    2ed8:	c5 01       	movw	r24, r10
    2eda:	0e 94 ab 0b 	call	0x1756	; 0x1756 <vPortFree>
    2ede:	03 c0       	rjmp	.+6      	; 0x2ee6 <prvTimerTask+0x1d0>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2ee0:	8e 7f       	andi	r24, 0xFE	; 254
    2ee2:	f5 01       	movw	r30, r10
    2ee4:	82 8b       	std	Z+18, r24	; 0x12
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2ee6:	4e 2d       	mov	r20, r14
    2ee8:	5f 2d       	mov	r21, r15
    2eea:	6c 2d       	mov	r22, r12
    2eec:	7d 2d       	mov	r23, r13
    2eee:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <xTimerQueue>
    2ef2:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <xTimerQueue+0x1>
    2ef6:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <xQueueReceive>
    2efa:	81 11       	cpse	r24, r1
    2efc:	81 cf       	rjmp	.-254    	; 0x2e00 <prvTimerTask+0xea>
    2efe:	1c cf       	rjmp	.-456    	; 0x2d38 <prvTimerTask+0x22>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2f00:	0e 94 42 12 	call	0x2484	; 0x2484 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2f04:	c4 01       	movw	r24, r8
    2f06:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <prvSampleTimeNow>
    2f0a:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	81 11       	cpse	r24, r1
    2f10:	74 cf       	rjmp	.-280    	; 0x2dfa <prvTimerTask+0xe4>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2f12:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <pxOverflowTimerList>
    2f16:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <pxOverflowTimerList+0x1>
    2f1a:	80 81       	ld	r24, Z
    2f1c:	44 2d       	mov	r20, r4
    2f1e:	81 11       	cpse	r24, r1
    2f20:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2f22:	ae 2c       	mov	r10, r14
    2f24:	bf 2c       	mov	r11, r15
    2f26:	59 cf       	rjmp	.-334    	; 0x2dda <prvTimerTask+0xc4>

00002f28 <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
    2f28:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2f2c:	88 e4       	ldi	r24, 0x48	; 72
    2f2e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2f32:	08 95       	ret

00002f34 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
    2f34:	94 ea       	ldi	r25, 0xA4	; 164
    2f36:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
    2f3a:	ec eb       	ldi	r30, 0xBC	; 188
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	90 81       	ld	r25, Z
    2f40:	99 23       	and	r25, r25
    2f42:	ec f7       	brge	.-6      	; 0x2f3e <I2C_Repeated_Start+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    2f44:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
    2f48:	98 7f       	andi	r25, 0xF8	; 248
    2f4a:	90 31       	cpi	r25, 0x10	; 16
    2f4c:	99 f4       	brne	.+38     	; 0x2f74 <I2C_Repeated_Start+0x40>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
    2f4e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    2f52:	84 e8       	ldi	r24, 0x84	; 132
    2f54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    2f58:	ec eb       	ldi	r30, 0xBC	; 188
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	88 23       	and	r24, r24
    2f60:	ec f7       	brge	.-6      	; 0x2f5c <I2C_Repeated_Start+0x28>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    2f62:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2f66:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
    2f68:	80 34       	cpi	r24, 0x40	; 64
    2f6a:	31 f0       	breq	.+12     	; 0x2f78 <I2C_Repeated_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
    2f6c:	80 32       	cpi	r24, 0x20	; 32
    2f6e:	31 f0       	breq	.+12     	; 0x2f7c <I2C_Repeated_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
    2f70:	83 e0       	ldi	r24, 0x03	; 3
    2f72:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
    2f7c:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
    2f7e:	08 95       	ret

00002f80 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
    2f80:	84 e9       	ldi	r24, 0x94	; 148
    2f82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
    2f86:	ec eb       	ldi	r30, 0xBC	; 188
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	84 fd       	sbrc	r24, 4
    2f8e:	fd cf       	rjmp	.-6      	; 0x2f8a <I2C_Stop+0xa>
}
    2f90:	08 95       	ret

00002f92 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
    2f92:	bf 92       	push	r11
    2f94:	cf 92       	push	r12
    2f96:	df 92       	push	r13
    2f98:	ef 92       	push	r14
    2f9a:	ff 92       	push	r15
    2f9c:	0f 93       	push	r16
    2f9e:	1f 93       	push	r17
    2fa0:	cf 93       	push	r28
    2fa2:	df 93       	push	r29
    2fa4:	b8 2e       	mov	r11, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    2fa6:	cc eb       	ldi	r28, 0xBC	; 188
    2fa8:	d0 e0       	ldi	r29, 0x00	; 0
    2faa:	0f 2e       	mov	r0, r31
    2fac:	f4 ea       	ldi	r31, 0xA4	; 164
    2fae:	df 2e       	mov	r13, r31
    2fb0:	f0 2d       	mov	r31, r0
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    2fb2:	09 eb       	ldi	r16, 0xB9	; 185
    2fb4:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
    2fb6:	0f 2e       	mov	r0, r31
    2fb8:	fb eb       	ldi	r31, 0xBB	; 187
    2fba:	ef 2e       	mov	r14, r31
    2fbc:	f1 2c       	mov	r15, r1
    2fbe:	f0 2d       	mov	r31, r0
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    2fc0:	0f 2e       	mov	r0, r31
    2fc2:	f4 e8       	ldi	r31, 0x84	; 132
    2fc4:	cf 2e       	mov	r12, r31
    2fc6:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    2fc8:	d8 82       	st	Y, r13
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
    2fca:	88 81       	ld	r24, Y
    2fcc:	88 23       	and	r24, r24
    2fce:	ec f7       	brge	.-6      	; 0x2fca <I2C_Start_Wait+0x38>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    2fd0:	f8 01       	movw	r30, r16
    2fd2:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
    2fd4:	88 7f       	andi	r24, 0xF8	; 248
    2fd6:	88 30       	cpi	r24, 0x08	; 8
    2fd8:	b9 f7       	brne	.-18     	; 0x2fc8 <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
    2fda:	f7 01       	movw	r30, r14
    2fdc:	b0 82       	st	Z, r11
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    2fde:	c8 82       	st	Y, r12
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
    2fe0:	88 81       	ld	r24, Y
    2fe2:	88 23       	and	r24, r24
    2fe4:	ec f7       	brge	.-6      	; 0x2fe0 <I2C_Start_Wait+0x4e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    2fe6:	f8 01       	movw	r30, r16
    2fe8:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
    2fea:	88 7f       	andi	r24, 0xF8	; 248
    2fec:	88 31       	cpi	r24, 0x18	; 24
    2fee:	19 f0       	breq	.+6      	; 0x2ff6 <I2C_Start_Wait+0x64>
		{
			I2C_Stop();										/* If not then generate stop condition */
    2ff0:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <I2C_Stop>
			continue;										/* continue with start loop again */
    2ff4:	e9 cf       	rjmp	.-46     	; 0x2fc8 <I2C_Start_Wait+0x36>
		}
		break;												/* If yes then break loop */
	}
}
    2ff6:	df 91       	pop	r29
    2ff8:	cf 91       	pop	r28
    2ffa:	1f 91       	pop	r17
    2ffc:	0f 91       	pop	r16
    2ffe:	ff 90       	pop	r15
    3000:	ef 90       	pop	r14
    3002:	df 90       	pop	r13
    3004:	cf 90       	pop	r12
    3006:	bf 90       	pop	r11
    3008:	08 95       	ret

0000300a <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
    300a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    300e:	84 e8       	ldi	r24, 0x84	; 132
    3010:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    3014:	ec eb       	ldi	r30, 0xBC	; 188
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	88 23       	and	r24, r24
    301c:	ec f7       	brge	.-6      	; 0x3018 <I2C_Write+0xe>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    301e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    3022:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
    3024:	88 32       	cpi	r24, 0x28	; 40
    3026:	21 f0       	breq	.+8      	; 0x3030 <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
    3028:	80 33       	cpi	r24, 0x30	; 48
    302a:	21 f0       	breq	.+8      	; 0x3034 <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
    302c:	82 e0       	ldi	r24, 0x02	; 2
    302e:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
    3034:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
    3036:	08 95       	ret

00003038 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
    3038:	84 ec       	ldi	r24, 0xC4	; 196
    303a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    303e:	ec eb       	ldi	r30, 0xBC	; 188
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	88 23       	and	r24, r24
    3046:	ec f7       	brge	.-6      	; 0x3042 <I2C_Read_Ack+0xa>
	return TWDR;											/* Return received data */
    3048:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
    304c:	08 95       	ret

0000304e <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
    304e:	84 e8       	ldi	r24, 0x84	; 132
    3050:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    3054:	ec eb       	ldi	r30, 0xBC	; 188
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	88 23       	and	r24, r24
    305c:	ec f7       	brge	.-6      	; 0x3058 <I2C_Read_Nack+0xa>
	return TWDR;											/* Return received data */
    305e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
    3062:	08 95       	ret

00003064 <UART_init>:

void UART_init(int BAUD_PRESCALER)
{
  
  /*Set baud rate */
  UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
    3064:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  UBRR0L = (unsigned char)BAUD_PRESCALER;
    3068:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  //Enable receiver and transmitter 
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    306c:	88 e1       	ldi	r24, 0x18	; 24
    306e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  /* Set frame format: 2 stop bits, 8 data bits */
  UCSR0C |= (1<<USBS0); // 2 stop bits
    3072:	e2 ec       	ldi	r30, 0xC2	; 194
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	80 81       	ld	r24, Z
    3078:	88 60       	ori	r24, 0x08	; 8
    307a:	80 83       	st	Z, r24
  UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
    307c:	86 e0       	ldi	r24, 0x06	; 6
    307e:	80 83       	st	Z, r24
    3080:	08 95       	ret

00003082 <UART_send>:
}

void UART_send(unsigned char data)
{
  // Wait for empty transmit buffer
  while(!(UCSR0A & (1<<UDRE0)));
    3082:	e0 ec       	ldi	r30, 0xC0	; 192
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	90 81       	ld	r25, Z
    3088:	95 ff       	sbrs	r25, 5
    308a:	fd cf       	rjmp	.-6      	; 0x3086 <UART_send+0x4>
  // Put data into buffer and send data
  UDR0 = data;
    308c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    3090:	08 95       	ret

00003092 <UART_putstring>:
  
}

void UART_putstring(char* StringPtr)
{
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	ec 01       	movw	r28, r24
  while(*StringPtr != 0x00)
    3098:	88 81       	ld	r24, Y
    309a:	88 23       	and	r24, r24
    309c:	31 f0       	breq	.+12     	; 0x30aa <UART_putstring+0x18>
    309e:	21 96       	adiw	r28, 0x01	; 1
  {
    UART_send(*StringPtr);
    30a0:	0e 94 41 18 	call	0x3082	; 0x3082 <UART_send>
  
}

void UART_putstring(char* StringPtr)
{
  while(*StringPtr != 0x00)
    30a4:	89 91       	ld	r24, Y+
    30a6:	81 11       	cpse	r24, r1
    30a8:	fb cf       	rjmp	.-10     	; 0x30a0 <UART_putstring+0xe>
  {
    UART_send(*StringPtr);
  StringPtr++;
  }
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	08 95       	ret

000030b0 <__subsf3>:
    30b0:	50 58       	subi	r21, 0x80	; 128

000030b2 <__addsf3>:
    30b2:	bb 27       	eor	r27, r27
    30b4:	aa 27       	eor	r26, r26
    30b6:	0e 94 70 18 	call	0x30e0	; 0x30e0 <__addsf3x>
    30ba:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__fp_round>
    30be:	0e 94 c4 1a 	call	0x3588	; 0x3588 <__fp_pscA>
    30c2:	38 f0       	brcs	.+14     	; 0x30d2 <__addsf3+0x20>
    30c4:	0e 94 cb 1a 	call	0x3596	; 0x3596 <__fp_pscB>
    30c8:	20 f0       	brcs	.+8      	; 0x30d2 <__addsf3+0x20>
    30ca:	39 f4       	brne	.+14     	; 0x30da <__addsf3+0x28>
    30cc:	9f 3f       	cpi	r25, 0xFF	; 255
    30ce:	19 f4       	brne	.+6      	; 0x30d6 <__addsf3+0x24>
    30d0:	26 f4       	brtc	.+8      	; 0x30da <__addsf3+0x28>
    30d2:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__fp_nan>
    30d6:	0e f4       	brtc	.+2      	; 0x30da <__addsf3+0x28>
    30d8:	e0 95       	com	r30
    30da:	e7 fb       	bst	r30, 7
    30dc:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__fp_inf>

000030e0 <__addsf3x>:
    30e0:	e9 2f       	mov	r30, r25
    30e2:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__fp_split3>
    30e6:	58 f3       	brcs	.-42     	; 0x30be <__addsf3+0xc>
    30e8:	ba 17       	cp	r27, r26
    30ea:	62 07       	cpc	r22, r18
    30ec:	73 07       	cpc	r23, r19
    30ee:	84 07       	cpc	r24, r20
    30f0:	95 07       	cpc	r25, r21
    30f2:	20 f0       	brcs	.+8      	; 0x30fc <__addsf3x+0x1c>
    30f4:	79 f4       	brne	.+30     	; 0x3114 <__addsf3x+0x34>
    30f6:	a6 f5       	brtc	.+104    	; 0x3160 <__addsf3x+0x80>
    30f8:	0c 94 05 1b 	jmp	0x360a	; 0x360a <__fp_zero>
    30fc:	0e f4       	brtc	.+2      	; 0x3100 <__addsf3x+0x20>
    30fe:	e0 95       	com	r30
    3100:	0b 2e       	mov	r0, r27
    3102:	ba 2f       	mov	r27, r26
    3104:	a0 2d       	mov	r26, r0
    3106:	0b 01       	movw	r0, r22
    3108:	b9 01       	movw	r22, r18
    310a:	90 01       	movw	r18, r0
    310c:	0c 01       	movw	r0, r24
    310e:	ca 01       	movw	r24, r20
    3110:	a0 01       	movw	r20, r0
    3112:	11 24       	eor	r1, r1
    3114:	ff 27       	eor	r31, r31
    3116:	59 1b       	sub	r21, r25
    3118:	99 f0       	breq	.+38     	; 0x3140 <__addsf3x+0x60>
    311a:	59 3f       	cpi	r21, 0xF9	; 249
    311c:	50 f4       	brcc	.+20     	; 0x3132 <__addsf3x+0x52>
    311e:	50 3e       	cpi	r21, 0xE0	; 224
    3120:	68 f1       	brcs	.+90     	; 0x317c <__addsf3x+0x9c>
    3122:	1a 16       	cp	r1, r26
    3124:	f0 40       	sbci	r31, 0x00	; 0
    3126:	a2 2f       	mov	r26, r18
    3128:	23 2f       	mov	r18, r19
    312a:	34 2f       	mov	r19, r20
    312c:	44 27       	eor	r20, r20
    312e:	58 5f       	subi	r21, 0xF8	; 248
    3130:	f3 cf       	rjmp	.-26     	; 0x3118 <__addsf3x+0x38>
    3132:	46 95       	lsr	r20
    3134:	37 95       	ror	r19
    3136:	27 95       	ror	r18
    3138:	a7 95       	ror	r26
    313a:	f0 40       	sbci	r31, 0x00	; 0
    313c:	53 95       	inc	r21
    313e:	c9 f7       	brne	.-14     	; 0x3132 <__addsf3x+0x52>
    3140:	7e f4       	brtc	.+30     	; 0x3160 <__addsf3x+0x80>
    3142:	1f 16       	cp	r1, r31
    3144:	ba 0b       	sbc	r27, r26
    3146:	62 0b       	sbc	r22, r18
    3148:	73 0b       	sbc	r23, r19
    314a:	84 0b       	sbc	r24, r20
    314c:	ba f0       	brmi	.+46     	; 0x317c <__addsf3x+0x9c>
    314e:	91 50       	subi	r25, 0x01	; 1
    3150:	a1 f0       	breq	.+40     	; 0x317a <__addsf3x+0x9a>
    3152:	ff 0f       	add	r31, r31
    3154:	bb 1f       	adc	r27, r27
    3156:	66 1f       	adc	r22, r22
    3158:	77 1f       	adc	r23, r23
    315a:	88 1f       	adc	r24, r24
    315c:	c2 f7       	brpl	.-16     	; 0x314e <__addsf3x+0x6e>
    315e:	0e c0       	rjmp	.+28     	; 0x317c <__addsf3x+0x9c>
    3160:	ba 0f       	add	r27, r26
    3162:	62 1f       	adc	r22, r18
    3164:	73 1f       	adc	r23, r19
    3166:	84 1f       	adc	r24, r20
    3168:	48 f4       	brcc	.+18     	; 0x317c <__addsf3x+0x9c>
    316a:	87 95       	ror	r24
    316c:	77 95       	ror	r23
    316e:	67 95       	ror	r22
    3170:	b7 95       	ror	r27
    3172:	f7 95       	ror	r31
    3174:	9e 3f       	cpi	r25, 0xFE	; 254
    3176:	08 f0       	brcs	.+2      	; 0x317a <__addsf3x+0x9a>
    3178:	b0 cf       	rjmp	.-160    	; 0x30da <__addsf3+0x28>
    317a:	93 95       	inc	r25
    317c:	88 0f       	add	r24, r24
    317e:	08 f0       	brcs	.+2      	; 0x3182 <__addsf3x+0xa2>
    3180:	99 27       	eor	r25, r25
    3182:	ee 0f       	add	r30, r30
    3184:	97 95       	ror	r25
    3186:	87 95       	ror	r24
    3188:	08 95       	ret

0000318a <asin>:
    318a:	9f 93       	push	r25
    318c:	9f 77       	andi	r25, 0x7F	; 127
    318e:	ee e3       	ldi	r30, 0x3E	; 62
    3190:	89 37       	cpi	r24, 0x79	; 121
    3192:	9e 07       	cpc	r25, r30
    3194:	28 f4       	brcc	.+10     	; 0x31a0 <asin+0x16>
    3196:	ec e7       	ldi	r30, 0x7C	; 124
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	0e 94 b0 1a 	call	0x3560	; 0x3560 <__fp_powsodd>
    319e:	0c c0       	rjmp	.+24     	; 0x31b8 <asin+0x2e>
    31a0:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__fp_arccos>
    31a4:	90 58       	subi	r25, 0x80	; 128
    31a6:	a2 ea       	ldi	r26, 0xA2	; 162
    31a8:	2a ed       	ldi	r18, 0xDA	; 218
    31aa:	3f e0       	ldi	r19, 0x0F	; 15
    31ac:	49 ec       	ldi	r20, 0xC9	; 201
    31ae:	5f e3       	ldi	r21, 0x3F	; 63
    31b0:	0e 94 70 18 	call	0x30e0	; 0x30e0 <__addsf3x>
    31b4:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <__fp_round>
    31b8:	0f 90       	pop	r0
    31ba:	07 fc       	sbrc	r0, 7
    31bc:	90 58       	subi	r25, 0x80	; 128
    31be:	08 95       	ret
    31c0:	0e 94 c4 1a 	call	0x3588	; 0x3588 <__fp_pscA>
    31c4:	60 f0       	brcs	.+24     	; 0x31de <asin+0x54>
    31c6:	80 e8       	ldi	r24, 0x80	; 128
    31c8:	91 e0       	ldi	r25, 0x01	; 1
    31ca:	09 f4       	brne	.+2      	; 0x31ce <asin+0x44>
    31cc:	9e ef       	ldi	r25, 0xFE	; 254
    31ce:	0e 94 cb 1a 	call	0x3596	; 0x3596 <__fp_pscB>
    31d2:	28 f0       	brcs	.+10     	; 0x31de <asin+0x54>
    31d4:	40 e8       	ldi	r20, 0x80	; 128
    31d6:	51 e0       	ldi	r21, 0x01	; 1
    31d8:	71 f4       	brne	.+28     	; 0x31f6 <atan2+0x10>
    31da:	5e ef       	ldi	r21, 0xFE	; 254
    31dc:	0c c0       	rjmp	.+24     	; 0x31f6 <atan2+0x10>
    31de:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__fp_nan>
    31e2:	0c 94 05 1b 	jmp	0x360a	; 0x360a <__fp_zero>

000031e6 <atan2>:
    31e6:	e9 2f       	mov	r30, r25
    31e8:	e0 78       	andi	r30, 0x80	; 128
    31ea:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__fp_split3>
    31ee:	40 f3       	brcs	.-48     	; 0x31c0 <asin+0x36>
    31f0:	09 2e       	mov	r0, r25
    31f2:	05 2a       	or	r0, r21
    31f4:	b1 f3       	breq	.-20     	; 0x31e2 <asin+0x58>
    31f6:	26 17       	cp	r18, r22
    31f8:	37 07       	cpc	r19, r23
    31fa:	48 07       	cpc	r20, r24
    31fc:	59 07       	cpc	r21, r25
    31fe:	38 f0       	brcs	.+14     	; 0x320e <atan2+0x28>
    3200:	0e 2e       	mov	r0, r30
    3202:	07 f8       	bld	r0, 7
    3204:	e0 25       	eor	r30, r0
    3206:	69 f0       	breq	.+26     	; 0x3222 <atan2+0x3c>
    3208:	e0 25       	eor	r30, r0
    320a:	e0 64       	ori	r30, 0x40	; 64
    320c:	0a c0       	rjmp	.+20     	; 0x3222 <atan2+0x3c>
    320e:	ef 63       	ori	r30, 0x3F	; 63
    3210:	07 f8       	bld	r0, 7
    3212:	00 94       	com	r0
    3214:	07 fa       	bst	r0, 7
    3216:	db 01       	movw	r26, r22
    3218:	b9 01       	movw	r22, r18
    321a:	9d 01       	movw	r18, r26
    321c:	dc 01       	movw	r26, r24
    321e:	ca 01       	movw	r24, r20
    3220:	ad 01       	movw	r20, r26
    3222:	ef 93       	push	r30
    3224:	0e 94 6e 19 	call	0x32dc	; 0x32dc <__divsf3_pse>
    3228:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <__fp_round>
    322c:	0e 94 23 19 	call	0x3246	; 0x3246 <atan>
    3230:	5f 91       	pop	r21
    3232:	55 23       	and	r21, r21
    3234:	39 f0       	breq	.+14     	; 0x3244 <atan2+0x5e>
    3236:	2b ed       	ldi	r18, 0xDB	; 219
    3238:	3f e0       	ldi	r19, 0x0F	; 15
    323a:	49 e4       	ldi	r20, 0x49	; 73
    323c:	50 fd       	sbrc	r21, 0
    323e:	49 ec       	ldi	r20, 0xC9	; 201
    3240:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__addsf3>
    3244:	08 95       	ret

00003246 <atan>:
    3246:	df 93       	push	r29
    3248:	dd 27       	eor	r29, r29
    324a:	b9 2f       	mov	r27, r25
    324c:	bf 77       	andi	r27, 0x7F	; 127
    324e:	40 e8       	ldi	r20, 0x80	; 128
    3250:	5f e3       	ldi	r21, 0x3F	; 63
    3252:	16 16       	cp	r1, r22
    3254:	17 06       	cpc	r1, r23
    3256:	48 07       	cpc	r20, r24
    3258:	5b 07       	cpc	r21, r27
    325a:	18 f4       	brcc	.+6      	; 0x3262 <atan+0x1c>
    325c:	d9 2f       	mov	r29, r25
    325e:	0e 94 11 1b 	call	0x3622	; 0x3622 <inverse>
    3262:	9f 93       	push	r25
    3264:	8f 93       	push	r24
    3266:	7f 93       	push	r23
    3268:	6f 93       	push	r22
    326a:	0e 94 cc 1b 	call	0x3798	; 0x3798 <square>
    326e:	e0 e9       	ldi	r30, 0x90	; 144
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	0e 94 89 1a 	call	0x3512	; 0x3512 <__fp_powser>
    3276:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <__fp_round>
    327a:	2f 91       	pop	r18
    327c:	3f 91       	pop	r19
    327e:	4f 91       	pop	r20
    3280:	5f 91       	pop	r21
    3282:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__mulsf3x>
    3286:	dd 23       	and	r29, r29
    3288:	51 f0       	breq	.+20     	; 0x329e <atan+0x58>
    328a:	90 58       	subi	r25, 0x80	; 128
    328c:	a2 ea       	ldi	r26, 0xA2	; 162
    328e:	2a ed       	ldi	r18, 0xDA	; 218
    3290:	3f e0       	ldi	r19, 0x0F	; 15
    3292:	49 ec       	ldi	r20, 0xC9	; 201
    3294:	5f e3       	ldi	r21, 0x3F	; 63
    3296:	d0 78       	andi	r29, 0x80	; 128
    3298:	5d 27       	eor	r21, r29
    329a:	0e 94 70 18 	call	0x30e0	; 0x30e0 <__addsf3x>
    329e:	df 91       	pop	r29
    32a0:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__fp_round>

000032a4 <__cmpsf2>:
    32a4:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__fp_cmp>
    32a8:	08 f4       	brcc	.+2      	; 0x32ac <__cmpsf2+0x8>
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	08 95       	ret

000032ae <__divsf3>:
    32ae:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__divsf3x>
    32b2:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__fp_round>
    32b6:	0e 94 cb 1a 	call	0x3596	; 0x3596 <__fp_pscB>
    32ba:	58 f0       	brcs	.+22     	; 0x32d2 <__divsf3+0x24>
    32bc:	0e 94 c4 1a 	call	0x3588	; 0x3588 <__fp_pscA>
    32c0:	40 f0       	brcs	.+16     	; 0x32d2 <__divsf3+0x24>
    32c2:	29 f4       	brne	.+10     	; 0x32ce <__divsf3+0x20>
    32c4:	5f 3f       	cpi	r21, 0xFF	; 255
    32c6:	29 f0       	breq	.+10     	; 0x32d2 <__divsf3+0x24>
    32c8:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__fp_inf>
    32cc:	51 11       	cpse	r21, r1
    32ce:	0c 94 06 1b 	jmp	0x360c	; 0x360c <__fp_szero>
    32d2:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__fp_nan>

000032d6 <__divsf3x>:
    32d6:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__fp_split3>
    32da:	68 f3       	brcs	.-38     	; 0x32b6 <__divsf3+0x8>

000032dc <__divsf3_pse>:
    32dc:	99 23       	and	r25, r25
    32de:	b1 f3       	breq	.-20     	; 0x32cc <__divsf3+0x1e>
    32e0:	55 23       	and	r21, r21
    32e2:	91 f3       	breq	.-28     	; 0x32c8 <__divsf3+0x1a>
    32e4:	95 1b       	sub	r25, r21
    32e6:	55 0b       	sbc	r21, r21
    32e8:	bb 27       	eor	r27, r27
    32ea:	aa 27       	eor	r26, r26
    32ec:	62 17       	cp	r22, r18
    32ee:	73 07       	cpc	r23, r19
    32f0:	84 07       	cpc	r24, r20
    32f2:	38 f0       	brcs	.+14     	; 0x3302 <__divsf3_pse+0x26>
    32f4:	9f 5f       	subi	r25, 0xFF	; 255
    32f6:	5f 4f       	sbci	r21, 0xFF	; 255
    32f8:	22 0f       	add	r18, r18
    32fa:	33 1f       	adc	r19, r19
    32fc:	44 1f       	adc	r20, r20
    32fe:	aa 1f       	adc	r26, r26
    3300:	a9 f3       	breq	.-22     	; 0x32ec <__divsf3_pse+0x10>
    3302:	35 d0       	rcall	.+106    	; 0x336e <__divsf3_pse+0x92>
    3304:	0e 2e       	mov	r0, r30
    3306:	3a f0       	brmi	.+14     	; 0x3316 <__divsf3_pse+0x3a>
    3308:	e0 e8       	ldi	r30, 0x80	; 128
    330a:	32 d0       	rcall	.+100    	; 0x3370 <__divsf3_pse+0x94>
    330c:	91 50       	subi	r25, 0x01	; 1
    330e:	50 40       	sbci	r21, 0x00	; 0
    3310:	e6 95       	lsr	r30
    3312:	00 1c       	adc	r0, r0
    3314:	ca f7       	brpl	.-14     	; 0x3308 <__divsf3_pse+0x2c>
    3316:	2b d0       	rcall	.+86     	; 0x336e <__divsf3_pse+0x92>
    3318:	fe 2f       	mov	r31, r30
    331a:	29 d0       	rcall	.+82     	; 0x336e <__divsf3_pse+0x92>
    331c:	66 0f       	add	r22, r22
    331e:	77 1f       	adc	r23, r23
    3320:	88 1f       	adc	r24, r24
    3322:	bb 1f       	adc	r27, r27
    3324:	26 17       	cp	r18, r22
    3326:	37 07       	cpc	r19, r23
    3328:	48 07       	cpc	r20, r24
    332a:	ab 07       	cpc	r26, r27
    332c:	b0 e8       	ldi	r27, 0x80	; 128
    332e:	09 f0       	breq	.+2      	; 0x3332 <__divsf3_pse+0x56>
    3330:	bb 0b       	sbc	r27, r27
    3332:	80 2d       	mov	r24, r0
    3334:	bf 01       	movw	r22, r30
    3336:	ff 27       	eor	r31, r31
    3338:	93 58       	subi	r25, 0x83	; 131
    333a:	5f 4f       	sbci	r21, 0xFF	; 255
    333c:	3a f0       	brmi	.+14     	; 0x334c <__divsf3_pse+0x70>
    333e:	9e 3f       	cpi	r25, 0xFE	; 254
    3340:	51 05       	cpc	r21, r1
    3342:	78 f0       	brcs	.+30     	; 0x3362 <__divsf3_pse+0x86>
    3344:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__fp_inf>
    3348:	0c 94 06 1b 	jmp	0x360c	; 0x360c <__fp_szero>
    334c:	5f 3f       	cpi	r21, 0xFF	; 255
    334e:	e4 f3       	brlt	.-8      	; 0x3348 <__divsf3_pse+0x6c>
    3350:	98 3e       	cpi	r25, 0xE8	; 232
    3352:	d4 f3       	brlt	.-12     	; 0x3348 <__divsf3_pse+0x6c>
    3354:	86 95       	lsr	r24
    3356:	77 95       	ror	r23
    3358:	67 95       	ror	r22
    335a:	b7 95       	ror	r27
    335c:	f7 95       	ror	r31
    335e:	9f 5f       	subi	r25, 0xFF	; 255
    3360:	c9 f7       	brne	.-14     	; 0x3354 <__divsf3_pse+0x78>
    3362:	88 0f       	add	r24, r24
    3364:	91 1d       	adc	r25, r1
    3366:	96 95       	lsr	r25
    3368:	87 95       	ror	r24
    336a:	97 f9       	bld	r25, 7
    336c:	08 95       	ret
    336e:	e1 e0       	ldi	r30, 0x01	; 1
    3370:	66 0f       	add	r22, r22
    3372:	77 1f       	adc	r23, r23
    3374:	88 1f       	adc	r24, r24
    3376:	bb 1f       	adc	r27, r27
    3378:	62 17       	cp	r22, r18
    337a:	73 07       	cpc	r23, r19
    337c:	84 07       	cpc	r24, r20
    337e:	ba 07       	cpc	r27, r26
    3380:	20 f0       	brcs	.+8      	; 0x338a <__divsf3_pse+0xae>
    3382:	62 1b       	sub	r22, r18
    3384:	73 0b       	sbc	r23, r19
    3386:	84 0b       	sbc	r24, r20
    3388:	ba 0b       	sbc	r27, r26
    338a:	ee 1f       	adc	r30, r30
    338c:	88 f7       	brcc	.-30     	; 0x3370 <__divsf3_pse+0x94>
    338e:	e0 95       	com	r30
    3390:	08 95       	ret

00003392 <__fixsfsi>:
    3392:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <__fixunssfsi>
    3396:	68 94       	set
    3398:	b1 11       	cpse	r27, r1
    339a:	0c 94 06 1b 	jmp	0x360c	; 0x360c <__fp_szero>
    339e:	08 95       	ret

000033a0 <__fixunssfsi>:
    33a0:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__fp_splitA>
    33a4:	88 f0       	brcs	.+34     	; 0x33c8 <__fixunssfsi+0x28>
    33a6:	9f 57       	subi	r25, 0x7F	; 127
    33a8:	98 f0       	brcs	.+38     	; 0x33d0 <__fixunssfsi+0x30>
    33aa:	b9 2f       	mov	r27, r25
    33ac:	99 27       	eor	r25, r25
    33ae:	b7 51       	subi	r27, 0x17	; 23
    33b0:	b0 f0       	brcs	.+44     	; 0x33de <__fixunssfsi+0x3e>
    33b2:	e1 f0       	breq	.+56     	; 0x33ec <__fixunssfsi+0x4c>
    33b4:	66 0f       	add	r22, r22
    33b6:	77 1f       	adc	r23, r23
    33b8:	88 1f       	adc	r24, r24
    33ba:	99 1f       	adc	r25, r25
    33bc:	1a f0       	brmi	.+6      	; 0x33c4 <__fixunssfsi+0x24>
    33be:	ba 95       	dec	r27
    33c0:	c9 f7       	brne	.-14     	; 0x33b4 <__fixunssfsi+0x14>
    33c2:	14 c0       	rjmp	.+40     	; 0x33ec <__fixunssfsi+0x4c>
    33c4:	b1 30       	cpi	r27, 0x01	; 1
    33c6:	91 f0       	breq	.+36     	; 0x33ec <__fixunssfsi+0x4c>
    33c8:	0e 94 05 1b 	call	0x360a	; 0x360a <__fp_zero>
    33cc:	b1 e0       	ldi	r27, 0x01	; 1
    33ce:	08 95       	ret
    33d0:	0c 94 05 1b 	jmp	0x360a	; 0x360a <__fp_zero>
    33d4:	67 2f       	mov	r22, r23
    33d6:	78 2f       	mov	r23, r24
    33d8:	88 27       	eor	r24, r24
    33da:	b8 5f       	subi	r27, 0xF8	; 248
    33dc:	39 f0       	breq	.+14     	; 0x33ec <__fixunssfsi+0x4c>
    33de:	b9 3f       	cpi	r27, 0xF9	; 249
    33e0:	cc f3       	brlt	.-14     	; 0x33d4 <__fixunssfsi+0x34>
    33e2:	86 95       	lsr	r24
    33e4:	77 95       	ror	r23
    33e6:	67 95       	ror	r22
    33e8:	b3 95       	inc	r27
    33ea:	d9 f7       	brne	.-10     	; 0x33e2 <__fixunssfsi+0x42>
    33ec:	3e f4       	brtc	.+14     	; 0x33fc <__fixunssfsi+0x5c>
    33ee:	90 95       	com	r25
    33f0:	80 95       	com	r24
    33f2:	70 95       	com	r23
    33f4:	61 95       	neg	r22
    33f6:	7f 4f       	sbci	r23, 0xFF	; 255
    33f8:	8f 4f       	sbci	r24, 0xFF	; 255
    33fa:	9f 4f       	sbci	r25, 0xFF	; 255
    33fc:	08 95       	ret

000033fe <__floatunsisf>:
    33fe:	e8 94       	clt
    3400:	09 c0       	rjmp	.+18     	; 0x3414 <__floatsisf+0x12>

00003402 <__floatsisf>:
    3402:	97 fb       	bst	r25, 7
    3404:	3e f4       	brtc	.+14     	; 0x3414 <__floatsisf+0x12>
    3406:	90 95       	com	r25
    3408:	80 95       	com	r24
    340a:	70 95       	com	r23
    340c:	61 95       	neg	r22
    340e:	7f 4f       	sbci	r23, 0xFF	; 255
    3410:	8f 4f       	sbci	r24, 0xFF	; 255
    3412:	9f 4f       	sbci	r25, 0xFF	; 255
    3414:	99 23       	and	r25, r25
    3416:	a9 f0       	breq	.+42     	; 0x3442 <__floatsisf+0x40>
    3418:	f9 2f       	mov	r31, r25
    341a:	96 e9       	ldi	r25, 0x96	; 150
    341c:	bb 27       	eor	r27, r27
    341e:	93 95       	inc	r25
    3420:	f6 95       	lsr	r31
    3422:	87 95       	ror	r24
    3424:	77 95       	ror	r23
    3426:	67 95       	ror	r22
    3428:	b7 95       	ror	r27
    342a:	f1 11       	cpse	r31, r1
    342c:	f8 cf       	rjmp	.-16     	; 0x341e <__floatsisf+0x1c>
    342e:	fa f4       	brpl	.+62     	; 0x346e <__floatsisf+0x6c>
    3430:	bb 0f       	add	r27, r27
    3432:	11 f4       	brne	.+4      	; 0x3438 <__floatsisf+0x36>
    3434:	60 ff       	sbrs	r22, 0
    3436:	1b c0       	rjmp	.+54     	; 0x346e <__floatsisf+0x6c>
    3438:	6f 5f       	subi	r22, 0xFF	; 255
    343a:	7f 4f       	sbci	r23, 0xFF	; 255
    343c:	8f 4f       	sbci	r24, 0xFF	; 255
    343e:	9f 4f       	sbci	r25, 0xFF	; 255
    3440:	16 c0       	rjmp	.+44     	; 0x346e <__floatsisf+0x6c>
    3442:	88 23       	and	r24, r24
    3444:	11 f0       	breq	.+4      	; 0x344a <__floatsisf+0x48>
    3446:	96 e9       	ldi	r25, 0x96	; 150
    3448:	11 c0       	rjmp	.+34     	; 0x346c <__floatsisf+0x6a>
    344a:	77 23       	and	r23, r23
    344c:	21 f0       	breq	.+8      	; 0x3456 <__floatsisf+0x54>
    344e:	9e e8       	ldi	r25, 0x8E	; 142
    3450:	87 2f       	mov	r24, r23
    3452:	76 2f       	mov	r23, r22
    3454:	05 c0       	rjmp	.+10     	; 0x3460 <__floatsisf+0x5e>
    3456:	66 23       	and	r22, r22
    3458:	71 f0       	breq	.+28     	; 0x3476 <__floatsisf+0x74>
    345a:	96 e8       	ldi	r25, 0x86	; 134
    345c:	86 2f       	mov	r24, r22
    345e:	70 e0       	ldi	r23, 0x00	; 0
    3460:	60 e0       	ldi	r22, 0x00	; 0
    3462:	2a f0       	brmi	.+10     	; 0x346e <__floatsisf+0x6c>
    3464:	9a 95       	dec	r25
    3466:	66 0f       	add	r22, r22
    3468:	77 1f       	adc	r23, r23
    346a:	88 1f       	adc	r24, r24
    346c:	da f7       	brpl	.-10     	; 0x3464 <__floatsisf+0x62>
    346e:	88 0f       	add	r24, r24
    3470:	96 95       	lsr	r25
    3472:	87 95       	ror	r24
    3474:	97 f9       	bld	r25, 7
    3476:	08 95       	ret

00003478 <__fp_arccos>:
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	1f 93       	push	r17
    347e:	0f 93       	push	r16
    3480:	8b 01       	movw	r16, r22
    3482:	ec 01       	movw	r28, r24
    3484:	ed eb       	ldi	r30, 0xBD	; 189
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	0e 94 89 1a 	call	0x3512	; 0x3512 <__fp_powser>
    348c:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <__fp_round>
    3490:	98 01       	movw	r18, r16
    3492:	ae 01       	movw	r20, r28
    3494:	8b 01       	movw	r16, r22
    3496:	ec 01       	movw	r28, r24
    3498:	60 e0       	ldi	r22, 0x00	; 0
    349a:	70 e0       	ldi	r23, 0x00	; 0
    349c:	80 e8       	ldi	r24, 0x80	; 128
    349e:	9f e3       	ldi	r25, 0x3F	; 63
    34a0:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__subsf3>
    34a4:	0e 94 8c 1b 	call	0x3718	; 0x3718 <sqrt>
    34a8:	98 01       	movw	r18, r16
    34aa:	ae 01       	movw	r20, r28
    34ac:	0f 91       	pop	r16
    34ae:	1f 91       	pop	r17
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <__mulsf3x>

000034b8 <__fp_cmp>:
    34b8:	99 0f       	add	r25, r25
    34ba:	00 08       	sbc	r0, r0
    34bc:	55 0f       	add	r21, r21
    34be:	aa 0b       	sbc	r26, r26
    34c0:	e0 e8       	ldi	r30, 0x80	; 128
    34c2:	fe ef       	ldi	r31, 0xFE	; 254
    34c4:	16 16       	cp	r1, r22
    34c6:	17 06       	cpc	r1, r23
    34c8:	e8 07       	cpc	r30, r24
    34ca:	f9 07       	cpc	r31, r25
    34cc:	c0 f0       	brcs	.+48     	; 0x34fe <__fp_cmp+0x46>
    34ce:	12 16       	cp	r1, r18
    34d0:	13 06       	cpc	r1, r19
    34d2:	e4 07       	cpc	r30, r20
    34d4:	f5 07       	cpc	r31, r21
    34d6:	98 f0       	brcs	.+38     	; 0x34fe <__fp_cmp+0x46>
    34d8:	62 1b       	sub	r22, r18
    34da:	73 0b       	sbc	r23, r19
    34dc:	84 0b       	sbc	r24, r20
    34de:	95 0b       	sbc	r25, r21
    34e0:	39 f4       	brne	.+14     	; 0x34f0 <__fp_cmp+0x38>
    34e2:	0a 26       	eor	r0, r26
    34e4:	61 f0       	breq	.+24     	; 0x34fe <__fp_cmp+0x46>
    34e6:	23 2b       	or	r18, r19
    34e8:	24 2b       	or	r18, r20
    34ea:	25 2b       	or	r18, r21
    34ec:	21 f4       	brne	.+8      	; 0x34f6 <__fp_cmp+0x3e>
    34ee:	08 95       	ret
    34f0:	0a 26       	eor	r0, r26
    34f2:	09 f4       	brne	.+2      	; 0x34f6 <__fp_cmp+0x3e>
    34f4:	a1 40       	sbci	r26, 0x01	; 1
    34f6:	a6 95       	lsr	r26
    34f8:	8f ef       	ldi	r24, 0xFF	; 255
    34fa:	81 1d       	adc	r24, r1
    34fc:	81 1d       	adc	r24, r1
    34fe:	08 95       	ret

00003500 <__fp_inf>:
    3500:	97 f9       	bld	r25, 7
    3502:	9f 67       	ori	r25, 0x7F	; 127
    3504:	80 e8       	ldi	r24, 0x80	; 128
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	60 e0       	ldi	r22, 0x00	; 0
    350a:	08 95       	ret

0000350c <__fp_nan>:
    350c:	9f ef       	ldi	r25, 0xFF	; 255
    350e:	80 ec       	ldi	r24, 0xC0	; 192
    3510:	08 95       	ret

00003512 <__fp_powser>:
    3512:	df 93       	push	r29
    3514:	cf 93       	push	r28
    3516:	1f 93       	push	r17
    3518:	0f 93       	push	r16
    351a:	ff 92       	push	r15
    351c:	ef 92       	push	r14
    351e:	df 92       	push	r13
    3520:	7b 01       	movw	r14, r22
    3522:	8c 01       	movw	r16, r24
    3524:	68 94       	set
    3526:	06 c0       	rjmp	.+12     	; 0x3534 <__fp_powser+0x22>
    3528:	da 2e       	mov	r13, r26
    352a:	ef 01       	movw	r28, r30
    352c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__mulsf3x>
    3530:	fe 01       	movw	r30, r28
    3532:	e8 94       	clt
    3534:	a5 91       	lpm	r26, Z+
    3536:	25 91       	lpm	r18, Z+
    3538:	35 91       	lpm	r19, Z+
    353a:	45 91       	lpm	r20, Z+
    353c:	55 91       	lpm	r21, Z+
    353e:	a6 f3       	brts	.-24     	; 0x3528 <__fp_powser+0x16>
    3540:	ef 01       	movw	r28, r30
    3542:	0e 94 70 18 	call	0x30e0	; 0x30e0 <__addsf3x>
    3546:	fe 01       	movw	r30, r28
    3548:	97 01       	movw	r18, r14
    354a:	a8 01       	movw	r20, r16
    354c:	da 94       	dec	r13
    354e:	69 f7       	brne	.-38     	; 0x352a <__fp_powser+0x18>
    3550:	df 90       	pop	r13
    3552:	ef 90       	pop	r14
    3554:	ff 90       	pop	r15
    3556:	0f 91       	pop	r16
    3558:	1f 91       	pop	r17
    355a:	cf 91       	pop	r28
    355c:	df 91       	pop	r29
    355e:	08 95       	ret

00003560 <__fp_powsodd>:
    3560:	9f 93       	push	r25
    3562:	8f 93       	push	r24
    3564:	7f 93       	push	r23
    3566:	6f 93       	push	r22
    3568:	ff 93       	push	r31
    356a:	ef 93       	push	r30
    356c:	9b 01       	movw	r18, r22
    356e:	ac 01       	movw	r20, r24
    3570:	0e 94 19 1b 	call	0x3632	; 0x3632 <__mulsf3>
    3574:	ef 91       	pop	r30
    3576:	ff 91       	pop	r31
    3578:	0e 94 89 1a 	call	0x3512	; 0x3512 <__fp_powser>
    357c:	2f 91       	pop	r18
    357e:	3f 91       	pop	r19
    3580:	4f 91       	pop	r20
    3582:	5f 91       	pop	r21
    3584:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <__mulsf3>

00003588 <__fp_pscA>:
    3588:	00 24       	eor	r0, r0
    358a:	0a 94       	dec	r0
    358c:	16 16       	cp	r1, r22
    358e:	17 06       	cpc	r1, r23
    3590:	18 06       	cpc	r1, r24
    3592:	09 06       	cpc	r0, r25
    3594:	08 95       	ret

00003596 <__fp_pscB>:
    3596:	00 24       	eor	r0, r0
    3598:	0a 94       	dec	r0
    359a:	12 16       	cp	r1, r18
    359c:	13 06       	cpc	r1, r19
    359e:	14 06       	cpc	r1, r20
    35a0:	05 06       	cpc	r0, r21
    35a2:	08 95       	ret

000035a4 <__fp_round>:
    35a4:	09 2e       	mov	r0, r25
    35a6:	03 94       	inc	r0
    35a8:	00 0c       	add	r0, r0
    35aa:	11 f4       	brne	.+4      	; 0x35b0 <__fp_round+0xc>
    35ac:	88 23       	and	r24, r24
    35ae:	52 f0       	brmi	.+20     	; 0x35c4 <__fp_round+0x20>
    35b0:	bb 0f       	add	r27, r27
    35b2:	40 f4       	brcc	.+16     	; 0x35c4 <__fp_round+0x20>
    35b4:	bf 2b       	or	r27, r31
    35b6:	11 f4       	brne	.+4      	; 0x35bc <__fp_round+0x18>
    35b8:	60 ff       	sbrs	r22, 0
    35ba:	04 c0       	rjmp	.+8      	; 0x35c4 <__fp_round+0x20>
    35bc:	6f 5f       	subi	r22, 0xFF	; 255
    35be:	7f 4f       	sbci	r23, 0xFF	; 255
    35c0:	8f 4f       	sbci	r24, 0xFF	; 255
    35c2:	9f 4f       	sbci	r25, 0xFF	; 255
    35c4:	08 95       	ret

000035c6 <__fp_split3>:
    35c6:	57 fd       	sbrc	r21, 7
    35c8:	90 58       	subi	r25, 0x80	; 128
    35ca:	44 0f       	add	r20, r20
    35cc:	55 1f       	adc	r21, r21
    35ce:	59 f0       	breq	.+22     	; 0x35e6 <__fp_splitA+0x10>
    35d0:	5f 3f       	cpi	r21, 0xFF	; 255
    35d2:	71 f0       	breq	.+28     	; 0x35f0 <__fp_splitA+0x1a>
    35d4:	47 95       	ror	r20

000035d6 <__fp_splitA>:
    35d6:	88 0f       	add	r24, r24
    35d8:	97 fb       	bst	r25, 7
    35da:	99 1f       	adc	r25, r25
    35dc:	61 f0       	breq	.+24     	; 0x35f6 <__fp_splitA+0x20>
    35de:	9f 3f       	cpi	r25, 0xFF	; 255
    35e0:	79 f0       	breq	.+30     	; 0x3600 <__fp_splitA+0x2a>
    35e2:	87 95       	ror	r24
    35e4:	08 95       	ret
    35e6:	12 16       	cp	r1, r18
    35e8:	13 06       	cpc	r1, r19
    35ea:	14 06       	cpc	r1, r20
    35ec:	55 1f       	adc	r21, r21
    35ee:	f2 cf       	rjmp	.-28     	; 0x35d4 <__fp_split3+0xe>
    35f0:	46 95       	lsr	r20
    35f2:	f1 df       	rcall	.-30     	; 0x35d6 <__fp_splitA>
    35f4:	08 c0       	rjmp	.+16     	; 0x3606 <__fp_splitA+0x30>
    35f6:	16 16       	cp	r1, r22
    35f8:	17 06       	cpc	r1, r23
    35fa:	18 06       	cpc	r1, r24
    35fc:	99 1f       	adc	r25, r25
    35fe:	f1 cf       	rjmp	.-30     	; 0x35e2 <__fp_splitA+0xc>
    3600:	86 95       	lsr	r24
    3602:	71 05       	cpc	r23, r1
    3604:	61 05       	cpc	r22, r1
    3606:	08 94       	sec
    3608:	08 95       	ret

0000360a <__fp_zero>:
    360a:	e8 94       	clt

0000360c <__fp_szero>:
    360c:	bb 27       	eor	r27, r27
    360e:	66 27       	eor	r22, r22
    3610:	77 27       	eor	r23, r23
    3612:	cb 01       	movw	r24, r22
    3614:	97 f9       	bld	r25, 7
    3616:	08 95       	ret

00003618 <__gesf2>:
    3618:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__fp_cmp>
    361c:	08 f4       	brcc	.+2      	; 0x3620 <__gesf2+0x8>
    361e:	8f ef       	ldi	r24, 0xFF	; 255
    3620:	08 95       	ret

00003622 <inverse>:
    3622:	9b 01       	movw	r18, r22
    3624:	ac 01       	movw	r20, r24
    3626:	60 e0       	ldi	r22, 0x00	; 0
    3628:	70 e0       	ldi	r23, 0x00	; 0
    362a:	80 e8       	ldi	r24, 0x80	; 128
    362c:	9f e3       	ldi	r25, 0x3F	; 63
    362e:	0c 94 57 19 	jmp	0x32ae	; 0x32ae <__divsf3>

00003632 <__mulsf3>:
    3632:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__mulsf3x>
    3636:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__fp_round>
    363a:	0e 94 c4 1a 	call	0x3588	; 0x3588 <__fp_pscA>
    363e:	38 f0       	brcs	.+14     	; 0x364e <__mulsf3+0x1c>
    3640:	0e 94 cb 1a 	call	0x3596	; 0x3596 <__fp_pscB>
    3644:	20 f0       	brcs	.+8      	; 0x364e <__mulsf3+0x1c>
    3646:	95 23       	and	r25, r21
    3648:	11 f0       	breq	.+4      	; 0x364e <__mulsf3+0x1c>
    364a:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__fp_inf>
    364e:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__fp_nan>
    3652:	11 24       	eor	r1, r1
    3654:	0c 94 06 1b 	jmp	0x360c	; 0x360c <__fp_szero>

00003658 <__mulsf3x>:
    3658:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__fp_split3>
    365c:	70 f3       	brcs	.-36     	; 0x363a <__mulsf3+0x8>

0000365e <__mulsf3_pse>:
    365e:	95 9f       	mul	r25, r21
    3660:	c1 f3       	breq	.-16     	; 0x3652 <__mulsf3+0x20>
    3662:	95 0f       	add	r25, r21
    3664:	50 e0       	ldi	r21, 0x00	; 0
    3666:	55 1f       	adc	r21, r21
    3668:	62 9f       	mul	r22, r18
    366a:	f0 01       	movw	r30, r0
    366c:	72 9f       	mul	r23, r18
    366e:	bb 27       	eor	r27, r27
    3670:	f0 0d       	add	r31, r0
    3672:	b1 1d       	adc	r27, r1
    3674:	63 9f       	mul	r22, r19
    3676:	aa 27       	eor	r26, r26
    3678:	f0 0d       	add	r31, r0
    367a:	b1 1d       	adc	r27, r1
    367c:	aa 1f       	adc	r26, r26
    367e:	64 9f       	mul	r22, r20
    3680:	66 27       	eor	r22, r22
    3682:	b0 0d       	add	r27, r0
    3684:	a1 1d       	adc	r26, r1
    3686:	66 1f       	adc	r22, r22
    3688:	82 9f       	mul	r24, r18
    368a:	22 27       	eor	r18, r18
    368c:	b0 0d       	add	r27, r0
    368e:	a1 1d       	adc	r26, r1
    3690:	62 1f       	adc	r22, r18
    3692:	73 9f       	mul	r23, r19
    3694:	b0 0d       	add	r27, r0
    3696:	a1 1d       	adc	r26, r1
    3698:	62 1f       	adc	r22, r18
    369a:	83 9f       	mul	r24, r19
    369c:	a0 0d       	add	r26, r0
    369e:	61 1d       	adc	r22, r1
    36a0:	22 1f       	adc	r18, r18
    36a2:	74 9f       	mul	r23, r20
    36a4:	33 27       	eor	r19, r19
    36a6:	a0 0d       	add	r26, r0
    36a8:	61 1d       	adc	r22, r1
    36aa:	23 1f       	adc	r18, r19
    36ac:	84 9f       	mul	r24, r20
    36ae:	60 0d       	add	r22, r0
    36b0:	21 1d       	adc	r18, r1
    36b2:	82 2f       	mov	r24, r18
    36b4:	76 2f       	mov	r23, r22
    36b6:	6a 2f       	mov	r22, r26
    36b8:	11 24       	eor	r1, r1
    36ba:	9f 57       	subi	r25, 0x7F	; 127
    36bc:	50 40       	sbci	r21, 0x00	; 0
    36be:	9a f0       	brmi	.+38     	; 0x36e6 <__mulsf3_pse+0x88>
    36c0:	f1 f0       	breq	.+60     	; 0x36fe <__mulsf3_pse+0xa0>
    36c2:	88 23       	and	r24, r24
    36c4:	4a f0       	brmi	.+18     	; 0x36d8 <__mulsf3_pse+0x7a>
    36c6:	ee 0f       	add	r30, r30
    36c8:	ff 1f       	adc	r31, r31
    36ca:	bb 1f       	adc	r27, r27
    36cc:	66 1f       	adc	r22, r22
    36ce:	77 1f       	adc	r23, r23
    36d0:	88 1f       	adc	r24, r24
    36d2:	91 50       	subi	r25, 0x01	; 1
    36d4:	50 40       	sbci	r21, 0x00	; 0
    36d6:	a9 f7       	brne	.-22     	; 0x36c2 <__mulsf3_pse+0x64>
    36d8:	9e 3f       	cpi	r25, 0xFE	; 254
    36da:	51 05       	cpc	r21, r1
    36dc:	80 f0       	brcs	.+32     	; 0x36fe <__mulsf3_pse+0xa0>
    36de:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__fp_inf>
    36e2:	0c 94 06 1b 	jmp	0x360c	; 0x360c <__fp_szero>
    36e6:	5f 3f       	cpi	r21, 0xFF	; 255
    36e8:	e4 f3       	brlt	.-8      	; 0x36e2 <__mulsf3_pse+0x84>
    36ea:	98 3e       	cpi	r25, 0xE8	; 232
    36ec:	d4 f3       	brlt	.-12     	; 0x36e2 <__mulsf3_pse+0x84>
    36ee:	86 95       	lsr	r24
    36f0:	77 95       	ror	r23
    36f2:	67 95       	ror	r22
    36f4:	b7 95       	ror	r27
    36f6:	f7 95       	ror	r31
    36f8:	e7 95       	ror	r30
    36fa:	9f 5f       	subi	r25, 0xFF	; 255
    36fc:	c1 f7       	brne	.-16     	; 0x36ee <__mulsf3_pse+0x90>
    36fe:	fe 2b       	or	r31, r30
    3700:	88 0f       	add	r24, r24
    3702:	91 1d       	adc	r25, r1
    3704:	96 95       	lsr	r25
    3706:	87 95       	ror	r24
    3708:	97 f9       	bld	r25, 7
    370a:	08 95       	ret
    370c:	19 f4       	brne	.+6      	; 0x3714 <__mulsf3_pse+0xb6>
    370e:	16 f4       	brtc	.+4      	; 0x3714 <__mulsf3_pse+0xb6>
    3710:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__fp_nan>
    3714:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__fp_mpack>

00003718 <sqrt>:
    3718:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__fp_splitA>
    371c:	b8 f3       	brcs	.-18     	; 0x370c <__mulsf3_pse+0xae>
    371e:	99 23       	and	r25, r25
    3720:	c9 f3       	breq	.-14     	; 0x3714 <__mulsf3_pse+0xb6>
    3722:	b6 f3       	brts	.-20     	; 0x3710 <__mulsf3_pse+0xb2>
    3724:	9f 57       	subi	r25, 0x7F	; 127
    3726:	55 0b       	sbc	r21, r21
    3728:	87 ff       	sbrs	r24, 7
    372a:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__fp_norm2>
    372e:	00 24       	eor	r0, r0
    3730:	a0 e6       	ldi	r26, 0x60	; 96
    3732:	40 ea       	ldi	r20, 0xA0	; 160
    3734:	90 01       	movw	r18, r0
    3736:	80 58       	subi	r24, 0x80	; 128
    3738:	56 95       	lsr	r21
    373a:	97 95       	ror	r25
    373c:	28 f4       	brcc	.+10     	; 0x3748 <sqrt+0x30>
    373e:	80 5c       	subi	r24, 0xC0	; 192
    3740:	66 0f       	add	r22, r22
    3742:	77 1f       	adc	r23, r23
    3744:	88 1f       	adc	r24, r24
    3746:	20 f0       	brcs	.+8      	; 0x3750 <sqrt+0x38>
    3748:	26 17       	cp	r18, r22
    374a:	37 07       	cpc	r19, r23
    374c:	48 07       	cpc	r20, r24
    374e:	30 f4       	brcc	.+12     	; 0x375c <sqrt+0x44>
    3750:	62 1b       	sub	r22, r18
    3752:	73 0b       	sbc	r23, r19
    3754:	84 0b       	sbc	r24, r20
    3756:	20 29       	or	r18, r0
    3758:	31 29       	or	r19, r1
    375a:	4a 2b       	or	r20, r26
    375c:	a6 95       	lsr	r26
    375e:	17 94       	ror	r1
    3760:	07 94       	ror	r0
    3762:	20 25       	eor	r18, r0
    3764:	31 25       	eor	r19, r1
    3766:	4a 27       	eor	r20, r26
    3768:	58 f7       	brcc	.-42     	; 0x3740 <sqrt+0x28>
    376a:	66 0f       	add	r22, r22
    376c:	77 1f       	adc	r23, r23
    376e:	88 1f       	adc	r24, r24
    3770:	20 f0       	brcs	.+8      	; 0x377a <sqrt+0x62>
    3772:	26 17       	cp	r18, r22
    3774:	37 07       	cpc	r19, r23
    3776:	48 07       	cpc	r20, r24
    3778:	30 f4       	brcc	.+12     	; 0x3786 <sqrt+0x6e>
    377a:	62 0b       	sbc	r22, r18
    377c:	73 0b       	sbc	r23, r19
    377e:	84 0b       	sbc	r24, r20
    3780:	20 0d       	add	r18, r0
    3782:	31 1d       	adc	r19, r1
    3784:	41 1d       	adc	r20, r1
    3786:	a0 95       	com	r26
    3788:	81 f7       	brne	.-32     	; 0x376a <sqrt+0x52>
    378a:	b9 01       	movw	r22, r18
    378c:	84 2f       	mov	r24, r20
    378e:	91 58       	subi	r25, 0x81	; 129
    3790:	88 0f       	add	r24, r24
    3792:	96 95       	lsr	r25
    3794:	87 95       	ror	r24
    3796:	08 95       	ret

00003798 <square>:
    3798:	9b 01       	movw	r18, r22
    379a:	ac 01       	movw	r20, r24
    379c:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <__mulsf3>

000037a0 <__fp_mpack>:
    37a0:	9f 3f       	cpi	r25, 0xFF	; 255
    37a2:	31 f0       	breq	.+12     	; 0x37b0 <__fp_mpack_finite+0xc>

000037a4 <__fp_mpack_finite>:
    37a4:	91 50       	subi	r25, 0x01	; 1
    37a6:	20 f4       	brcc	.+8      	; 0x37b0 <__fp_mpack_finite+0xc>
    37a8:	87 95       	ror	r24
    37aa:	77 95       	ror	r23
    37ac:	67 95       	ror	r22
    37ae:	b7 95       	ror	r27
    37b0:	88 0f       	add	r24, r24
    37b2:	91 1d       	adc	r25, r1
    37b4:	96 95       	lsr	r25
    37b6:	87 95       	ror	r24
    37b8:	97 f9       	bld	r25, 7
    37ba:	08 95       	ret

000037bc <__fp_norm2>:
    37bc:	91 50       	subi	r25, 0x01	; 1
    37be:	50 40       	sbci	r21, 0x00	; 0
    37c0:	66 0f       	add	r22, r22
    37c2:	77 1f       	adc	r23, r23
    37c4:	88 1f       	adc	r24, r24
    37c6:	d2 f7       	brpl	.-12     	; 0x37bc <__fp_norm2>
    37c8:	08 95       	ret

000037ca <vfprintf>:
    37ca:	a0 e1       	ldi	r26, 0x10	; 16
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	eb ee       	ldi	r30, 0xEB	; 235
    37d0:	fb e1       	ldi	r31, 0x1B	; 27
    37d2:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__prologue_saves__>
    37d6:	7c 01       	movw	r14, r24
    37d8:	1b 01       	movw	r2, r22
    37da:	6a 01       	movw	r12, r20
    37dc:	fc 01       	movw	r30, r24
    37de:	17 82       	std	Z+7, r1	; 0x07
    37e0:	16 82       	std	Z+6, r1	; 0x06
    37e2:	83 81       	ldd	r24, Z+3	; 0x03
    37e4:	81 ff       	sbrs	r24, 1
    37e6:	44 c3       	rjmp	.+1672   	; 0x3e70 <vfprintf+0x6a6>
    37e8:	9e 01       	movw	r18, r28
    37ea:	2f 5f       	subi	r18, 0xFF	; 255
    37ec:	3f 4f       	sbci	r19, 0xFF	; 255
    37ee:	39 01       	movw	r6, r18
    37f0:	f7 01       	movw	r30, r14
    37f2:	93 81       	ldd	r25, Z+3	; 0x03
    37f4:	f1 01       	movw	r30, r2
    37f6:	93 fd       	sbrc	r25, 3
    37f8:	85 91       	lpm	r24, Z+
    37fa:	93 ff       	sbrs	r25, 3
    37fc:	81 91       	ld	r24, Z+
    37fe:	1f 01       	movw	r2, r30
    3800:	88 23       	and	r24, r24
    3802:	09 f4       	brne	.+2      	; 0x3806 <vfprintf+0x3c>
    3804:	31 c3       	rjmp	.+1634   	; 0x3e68 <vfprintf+0x69e>
    3806:	85 32       	cpi	r24, 0x25	; 37
    3808:	39 f4       	brne	.+14     	; 0x3818 <vfprintf+0x4e>
    380a:	93 fd       	sbrc	r25, 3
    380c:	85 91       	lpm	r24, Z+
    380e:	93 ff       	sbrs	r25, 3
    3810:	81 91       	ld	r24, Z+
    3812:	1f 01       	movw	r2, r30
    3814:	85 32       	cpi	r24, 0x25	; 37
    3816:	39 f4       	brne	.+14     	; 0x3826 <vfprintf+0x5c>
    3818:	b7 01       	movw	r22, r14
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3820:	56 01       	movw	r10, r12
    3822:	65 01       	movw	r12, r10
    3824:	e5 cf       	rjmp	.-54     	; 0x37f0 <vfprintf+0x26>
    3826:	10 e0       	ldi	r17, 0x00	; 0
    3828:	51 2c       	mov	r5, r1
    382a:	91 2c       	mov	r9, r1
    382c:	ff e1       	ldi	r31, 0x1F	; 31
    382e:	f9 15       	cp	r31, r9
    3830:	d8 f0       	brcs	.+54     	; 0x3868 <vfprintf+0x9e>
    3832:	8b 32       	cpi	r24, 0x2B	; 43
    3834:	79 f0       	breq	.+30     	; 0x3854 <vfprintf+0x8a>
    3836:	38 f4       	brcc	.+14     	; 0x3846 <vfprintf+0x7c>
    3838:	80 32       	cpi	r24, 0x20	; 32
    383a:	79 f0       	breq	.+30     	; 0x385a <vfprintf+0x90>
    383c:	83 32       	cpi	r24, 0x23	; 35
    383e:	a1 f4       	brne	.+40     	; 0x3868 <vfprintf+0x9e>
    3840:	f9 2d       	mov	r31, r9
    3842:	f0 61       	ori	r31, 0x10	; 16
    3844:	2e c0       	rjmp	.+92     	; 0x38a2 <vfprintf+0xd8>
    3846:	8d 32       	cpi	r24, 0x2D	; 45
    3848:	61 f0       	breq	.+24     	; 0x3862 <vfprintf+0x98>
    384a:	80 33       	cpi	r24, 0x30	; 48
    384c:	69 f4       	brne	.+26     	; 0x3868 <vfprintf+0x9e>
    384e:	29 2d       	mov	r18, r9
    3850:	21 60       	ori	r18, 0x01	; 1
    3852:	2d c0       	rjmp	.+90     	; 0x38ae <vfprintf+0xe4>
    3854:	39 2d       	mov	r19, r9
    3856:	32 60       	ori	r19, 0x02	; 2
    3858:	93 2e       	mov	r9, r19
    385a:	89 2d       	mov	r24, r9
    385c:	84 60       	ori	r24, 0x04	; 4
    385e:	98 2e       	mov	r9, r24
    3860:	2a c0       	rjmp	.+84     	; 0x38b6 <vfprintf+0xec>
    3862:	e9 2d       	mov	r30, r9
    3864:	e8 60       	ori	r30, 0x08	; 8
    3866:	15 c0       	rjmp	.+42     	; 0x3892 <vfprintf+0xc8>
    3868:	97 fc       	sbrc	r9, 7
    386a:	2d c0       	rjmp	.+90     	; 0x38c6 <vfprintf+0xfc>
    386c:	20 ed       	ldi	r18, 0xD0	; 208
    386e:	28 0f       	add	r18, r24
    3870:	2a 30       	cpi	r18, 0x0A	; 10
    3872:	88 f4       	brcc	.+34     	; 0x3896 <vfprintf+0xcc>
    3874:	96 fe       	sbrs	r9, 6
    3876:	06 c0       	rjmp	.+12     	; 0x3884 <vfprintf+0xba>
    3878:	3a e0       	ldi	r19, 0x0A	; 10
    387a:	13 9f       	mul	r17, r19
    387c:	20 0d       	add	r18, r0
    387e:	11 24       	eor	r1, r1
    3880:	12 2f       	mov	r17, r18
    3882:	19 c0       	rjmp	.+50     	; 0x38b6 <vfprintf+0xec>
    3884:	8a e0       	ldi	r24, 0x0A	; 10
    3886:	58 9e       	mul	r5, r24
    3888:	20 0d       	add	r18, r0
    388a:	11 24       	eor	r1, r1
    388c:	52 2e       	mov	r5, r18
    388e:	e9 2d       	mov	r30, r9
    3890:	e0 62       	ori	r30, 0x20	; 32
    3892:	9e 2e       	mov	r9, r30
    3894:	10 c0       	rjmp	.+32     	; 0x38b6 <vfprintf+0xec>
    3896:	8e 32       	cpi	r24, 0x2E	; 46
    3898:	31 f4       	brne	.+12     	; 0x38a6 <vfprintf+0xdc>
    389a:	96 fc       	sbrc	r9, 6
    389c:	e5 c2       	rjmp	.+1482   	; 0x3e68 <vfprintf+0x69e>
    389e:	f9 2d       	mov	r31, r9
    38a0:	f0 64       	ori	r31, 0x40	; 64
    38a2:	9f 2e       	mov	r9, r31
    38a4:	08 c0       	rjmp	.+16     	; 0x38b6 <vfprintf+0xec>
    38a6:	8c 36       	cpi	r24, 0x6C	; 108
    38a8:	21 f4       	brne	.+8      	; 0x38b2 <vfprintf+0xe8>
    38aa:	29 2d       	mov	r18, r9
    38ac:	20 68       	ori	r18, 0x80	; 128
    38ae:	92 2e       	mov	r9, r18
    38b0:	02 c0       	rjmp	.+4      	; 0x38b6 <vfprintf+0xec>
    38b2:	88 36       	cpi	r24, 0x68	; 104
    38b4:	41 f4       	brne	.+16     	; 0x38c6 <vfprintf+0xfc>
    38b6:	f1 01       	movw	r30, r2
    38b8:	93 fd       	sbrc	r25, 3
    38ba:	85 91       	lpm	r24, Z+
    38bc:	93 ff       	sbrs	r25, 3
    38be:	81 91       	ld	r24, Z+
    38c0:	1f 01       	movw	r2, r30
    38c2:	81 11       	cpse	r24, r1
    38c4:	b3 cf       	rjmp	.-154    	; 0x382c <vfprintf+0x62>
    38c6:	9b eb       	ldi	r25, 0xBB	; 187
    38c8:	98 0f       	add	r25, r24
    38ca:	93 30       	cpi	r25, 0x03	; 3
    38cc:	20 f4       	brcc	.+8      	; 0x38d6 <vfprintf+0x10c>
    38ce:	99 2d       	mov	r25, r9
    38d0:	90 61       	ori	r25, 0x10	; 16
    38d2:	80 5e       	subi	r24, 0xE0	; 224
    38d4:	07 c0       	rjmp	.+14     	; 0x38e4 <vfprintf+0x11a>
    38d6:	9b e9       	ldi	r25, 0x9B	; 155
    38d8:	98 0f       	add	r25, r24
    38da:	93 30       	cpi	r25, 0x03	; 3
    38dc:	08 f0       	brcs	.+2      	; 0x38e0 <vfprintf+0x116>
    38de:	66 c1       	rjmp	.+716    	; 0x3bac <vfprintf+0x3e2>
    38e0:	99 2d       	mov	r25, r9
    38e2:	9f 7e       	andi	r25, 0xEF	; 239
    38e4:	96 ff       	sbrs	r25, 6
    38e6:	16 e0       	ldi	r17, 0x06	; 6
    38e8:	9f 73       	andi	r25, 0x3F	; 63
    38ea:	99 2e       	mov	r9, r25
    38ec:	85 36       	cpi	r24, 0x65	; 101
    38ee:	19 f4       	brne	.+6      	; 0x38f6 <vfprintf+0x12c>
    38f0:	90 64       	ori	r25, 0x40	; 64
    38f2:	99 2e       	mov	r9, r25
    38f4:	08 c0       	rjmp	.+16     	; 0x3906 <vfprintf+0x13c>
    38f6:	86 36       	cpi	r24, 0x66	; 102
    38f8:	21 f4       	brne	.+8      	; 0x3902 <vfprintf+0x138>
    38fa:	39 2f       	mov	r19, r25
    38fc:	30 68       	ori	r19, 0x80	; 128
    38fe:	93 2e       	mov	r9, r19
    3900:	02 c0       	rjmp	.+4      	; 0x3906 <vfprintf+0x13c>
    3902:	11 11       	cpse	r17, r1
    3904:	11 50       	subi	r17, 0x01	; 1
    3906:	97 fe       	sbrs	r9, 7
    3908:	07 c0       	rjmp	.+14     	; 0x3918 <vfprintf+0x14e>
    390a:	1c 33       	cpi	r17, 0x3C	; 60
    390c:	50 f4       	brcc	.+20     	; 0x3922 <vfprintf+0x158>
    390e:	44 24       	eor	r4, r4
    3910:	43 94       	inc	r4
    3912:	41 0e       	add	r4, r17
    3914:	27 e0       	ldi	r18, 0x07	; 7
    3916:	0b c0       	rjmp	.+22     	; 0x392e <vfprintf+0x164>
    3918:	18 30       	cpi	r17, 0x08	; 8
    391a:	38 f0       	brcs	.+14     	; 0x392a <vfprintf+0x160>
    391c:	27 e0       	ldi	r18, 0x07	; 7
    391e:	17 e0       	ldi	r17, 0x07	; 7
    3920:	05 c0       	rjmp	.+10     	; 0x392c <vfprintf+0x162>
    3922:	27 e0       	ldi	r18, 0x07	; 7
    3924:	9c e3       	ldi	r25, 0x3C	; 60
    3926:	49 2e       	mov	r4, r25
    3928:	02 c0       	rjmp	.+4      	; 0x392e <vfprintf+0x164>
    392a:	21 2f       	mov	r18, r17
    392c:	41 2c       	mov	r4, r1
    392e:	56 01       	movw	r10, r12
    3930:	84 e0       	ldi	r24, 0x04	; 4
    3932:	a8 0e       	add	r10, r24
    3934:	b1 1c       	adc	r11, r1
    3936:	f6 01       	movw	r30, r12
    3938:	60 81       	ld	r22, Z
    393a:	71 81       	ldd	r23, Z+1	; 0x01
    393c:	82 81       	ldd	r24, Z+2	; 0x02
    393e:	93 81       	ldd	r25, Z+3	; 0x03
    3940:	04 2d       	mov	r16, r4
    3942:	a3 01       	movw	r20, r6
    3944:	0e 94 c0 20 	call	0x4180	; 0x4180 <__ftoa_engine>
    3948:	6c 01       	movw	r12, r24
    394a:	f9 81       	ldd	r31, Y+1	; 0x01
    394c:	fc 87       	std	Y+12, r31	; 0x0c
    394e:	f0 ff       	sbrs	r31, 0
    3950:	02 c0       	rjmp	.+4      	; 0x3956 <vfprintf+0x18c>
    3952:	f3 ff       	sbrs	r31, 3
    3954:	06 c0       	rjmp	.+12     	; 0x3962 <vfprintf+0x198>
    3956:	91 fc       	sbrc	r9, 1
    3958:	06 c0       	rjmp	.+12     	; 0x3966 <vfprintf+0x19c>
    395a:	92 fe       	sbrs	r9, 2
    395c:	06 c0       	rjmp	.+12     	; 0x396a <vfprintf+0x1a0>
    395e:	00 e2       	ldi	r16, 0x20	; 32
    3960:	05 c0       	rjmp	.+10     	; 0x396c <vfprintf+0x1a2>
    3962:	0d e2       	ldi	r16, 0x2D	; 45
    3964:	03 c0       	rjmp	.+6      	; 0x396c <vfprintf+0x1a2>
    3966:	0b e2       	ldi	r16, 0x2B	; 43
    3968:	01 c0       	rjmp	.+2      	; 0x396c <vfprintf+0x1a2>
    396a:	00 e0       	ldi	r16, 0x00	; 0
    396c:	8c 85       	ldd	r24, Y+12	; 0x0c
    396e:	8c 70       	andi	r24, 0x0C	; 12
    3970:	19 f0       	breq	.+6      	; 0x3978 <vfprintf+0x1ae>
    3972:	01 11       	cpse	r16, r1
    3974:	5a c2       	rjmp	.+1204   	; 0x3e2a <vfprintf+0x660>
    3976:	9b c2       	rjmp	.+1334   	; 0x3eae <vfprintf+0x6e4>
    3978:	97 fe       	sbrs	r9, 7
    397a:	10 c0       	rjmp	.+32     	; 0x399c <vfprintf+0x1d2>
    397c:	4c 0c       	add	r4, r12
    397e:	fc 85       	ldd	r31, Y+12	; 0x0c
    3980:	f4 ff       	sbrs	r31, 4
    3982:	04 c0       	rjmp	.+8      	; 0x398c <vfprintf+0x1c2>
    3984:	8a 81       	ldd	r24, Y+2	; 0x02
    3986:	81 33       	cpi	r24, 0x31	; 49
    3988:	09 f4       	brne	.+2      	; 0x398c <vfprintf+0x1c2>
    398a:	4a 94       	dec	r4
    398c:	14 14       	cp	r1, r4
    398e:	74 f5       	brge	.+92     	; 0x39ec <vfprintf+0x222>
    3990:	28 e0       	ldi	r18, 0x08	; 8
    3992:	24 15       	cp	r18, r4
    3994:	78 f5       	brcc	.+94     	; 0x39f4 <vfprintf+0x22a>
    3996:	88 e0       	ldi	r24, 0x08	; 8
    3998:	48 2e       	mov	r4, r24
    399a:	2c c0       	rjmp	.+88     	; 0x39f4 <vfprintf+0x22a>
    399c:	96 fc       	sbrc	r9, 6
    399e:	2a c0       	rjmp	.+84     	; 0x39f4 <vfprintf+0x22a>
    39a0:	81 2f       	mov	r24, r17
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	8c 15       	cp	r24, r12
    39a6:	9d 05       	cpc	r25, r13
    39a8:	9c f0       	brlt	.+38     	; 0x39d0 <vfprintf+0x206>
    39aa:	3c ef       	ldi	r19, 0xFC	; 252
    39ac:	c3 16       	cp	r12, r19
    39ae:	3f ef       	ldi	r19, 0xFF	; 255
    39b0:	d3 06       	cpc	r13, r19
    39b2:	74 f0       	brlt	.+28     	; 0x39d0 <vfprintf+0x206>
    39b4:	89 2d       	mov	r24, r9
    39b6:	80 68       	ori	r24, 0x80	; 128
    39b8:	98 2e       	mov	r9, r24
    39ba:	0a c0       	rjmp	.+20     	; 0x39d0 <vfprintf+0x206>
    39bc:	e2 e0       	ldi	r30, 0x02	; 2
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	ec 0f       	add	r30, r28
    39c2:	fd 1f       	adc	r31, r29
    39c4:	e1 0f       	add	r30, r17
    39c6:	f1 1d       	adc	r31, r1
    39c8:	80 81       	ld	r24, Z
    39ca:	80 33       	cpi	r24, 0x30	; 48
    39cc:	19 f4       	brne	.+6      	; 0x39d4 <vfprintf+0x20a>
    39ce:	11 50       	subi	r17, 0x01	; 1
    39d0:	11 11       	cpse	r17, r1
    39d2:	f4 cf       	rjmp	.-24     	; 0x39bc <vfprintf+0x1f2>
    39d4:	97 fe       	sbrs	r9, 7
    39d6:	0e c0       	rjmp	.+28     	; 0x39f4 <vfprintf+0x22a>
    39d8:	44 24       	eor	r4, r4
    39da:	43 94       	inc	r4
    39dc:	41 0e       	add	r4, r17
    39de:	81 2f       	mov	r24, r17
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	c8 16       	cp	r12, r24
    39e4:	d9 06       	cpc	r13, r25
    39e6:	2c f4       	brge	.+10     	; 0x39f2 <vfprintf+0x228>
    39e8:	1c 19       	sub	r17, r12
    39ea:	04 c0       	rjmp	.+8      	; 0x39f4 <vfprintf+0x22a>
    39ec:	44 24       	eor	r4, r4
    39ee:	43 94       	inc	r4
    39f0:	01 c0       	rjmp	.+2      	; 0x39f4 <vfprintf+0x22a>
    39f2:	10 e0       	ldi	r17, 0x00	; 0
    39f4:	97 fe       	sbrs	r9, 7
    39f6:	06 c0       	rjmp	.+12     	; 0x3a04 <vfprintf+0x23a>
    39f8:	1c 14       	cp	r1, r12
    39fa:	1d 04       	cpc	r1, r13
    39fc:	34 f4       	brge	.+12     	; 0x3a0a <vfprintf+0x240>
    39fe:	c6 01       	movw	r24, r12
    3a00:	01 96       	adiw	r24, 0x01	; 1
    3a02:	05 c0       	rjmp	.+10     	; 0x3a0e <vfprintf+0x244>
    3a04:	85 e0       	ldi	r24, 0x05	; 5
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	02 c0       	rjmp	.+4      	; 0x3a0e <vfprintf+0x244>
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	01 11       	cpse	r16, r1
    3a10:	01 96       	adiw	r24, 0x01	; 1
    3a12:	11 23       	and	r17, r17
    3a14:	31 f0       	breq	.+12     	; 0x3a22 <vfprintf+0x258>
    3a16:	21 2f       	mov	r18, r17
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	2f 5f       	subi	r18, 0xFF	; 255
    3a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1e:	82 0f       	add	r24, r18
    3a20:	93 1f       	adc	r25, r19
    3a22:	25 2d       	mov	r18, r5
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	82 17       	cp	r24, r18
    3a28:	93 07       	cpc	r25, r19
    3a2a:	14 f4       	brge	.+4      	; 0x3a30 <vfprintf+0x266>
    3a2c:	58 1a       	sub	r5, r24
    3a2e:	01 c0       	rjmp	.+2      	; 0x3a32 <vfprintf+0x268>
    3a30:	51 2c       	mov	r5, r1
    3a32:	89 2d       	mov	r24, r9
    3a34:	89 70       	andi	r24, 0x09	; 9
    3a36:	49 f4       	brne	.+18     	; 0x3a4a <vfprintf+0x280>
    3a38:	55 20       	and	r5, r5
    3a3a:	39 f0       	breq	.+14     	; 0x3a4a <vfprintf+0x280>
    3a3c:	b7 01       	movw	r22, r14
    3a3e:	80 e2       	ldi	r24, 0x20	; 32
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3a46:	5a 94       	dec	r5
    3a48:	f7 cf       	rjmp	.-18     	; 0x3a38 <vfprintf+0x26e>
    3a4a:	00 23       	and	r16, r16
    3a4c:	29 f0       	breq	.+10     	; 0x3a58 <vfprintf+0x28e>
    3a4e:	b7 01       	movw	r22, r14
    3a50:	80 2f       	mov	r24, r16
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3a58:	93 fc       	sbrc	r9, 3
    3a5a:	09 c0       	rjmp	.+18     	; 0x3a6e <vfprintf+0x2a4>
    3a5c:	55 20       	and	r5, r5
    3a5e:	39 f0       	breq	.+14     	; 0x3a6e <vfprintf+0x2a4>
    3a60:	b7 01       	movw	r22, r14
    3a62:	80 e3       	ldi	r24, 0x30	; 48
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3a6a:	5a 94       	dec	r5
    3a6c:	f7 cf       	rjmp	.-18     	; 0x3a5c <vfprintf+0x292>
    3a6e:	97 fe       	sbrs	r9, 7
    3a70:	4c c0       	rjmp	.+152    	; 0x3b0a <vfprintf+0x340>
    3a72:	46 01       	movw	r8, r12
    3a74:	d7 fe       	sbrs	r13, 7
    3a76:	02 c0       	rjmp	.+4      	; 0x3a7c <vfprintf+0x2b2>
    3a78:	81 2c       	mov	r8, r1
    3a7a:	91 2c       	mov	r9, r1
    3a7c:	c6 01       	movw	r24, r12
    3a7e:	88 19       	sub	r24, r8
    3a80:	99 09       	sbc	r25, r9
    3a82:	f3 01       	movw	r30, r6
    3a84:	e8 0f       	add	r30, r24
    3a86:	f9 1f       	adc	r31, r25
    3a88:	fe 87       	std	Y+14, r31	; 0x0e
    3a8a:	ed 87       	std	Y+13, r30	; 0x0d
    3a8c:	96 01       	movw	r18, r12
    3a8e:	24 19       	sub	r18, r4
    3a90:	31 09       	sbc	r19, r1
    3a92:	38 8b       	std	Y+16, r19	; 0x10
    3a94:	2f 87       	std	Y+15, r18	; 0x0f
    3a96:	01 2f       	mov	r16, r17
    3a98:	10 e0       	ldi	r17, 0x00	; 0
    3a9a:	11 95       	neg	r17
    3a9c:	01 95       	neg	r16
    3a9e:	11 09       	sbc	r17, r1
    3aa0:	3f ef       	ldi	r19, 0xFF	; 255
    3aa2:	83 16       	cp	r8, r19
    3aa4:	93 06       	cpc	r9, r19
    3aa6:	29 f4       	brne	.+10     	; 0x3ab2 <vfprintf+0x2e8>
    3aa8:	b7 01       	movw	r22, r14
    3aaa:	8e e2       	ldi	r24, 0x2E	; 46
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3ab2:	c8 14       	cp	r12, r8
    3ab4:	d9 04       	cpc	r13, r9
    3ab6:	4c f0       	brlt	.+18     	; 0x3aca <vfprintf+0x300>
    3ab8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aba:	98 89       	ldd	r25, Y+16	; 0x10
    3abc:	88 15       	cp	r24, r8
    3abe:	99 05       	cpc	r25, r9
    3ac0:	24 f4       	brge	.+8      	; 0x3aca <vfprintf+0x300>
    3ac2:	ed 85       	ldd	r30, Y+13	; 0x0d
    3ac4:	fe 85       	ldd	r31, Y+14	; 0x0e
    3ac6:	81 81       	ldd	r24, Z+1	; 0x01
    3ac8:	01 c0       	rjmp	.+2      	; 0x3acc <vfprintf+0x302>
    3aca:	80 e3       	ldi	r24, 0x30	; 48
    3acc:	f1 e0       	ldi	r31, 0x01	; 1
    3ace:	8f 1a       	sub	r8, r31
    3ad0:	91 08       	sbc	r9, r1
    3ad2:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ad4:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ad6:	2f 5f       	subi	r18, 0xFF	; 255
    3ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ada:	3e 87       	std	Y+14, r19	; 0x0e
    3adc:	2d 87       	std	Y+13, r18	; 0x0d
    3ade:	80 16       	cp	r8, r16
    3ae0:	91 06       	cpc	r9, r17
    3ae2:	2c f0       	brlt	.+10     	; 0x3aee <vfprintf+0x324>
    3ae4:	b7 01       	movw	r22, r14
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3aec:	d9 cf       	rjmp	.-78     	; 0x3aa0 <vfprintf+0x2d6>
    3aee:	c8 14       	cp	r12, r8
    3af0:	d9 04       	cpc	r13, r9
    3af2:	41 f4       	brne	.+16     	; 0x3b04 <vfprintf+0x33a>
    3af4:	9a 81       	ldd	r25, Y+2	; 0x02
    3af6:	96 33       	cpi	r25, 0x36	; 54
    3af8:	20 f4       	brcc	.+8      	; 0x3b02 <vfprintf+0x338>
    3afa:	95 33       	cpi	r25, 0x35	; 53
    3afc:	19 f4       	brne	.+6      	; 0x3b04 <vfprintf+0x33a>
    3afe:	3c 85       	ldd	r19, Y+12	; 0x0c
    3b00:	34 ff       	sbrs	r19, 4
    3b02:	81 e3       	ldi	r24, 0x31	; 49
    3b04:	b7 01       	movw	r22, r14
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	4e c0       	rjmp	.+156    	; 0x3ba6 <vfprintf+0x3dc>
    3b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0c:	81 33       	cpi	r24, 0x31	; 49
    3b0e:	19 f0       	breq	.+6      	; 0x3b16 <vfprintf+0x34c>
    3b10:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b12:	9f 7e       	andi	r25, 0xEF	; 239
    3b14:	9c 87       	std	Y+12, r25	; 0x0c
    3b16:	b7 01       	movw	r22, r14
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3b1e:	11 11       	cpse	r17, r1
    3b20:	05 c0       	rjmp	.+10     	; 0x3b2c <vfprintf+0x362>
    3b22:	94 fc       	sbrc	r9, 4
    3b24:	18 c0       	rjmp	.+48     	; 0x3b56 <vfprintf+0x38c>
    3b26:	85 e6       	ldi	r24, 0x65	; 101
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	17 c0       	rjmp	.+46     	; 0x3b5a <vfprintf+0x390>
    3b2c:	b7 01       	movw	r22, r14
    3b2e:	8e e2       	ldi	r24, 0x2E	; 46
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3b36:	1e 5f       	subi	r17, 0xFE	; 254
    3b38:	82 e0       	ldi	r24, 0x02	; 2
    3b3a:	01 e0       	ldi	r16, 0x01	; 1
    3b3c:	08 0f       	add	r16, r24
    3b3e:	f3 01       	movw	r30, r6
    3b40:	e8 0f       	add	r30, r24
    3b42:	f1 1d       	adc	r31, r1
    3b44:	80 81       	ld	r24, Z
    3b46:	b7 01       	movw	r22, r14
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3b4e:	80 2f       	mov	r24, r16
    3b50:	01 13       	cpse	r16, r17
    3b52:	f3 cf       	rjmp	.-26     	; 0x3b3a <vfprintf+0x370>
    3b54:	e6 cf       	rjmp	.-52     	; 0x3b22 <vfprintf+0x358>
    3b56:	85 e4       	ldi	r24, 0x45	; 69
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	b7 01       	movw	r22, r14
    3b5c:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3b60:	d7 fc       	sbrc	r13, 7
    3b62:	06 c0       	rjmp	.+12     	; 0x3b70 <vfprintf+0x3a6>
    3b64:	c1 14       	cp	r12, r1
    3b66:	d1 04       	cpc	r13, r1
    3b68:	41 f4       	brne	.+16     	; 0x3b7a <vfprintf+0x3b0>
    3b6a:	ec 85       	ldd	r30, Y+12	; 0x0c
    3b6c:	e4 ff       	sbrs	r30, 4
    3b6e:	05 c0       	rjmp	.+10     	; 0x3b7a <vfprintf+0x3b0>
    3b70:	d1 94       	neg	r13
    3b72:	c1 94       	neg	r12
    3b74:	d1 08       	sbc	r13, r1
    3b76:	8d e2       	ldi	r24, 0x2D	; 45
    3b78:	01 c0       	rjmp	.+2      	; 0x3b7c <vfprintf+0x3b2>
    3b7a:	8b e2       	ldi	r24, 0x2B	; 43
    3b7c:	b7 01       	movw	r22, r14
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3b84:	80 e3       	ldi	r24, 0x30	; 48
    3b86:	2a e0       	ldi	r18, 0x0A	; 10
    3b88:	c2 16       	cp	r12, r18
    3b8a:	d1 04       	cpc	r13, r1
    3b8c:	2c f0       	brlt	.+10     	; 0x3b98 <vfprintf+0x3ce>
    3b8e:	8f 5f       	subi	r24, 0xFF	; 255
    3b90:	fa e0       	ldi	r31, 0x0A	; 10
    3b92:	cf 1a       	sub	r12, r31
    3b94:	d1 08       	sbc	r13, r1
    3b96:	f7 cf       	rjmp	.-18     	; 0x3b86 <vfprintf+0x3bc>
    3b98:	b7 01       	movw	r22, r14
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3ba0:	b7 01       	movw	r22, r14
    3ba2:	c6 01       	movw	r24, r12
    3ba4:	c0 96       	adiw	r24, 0x30	; 48
    3ba6:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3baa:	54 c1       	rjmp	.+680    	; 0x3e54 <vfprintf+0x68a>
    3bac:	83 36       	cpi	r24, 0x63	; 99
    3bae:	31 f0       	breq	.+12     	; 0x3bbc <vfprintf+0x3f2>
    3bb0:	83 37       	cpi	r24, 0x73	; 115
    3bb2:	79 f0       	breq	.+30     	; 0x3bd2 <vfprintf+0x408>
    3bb4:	83 35       	cpi	r24, 0x53	; 83
    3bb6:	09 f0       	breq	.+2      	; 0x3bba <vfprintf+0x3f0>
    3bb8:	56 c0       	rjmp	.+172    	; 0x3c66 <vfprintf+0x49c>
    3bba:	20 c0       	rjmp	.+64     	; 0x3bfc <vfprintf+0x432>
    3bbc:	56 01       	movw	r10, r12
    3bbe:	32 e0       	ldi	r19, 0x02	; 2
    3bc0:	a3 0e       	add	r10, r19
    3bc2:	b1 1c       	adc	r11, r1
    3bc4:	f6 01       	movw	r30, r12
    3bc6:	80 81       	ld	r24, Z
    3bc8:	89 83       	std	Y+1, r24	; 0x01
    3bca:	01 e0       	ldi	r16, 0x01	; 1
    3bcc:	10 e0       	ldi	r17, 0x00	; 0
    3bce:	63 01       	movw	r12, r6
    3bd0:	12 c0       	rjmp	.+36     	; 0x3bf6 <vfprintf+0x42c>
    3bd2:	56 01       	movw	r10, r12
    3bd4:	f2 e0       	ldi	r31, 0x02	; 2
    3bd6:	af 0e       	add	r10, r31
    3bd8:	b1 1c       	adc	r11, r1
    3bda:	f6 01       	movw	r30, r12
    3bdc:	c0 80       	ld	r12, Z
    3bde:	d1 80       	ldd	r13, Z+1	; 0x01
    3be0:	96 fe       	sbrs	r9, 6
    3be2:	03 c0       	rjmp	.+6      	; 0x3bea <vfprintf+0x420>
    3be4:	61 2f       	mov	r22, r17
    3be6:	70 e0       	ldi	r23, 0x00	; 0
    3be8:	02 c0       	rjmp	.+4      	; 0x3bee <vfprintf+0x424>
    3bea:	6f ef       	ldi	r22, 0xFF	; 255
    3bec:	7f ef       	ldi	r23, 0xFF	; 255
    3bee:	c6 01       	movw	r24, r12
    3bf0:	0e 94 b3 21 	call	0x4366	; 0x4366 <strnlen>
    3bf4:	8c 01       	movw	r16, r24
    3bf6:	f9 2d       	mov	r31, r9
    3bf8:	ff 77       	andi	r31, 0x7F	; 127
    3bfa:	14 c0       	rjmp	.+40     	; 0x3c24 <vfprintf+0x45a>
    3bfc:	56 01       	movw	r10, r12
    3bfe:	22 e0       	ldi	r18, 0x02	; 2
    3c00:	a2 0e       	add	r10, r18
    3c02:	b1 1c       	adc	r11, r1
    3c04:	f6 01       	movw	r30, r12
    3c06:	c0 80       	ld	r12, Z
    3c08:	d1 80       	ldd	r13, Z+1	; 0x01
    3c0a:	96 fe       	sbrs	r9, 6
    3c0c:	03 c0       	rjmp	.+6      	; 0x3c14 <vfprintf+0x44a>
    3c0e:	61 2f       	mov	r22, r17
    3c10:	70 e0       	ldi	r23, 0x00	; 0
    3c12:	02 c0       	rjmp	.+4      	; 0x3c18 <vfprintf+0x44e>
    3c14:	6f ef       	ldi	r22, 0xFF	; 255
    3c16:	7f ef       	ldi	r23, 0xFF	; 255
    3c18:	c6 01       	movw	r24, r12
    3c1a:	0e 94 98 21 	call	0x4330	; 0x4330 <strnlen_P>
    3c1e:	8c 01       	movw	r16, r24
    3c20:	f9 2d       	mov	r31, r9
    3c22:	f0 68       	ori	r31, 0x80	; 128
    3c24:	9f 2e       	mov	r9, r31
    3c26:	f3 fd       	sbrc	r31, 3
    3c28:	1a c0       	rjmp	.+52     	; 0x3c5e <vfprintf+0x494>
    3c2a:	85 2d       	mov	r24, r5
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	08 17       	cp	r16, r24
    3c30:	19 07       	cpc	r17, r25
    3c32:	a8 f4       	brcc	.+42     	; 0x3c5e <vfprintf+0x494>
    3c34:	b7 01       	movw	r22, r14
    3c36:	80 e2       	ldi	r24, 0x20	; 32
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3c3e:	5a 94       	dec	r5
    3c40:	f4 cf       	rjmp	.-24     	; 0x3c2a <vfprintf+0x460>
    3c42:	f6 01       	movw	r30, r12
    3c44:	97 fc       	sbrc	r9, 7
    3c46:	85 91       	lpm	r24, Z+
    3c48:	97 fe       	sbrs	r9, 7
    3c4a:	81 91       	ld	r24, Z+
    3c4c:	6f 01       	movw	r12, r30
    3c4e:	b7 01       	movw	r22, r14
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3c56:	51 10       	cpse	r5, r1
    3c58:	5a 94       	dec	r5
    3c5a:	01 50       	subi	r16, 0x01	; 1
    3c5c:	11 09       	sbc	r17, r1
    3c5e:	01 15       	cp	r16, r1
    3c60:	11 05       	cpc	r17, r1
    3c62:	79 f7       	brne	.-34     	; 0x3c42 <vfprintf+0x478>
    3c64:	f7 c0       	rjmp	.+494    	; 0x3e54 <vfprintf+0x68a>
    3c66:	84 36       	cpi	r24, 0x64	; 100
    3c68:	11 f0       	breq	.+4      	; 0x3c6e <vfprintf+0x4a4>
    3c6a:	89 36       	cpi	r24, 0x69	; 105
    3c6c:	61 f5       	brne	.+88     	; 0x3cc6 <vfprintf+0x4fc>
    3c6e:	56 01       	movw	r10, r12
    3c70:	97 fe       	sbrs	r9, 7
    3c72:	09 c0       	rjmp	.+18     	; 0x3c86 <vfprintf+0x4bc>
    3c74:	24 e0       	ldi	r18, 0x04	; 4
    3c76:	a2 0e       	add	r10, r18
    3c78:	b1 1c       	adc	r11, r1
    3c7a:	f6 01       	movw	r30, r12
    3c7c:	60 81       	ld	r22, Z
    3c7e:	71 81       	ldd	r23, Z+1	; 0x01
    3c80:	82 81       	ldd	r24, Z+2	; 0x02
    3c82:	93 81       	ldd	r25, Z+3	; 0x03
    3c84:	0a c0       	rjmp	.+20     	; 0x3c9a <vfprintf+0x4d0>
    3c86:	f2 e0       	ldi	r31, 0x02	; 2
    3c88:	af 0e       	add	r10, r31
    3c8a:	b1 1c       	adc	r11, r1
    3c8c:	f6 01       	movw	r30, r12
    3c8e:	60 81       	ld	r22, Z
    3c90:	71 81       	ldd	r23, Z+1	; 0x01
    3c92:	07 2e       	mov	r0, r23
    3c94:	00 0c       	add	r0, r0
    3c96:	88 0b       	sbc	r24, r24
    3c98:	99 0b       	sbc	r25, r25
    3c9a:	f9 2d       	mov	r31, r9
    3c9c:	ff 76       	andi	r31, 0x6F	; 111
    3c9e:	9f 2e       	mov	r9, r31
    3ca0:	97 ff       	sbrs	r25, 7
    3ca2:	09 c0       	rjmp	.+18     	; 0x3cb6 <vfprintf+0x4ec>
    3ca4:	90 95       	com	r25
    3ca6:	80 95       	com	r24
    3ca8:	70 95       	com	r23
    3caa:	61 95       	neg	r22
    3cac:	7f 4f       	sbci	r23, 0xFF	; 255
    3cae:	8f 4f       	sbci	r24, 0xFF	; 255
    3cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb2:	f0 68       	ori	r31, 0x80	; 128
    3cb4:	9f 2e       	mov	r9, r31
    3cb6:	2a e0       	ldi	r18, 0x0A	; 10
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	a3 01       	movw	r20, r6
    3cbc:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <__ultoa_invert>
    3cc0:	c8 2e       	mov	r12, r24
    3cc2:	c6 18       	sub	r12, r6
    3cc4:	3f c0       	rjmp	.+126    	; 0x3d44 <vfprintf+0x57a>
    3cc6:	09 2d       	mov	r16, r9
    3cc8:	85 37       	cpi	r24, 0x75	; 117
    3cca:	21 f4       	brne	.+8      	; 0x3cd4 <vfprintf+0x50a>
    3ccc:	0f 7e       	andi	r16, 0xEF	; 239
    3cce:	2a e0       	ldi	r18, 0x0A	; 10
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	1d c0       	rjmp	.+58     	; 0x3d0e <vfprintf+0x544>
    3cd4:	09 7f       	andi	r16, 0xF9	; 249
    3cd6:	8f 36       	cpi	r24, 0x6F	; 111
    3cd8:	91 f0       	breq	.+36     	; 0x3cfe <vfprintf+0x534>
    3cda:	18 f4       	brcc	.+6      	; 0x3ce2 <vfprintf+0x518>
    3cdc:	88 35       	cpi	r24, 0x58	; 88
    3cde:	59 f0       	breq	.+22     	; 0x3cf6 <vfprintf+0x52c>
    3ce0:	c3 c0       	rjmp	.+390    	; 0x3e68 <vfprintf+0x69e>
    3ce2:	80 37       	cpi	r24, 0x70	; 112
    3ce4:	19 f0       	breq	.+6      	; 0x3cec <vfprintf+0x522>
    3ce6:	88 37       	cpi	r24, 0x78	; 120
    3ce8:	11 f0       	breq	.+4      	; 0x3cee <vfprintf+0x524>
    3cea:	be c0       	rjmp	.+380    	; 0x3e68 <vfprintf+0x69e>
    3cec:	00 61       	ori	r16, 0x10	; 16
    3cee:	04 ff       	sbrs	r16, 4
    3cf0:	09 c0       	rjmp	.+18     	; 0x3d04 <vfprintf+0x53a>
    3cf2:	04 60       	ori	r16, 0x04	; 4
    3cf4:	07 c0       	rjmp	.+14     	; 0x3d04 <vfprintf+0x53a>
    3cf6:	94 fe       	sbrs	r9, 4
    3cf8:	08 c0       	rjmp	.+16     	; 0x3d0a <vfprintf+0x540>
    3cfa:	06 60       	ori	r16, 0x06	; 6
    3cfc:	06 c0       	rjmp	.+12     	; 0x3d0a <vfprintf+0x540>
    3cfe:	28 e0       	ldi	r18, 0x08	; 8
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	05 c0       	rjmp	.+10     	; 0x3d0e <vfprintf+0x544>
    3d04:	20 e1       	ldi	r18, 0x10	; 16
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	02 c0       	rjmp	.+4      	; 0x3d0e <vfprintf+0x544>
    3d0a:	20 e1       	ldi	r18, 0x10	; 16
    3d0c:	32 e0       	ldi	r19, 0x02	; 2
    3d0e:	56 01       	movw	r10, r12
    3d10:	07 ff       	sbrs	r16, 7
    3d12:	09 c0       	rjmp	.+18     	; 0x3d26 <vfprintf+0x55c>
    3d14:	84 e0       	ldi	r24, 0x04	; 4
    3d16:	a8 0e       	add	r10, r24
    3d18:	b1 1c       	adc	r11, r1
    3d1a:	f6 01       	movw	r30, r12
    3d1c:	60 81       	ld	r22, Z
    3d1e:	71 81       	ldd	r23, Z+1	; 0x01
    3d20:	82 81       	ldd	r24, Z+2	; 0x02
    3d22:	93 81       	ldd	r25, Z+3	; 0x03
    3d24:	08 c0       	rjmp	.+16     	; 0x3d36 <vfprintf+0x56c>
    3d26:	f2 e0       	ldi	r31, 0x02	; 2
    3d28:	af 0e       	add	r10, r31
    3d2a:	b1 1c       	adc	r11, r1
    3d2c:	f6 01       	movw	r30, r12
    3d2e:	60 81       	ld	r22, Z
    3d30:	71 81       	ldd	r23, Z+1	; 0x01
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	a3 01       	movw	r20, r6
    3d38:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <__ultoa_invert>
    3d3c:	c8 2e       	mov	r12, r24
    3d3e:	c6 18       	sub	r12, r6
    3d40:	0f 77       	andi	r16, 0x7F	; 127
    3d42:	90 2e       	mov	r9, r16
    3d44:	96 fe       	sbrs	r9, 6
    3d46:	0b c0       	rjmp	.+22     	; 0x3d5e <vfprintf+0x594>
    3d48:	09 2d       	mov	r16, r9
    3d4a:	0e 7f       	andi	r16, 0xFE	; 254
    3d4c:	c1 16       	cp	r12, r17
    3d4e:	50 f4       	brcc	.+20     	; 0x3d64 <vfprintf+0x59a>
    3d50:	94 fe       	sbrs	r9, 4
    3d52:	0a c0       	rjmp	.+20     	; 0x3d68 <vfprintf+0x59e>
    3d54:	92 fc       	sbrc	r9, 2
    3d56:	08 c0       	rjmp	.+16     	; 0x3d68 <vfprintf+0x59e>
    3d58:	09 2d       	mov	r16, r9
    3d5a:	0e 7e       	andi	r16, 0xEE	; 238
    3d5c:	05 c0       	rjmp	.+10     	; 0x3d68 <vfprintf+0x59e>
    3d5e:	dc 2c       	mov	r13, r12
    3d60:	09 2d       	mov	r16, r9
    3d62:	03 c0       	rjmp	.+6      	; 0x3d6a <vfprintf+0x5a0>
    3d64:	dc 2c       	mov	r13, r12
    3d66:	01 c0       	rjmp	.+2      	; 0x3d6a <vfprintf+0x5a0>
    3d68:	d1 2e       	mov	r13, r17
    3d6a:	04 ff       	sbrs	r16, 4
    3d6c:	0d c0       	rjmp	.+26     	; 0x3d88 <vfprintf+0x5be>
    3d6e:	fe 01       	movw	r30, r28
    3d70:	ec 0d       	add	r30, r12
    3d72:	f1 1d       	adc	r31, r1
    3d74:	80 81       	ld	r24, Z
    3d76:	80 33       	cpi	r24, 0x30	; 48
    3d78:	11 f4       	brne	.+4      	; 0x3d7e <vfprintf+0x5b4>
    3d7a:	09 7e       	andi	r16, 0xE9	; 233
    3d7c:	09 c0       	rjmp	.+18     	; 0x3d90 <vfprintf+0x5c6>
    3d7e:	02 ff       	sbrs	r16, 2
    3d80:	06 c0       	rjmp	.+12     	; 0x3d8e <vfprintf+0x5c4>
    3d82:	d3 94       	inc	r13
    3d84:	d3 94       	inc	r13
    3d86:	04 c0       	rjmp	.+8      	; 0x3d90 <vfprintf+0x5c6>
    3d88:	80 2f       	mov	r24, r16
    3d8a:	86 78       	andi	r24, 0x86	; 134
    3d8c:	09 f0       	breq	.+2      	; 0x3d90 <vfprintf+0x5c6>
    3d8e:	d3 94       	inc	r13
    3d90:	03 fd       	sbrc	r16, 3
    3d92:	11 c0       	rjmp	.+34     	; 0x3db6 <vfprintf+0x5ec>
    3d94:	00 ff       	sbrs	r16, 0
    3d96:	06 c0       	rjmp	.+12     	; 0x3da4 <vfprintf+0x5da>
    3d98:	1c 2d       	mov	r17, r12
    3d9a:	d5 14       	cp	r13, r5
    3d9c:	80 f4       	brcc	.+32     	; 0x3dbe <vfprintf+0x5f4>
    3d9e:	15 0d       	add	r17, r5
    3da0:	1d 19       	sub	r17, r13
    3da2:	0d c0       	rjmp	.+26     	; 0x3dbe <vfprintf+0x5f4>
    3da4:	d5 14       	cp	r13, r5
    3da6:	58 f4       	brcc	.+22     	; 0x3dbe <vfprintf+0x5f4>
    3da8:	b7 01       	movw	r22, r14
    3daa:	80 e2       	ldi	r24, 0x20	; 32
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3db2:	d3 94       	inc	r13
    3db4:	f7 cf       	rjmp	.-18     	; 0x3da4 <vfprintf+0x5da>
    3db6:	d5 14       	cp	r13, r5
    3db8:	10 f4       	brcc	.+4      	; 0x3dbe <vfprintf+0x5f4>
    3dba:	5d 18       	sub	r5, r13
    3dbc:	01 c0       	rjmp	.+2      	; 0x3dc0 <vfprintf+0x5f6>
    3dbe:	51 2c       	mov	r5, r1
    3dc0:	04 ff       	sbrs	r16, 4
    3dc2:	10 c0       	rjmp	.+32     	; 0x3de4 <vfprintf+0x61a>
    3dc4:	b7 01       	movw	r22, r14
    3dc6:	80 e3       	ldi	r24, 0x30	; 48
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3dce:	02 ff       	sbrs	r16, 2
    3dd0:	17 c0       	rjmp	.+46     	; 0x3e00 <vfprintf+0x636>
    3dd2:	01 fd       	sbrc	r16, 1
    3dd4:	03 c0       	rjmp	.+6      	; 0x3ddc <vfprintf+0x612>
    3dd6:	88 e7       	ldi	r24, 0x78	; 120
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	02 c0       	rjmp	.+4      	; 0x3de0 <vfprintf+0x616>
    3ddc:	88 e5       	ldi	r24, 0x58	; 88
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	b7 01       	movw	r22, r14
    3de2:	0c c0       	rjmp	.+24     	; 0x3dfc <vfprintf+0x632>
    3de4:	80 2f       	mov	r24, r16
    3de6:	86 78       	andi	r24, 0x86	; 134
    3de8:	59 f0       	breq	.+22     	; 0x3e00 <vfprintf+0x636>
    3dea:	01 ff       	sbrs	r16, 1
    3dec:	02 c0       	rjmp	.+4      	; 0x3df2 <vfprintf+0x628>
    3dee:	8b e2       	ldi	r24, 0x2B	; 43
    3df0:	01 c0       	rjmp	.+2      	; 0x3df4 <vfprintf+0x62a>
    3df2:	80 e2       	ldi	r24, 0x20	; 32
    3df4:	07 fd       	sbrc	r16, 7
    3df6:	8d e2       	ldi	r24, 0x2D	; 45
    3df8:	b7 01       	movw	r22, r14
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3e00:	c1 16       	cp	r12, r17
    3e02:	38 f4       	brcc	.+14     	; 0x3e12 <vfprintf+0x648>
    3e04:	b7 01       	movw	r22, r14
    3e06:	80 e3       	ldi	r24, 0x30	; 48
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3e0e:	11 50       	subi	r17, 0x01	; 1
    3e10:	f7 cf       	rjmp	.-18     	; 0x3e00 <vfprintf+0x636>
    3e12:	ca 94       	dec	r12
    3e14:	f3 01       	movw	r30, r6
    3e16:	ec 0d       	add	r30, r12
    3e18:	f1 1d       	adc	r31, r1
    3e1a:	80 81       	ld	r24, Z
    3e1c:	b7 01       	movw	r22, r14
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3e24:	c1 10       	cpse	r12, r1
    3e26:	f5 cf       	rjmp	.-22     	; 0x3e12 <vfprintf+0x648>
    3e28:	15 c0       	rjmp	.+42     	; 0x3e54 <vfprintf+0x68a>
    3e2a:	f4 e0       	ldi	r31, 0x04	; 4
    3e2c:	f5 15       	cp	r31, r5
    3e2e:	60 f5       	brcc	.+88     	; 0x3e88 <vfprintf+0x6be>
    3e30:	84 e0       	ldi	r24, 0x04	; 4
    3e32:	58 1a       	sub	r5, r24
    3e34:	93 fe       	sbrs	r9, 3
    3e36:	1f c0       	rjmp	.+62     	; 0x3e76 <vfprintf+0x6ac>
    3e38:	01 11       	cpse	r16, r1
    3e3a:	27 c0       	rjmp	.+78     	; 0x3e8a <vfprintf+0x6c0>
    3e3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e3e:	23 ff       	sbrs	r18, 3
    3e40:	2a c0       	rjmp	.+84     	; 0x3e96 <vfprintf+0x6cc>
    3e42:	06 ee       	ldi	r16, 0xE6	; 230
    3e44:	10 e0       	ldi	r17, 0x00	; 0
    3e46:	39 2d       	mov	r19, r9
    3e48:	30 71       	andi	r19, 0x10	; 16
    3e4a:	93 2e       	mov	r9, r19
    3e4c:	f8 01       	movw	r30, r16
    3e4e:	84 91       	lpm	r24, Z
    3e50:	81 11       	cpse	r24, r1
    3e52:	24 c0       	rjmp	.+72     	; 0x3e9c <vfprintf+0x6d2>
    3e54:	55 20       	and	r5, r5
    3e56:	09 f4       	brne	.+2      	; 0x3e5a <vfprintf+0x690>
    3e58:	e4 cc       	rjmp	.-1592   	; 0x3822 <vfprintf+0x58>
    3e5a:	b7 01       	movw	r22, r14
    3e5c:	80 e2       	ldi	r24, 0x20	; 32
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3e64:	5a 94       	dec	r5
    3e66:	f6 cf       	rjmp	.-20     	; 0x3e54 <vfprintf+0x68a>
    3e68:	f7 01       	movw	r30, r14
    3e6a:	86 81       	ldd	r24, Z+6	; 0x06
    3e6c:	97 81       	ldd	r25, Z+7	; 0x07
    3e6e:	26 c0       	rjmp	.+76     	; 0x3ebc <vfprintf+0x6f2>
    3e70:	8f ef       	ldi	r24, 0xFF	; 255
    3e72:	9f ef       	ldi	r25, 0xFF	; 255
    3e74:	23 c0       	rjmp	.+70     	; 0x3ebc <vfprintf+0x6f2>
    3e76:	b7 01       	movw	r22, r14
    3e78:	80 e2       	ldi	r24, 0x20	; 32
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3e80:	5a 94       	dec	r5
    3e82:	51 10       	cpse	r5, r1
    3e84:	f8 cf       	rjmp	.-16     	; 0x3e76 <vfprintf+0x6ac>
    3e86:	d8 cf       	rjmp	.-80     	; 0x3e38 <vfprintf+0x66e>
    3e88:	51 2c       	mov	r5, r1
    3e8a:	b7 01       	movw	r22, r14
    3e8c:	80 2f       	mov	r24, r16
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3e94:	d3 cf       	rjmp	.-90     	; 0x3e3c <vfprintf+0x672>
    3e96:	0a ee       	ldi	r16, 0xEA	; 234
    3e98:	10 e0       	ldi	r17, 0x00	; 0
    3e9a:	d5 cf       	rjmp	.-86     	; 0x3e46 <vfprintf+0x67c>
    3e9c:	91 10       	cpse	r9, r1
    3e9e:	80 52       	subi	r24, 0x20	; 32
    3ea0:	b7 01       	movw	r22, r14
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	0e 94 be 21 	call	0x437c	; 0x437c <fputc>
    3ea8:	0f 5f       	subi	r16, 0xFF	; 255
    3eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    3eac:	cf cf       	rjmp	.-98     	; 0x3e4c <vfprintf+0x682>
    3eae:	23 e0       	ldi	r18, 0x03	; 3
    3eb0:	25 15       	cp	r18, r5
    3eb2:	10 f4       	brcc	.+4      	; 0x3eb8 <vfprintf+0x6ee>
    3eb4:	83 e0       	ldi	r24, 0x03	; 3
    3eb6:	bd cf       	rjmp	.-134    	; 0x3e32 <vfprintf+0x668>
    3eb8:	51 2c       	mov	r5, r1
    3eba:	c0 cf       	rjmp	.-128    	; 0x3e3c <vfprintf+0x672>
    3ebc:	60 96       	adiw	r28, 0x10	; 16
    3ebe:	e2 e1       	ldi	r30, 0x12	; 18
    3ec0:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__epilogue_restores__>

00003ec4 <__tablejump2__>:
    3ec4:	ee 0f       	add	r30, r30
    3ec6:	ff 1f       	adc	r31, r31
    3ec8:	05 90       	lpm	r0, Z+
    3eca:	f4 91       	lpm	r31, Z
    3ecc:	e0 2d       	mov	r30, r0
    3ece:	09 94       	ijmp

00003ed0 <__prologue_saves__>:
    3ed0:	2f 92       	push	r2
    3ed2:	3f 92       	push	r3
    3ed4:	4f 92       	push	r4
    3ed6:	5f 92       	push	r5
    3ed8:	6f 92       	push	r6
    3eda:	7f 92       	push	r7
    3edc:	8f 92       	push	r8
    3ede:	9f 92       	push	r9
    3ee0:	af 92       	push	r10
    3ee2:	bf 92       	push	r11
    3ee4:	cf 92       	push	r12
    3ee6:	df 92       	push	r13
    3ee8:	ef 92       	push	r14
    3eea:	ff 92       	push	r15
    3eec:	0f 93       	push	r16
    3eee:	1f 93       	push	r17
    3ef0:	cf 93       	push	r28
    3ef2:	df 93       	push	r29
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    3ef8:	ca 1b       	sub	r28, r26
    3efa:	db 0b       	sbc	r29, r27
    3efc:	0f b6       	in	r0, 0x3f	; 63
    3efe:	f8 94       	cli
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	0f be       	out	0x3f, r0	; 63
    3f04:	cd bf       	out	0x3d, r28	; 61
    3f06:	09 94       	ijmp

00003f08 <__epilogue_restores__>:
    3f08:	2a 88       	ldd	r2, Y+18	; 0x12
    3f0a:	39 88       	ldd	r3, Y+17	; 0x11
    3f0c:	48 88       	ldd	r4, Y+16	; 0x10
    3f0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f10:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f12:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f14:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f16:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f18:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f1a:	b9 84       	ldd	r11, Y+9	; 0x09
    3f1c:	c8 84       	ldd	r12, Y+8	; 0x08
    3f1e:	df 80       	ldd	r13, Y+7	; 0x07
    3f20:	ee 80       	ldd	r14, Y+6	; 0x06
    3f22:	fd 80       	ldd	r15, Y+5	; 0x05
    3f24:	0c 81       	ldd	r16, Y+4	; 0x04
    3f26:	1b 81       	ldd	r17, Y+3	; 0x03
    3f28:	aa 81       	ldd	r26, Y+2	; 0x02
    3f2a:	b9 81       	ldd	r27, Y+1	; 0x01
    3f2c:	ce 0f       	add	r28, r30
    3f2e:	d1 1d       	adc	r29, r1
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	cd bf       	out	0x3d, r28	; 61
    3f3a:	ed 01       	movw	r28, r26
    3f3c:	08 95       	ret

00003f3e <malloc>:
    3f3e:	0f 93       	push	r16
    3f40:	1f 93       	push	r17
    3f42:	cf 93       	push	r28
    3f44:	df 93       	push	r29
    3f46:	82 30       	cpi	r24, 0x02	; 2
    3f48:	91 05       	cpc	r25, r1
    3f4a:	10 f4       	brcc	.+4      	; 0x3f50 <malloc+0x12>
    3f4c:	82 e0       	ldi	r24, 0x02	; 2
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <__flp>
    3f54:	f0 91 54 02 	lds	r31, 0x0254	; 0x800254 <__flp+0x1>
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	a0 e0       	ldi	r26, 0x00	; 0
    3f5e:	b0 e0       	ldi	r27, 0x00	; 0
    3f60:	30 97       	sbiw	r30, 0x00	; 0
    3f62:	19 f1       	breq	.+70     	; 0x3faa <malloc+0x6c>
    3f64:	40 81       	ld	r20, Z
    3f66:	51 81       	ldd	r21, Z+1	; 0x01
    3f68:	02 81       	ldd	r16, Z+2	; 0x02
    3f6a:	13 81       	ldd	r17, Z+3	; 0x03
    3f6c:	48 17       	cp	r20, r24
    3f6e:	59 07       	cpc	r21, r25
    3f70:	c8 f0       	brcs	.+50     	; 0x3fa4 <malloc+0x66>
    3f72:	84 17       	cp	r24, r20
    3f74:	95 07       	cpc	r25, r21
    3f76:	69 f4       	brne	.+26     	; 0x3f92 <malloc+0x54>
    3f78:	10 97       	sbiw	r26, 0x00	; 0
    3f7a:	31 f0       	breq	.+12     	; 0x3f88 <malloc+0x4a>
    3f7c:	12 96       	adiw	r26, 0x02	; 2
    3f7e:	0c 93       	st	X, r16
    3f80:	12 97       	sbiw	r26, 0x02	; 2
    3f82:	13 96       	adiw	r26, 0x03	; 3
    3f84:	1c 93       	st	X, r17
    3f86:	27 c0       	rjmp	.+78     	; 0x3fd6 <malloc+0x98>
    3f88:	00 93 53 02 	sts	0x0253, r16	; 0x800253 <__flp>
    3f8c:	10 93 54 02 	sts	0x0254, r17	; 0x800254 <__flp+0x1>
    3f90:	22 c0       	rjmp	.+68     	; 0x3fd6 <malloc+0x98>
    3f92:	21 15       	cp	r18, r1
    3f94:	31 05       	cpc	r19, r1
    3f96:	19 f0       	breq	.+6      	; 0x3f9e <malloc+0x60>
    3f98:	42 17       	cp	r20, r18
    3f9a:	53 07       	cpc	r21, r19
    3f9c:	18 f4       	brcc	.+6      	; 0x3fa4 <malloc+0x66>
    3f9e:	9a 01       	movw	r18, r20
    3fa0:	bd 01       	movw	r22, r26
    3fa2:	ef 01       	movw	r28, r30
    3fa4:	df 01       	movw	r26, r30
    3fa6:	f8 01       	movw	r30, r16
    3fa8:	db cf       	rjmp	.-74     	; 0x3f60 <malloc+0x22>
    3faa:	21 15       	cp	r18, r1
    3fac:	31 05       	cpc	r19, r1
    3fae:	f9 f0       	breq	.+62     	; 0x3fee <malloc+0xb0>
    3fb0:	28 1b       	sub	r18, r24
    3fb2:	39 0b       	sbc	r19, r25
    3fb4:	24 30       	cpi	r18, 0x04	; 4
    3fb6:	31 05       	cpc	r19, r1
    3fb8:	80 f4       	brcc	.+32     	; 0x3fda <malloc+0x9c>
    3fba:	8a 81       	ldd	r24, Y+2	; 0x02
    3fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3fbe:	61 15       	cp	r22, r1
    3fc0:	71 05       	cpc	r23, r1
    3fc2:	21 f0       	breq	.+8      	; 0x3fcc <malloc+0x8e>
    3fc4:	fb 01       	movw	r30, r22
    3fc6:	93 83       	std	Z+3, r25	; 0x03
    3fc8:	82 83       	std	Z+2, r24	; 0x02
    3fca:	04 c0       	rjmp	.+8      	; 0x3fd4 <malloc+0x96>
    3fcc:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <__flp+0x1>
    3fd0:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <__flp>
    3fd4:	fe 01       	movw	r30, r28
    3fd6:	32 96       	adiw	r30, 0x02	; 2
    3fd8:	44 c0       	rjmp	.+136    	; 0x4062 <malloc+0x124>
    3fda:	fe 01       	movw	r30, r28
    3fdc:	e2 0f       	add	r30, r18
    3fde:	f3 1f       	adc	r31, r19
    3fe0:	81 93       	st	Z+, r24
    3fe2:	91 93       	st	Z+, r25
    3fe4:	22 50       	subi	r18, 0x02	; 2
    3fe6:	31 09       	sbc	r19, r1
    3fe8:	39 83       	std	Y+1, r19	; 0x01
    3fea:	28 83       	st	Y, r18
    3fec:	3a c0       	rjmp	.+116    	; 0x4062 <malloc+0x124>
    3fee:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <__brkval>
    3ff2:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <__brkval+0x1>
    3ff6:	23 2b       	or	r18, r19
    3ff8:	41 f4       	brne	.+16     	; 0x400a <malloc+0xcc>
    3ffa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3ffe:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4002:	30 93 52 02 	sts	0x0252, r19	; 0x800252 <__brkval+0x1>
    4006:	20 93 51 02 	sts	0x0251, r18	; 0x800251 <__brkval>
    400a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    400e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4012:	21 15       	cp	r18, r1
    4014:	31 05       	cpc	r19, r1
    4016:	41 f4       	brne	.+16     	; 0x4028 <malloc+0xea>
    4018:	2d b7       	in	r18, 0x3d	; 61
    401a:	3e b7       	in	r19, 0x3e	; 62
    401c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4020:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4024:	24 1b       	sub	r18, r20
    4026:	35 0b       	sbc	r19, r21
    4028:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <__brkval>
    402c:	f0 91 52 02 	lds	r31, 0x0252	; 0x800252 <__brkval+0x1>
    4030:	e2 17       	cp	r30, r18
    4032:	f3 07       	cpc	r31, r19
    4034:	a0 f4       	brcc	.+40     	; 0x405e <malloc+0x120>
    4036:	2e 1b       	sub	r18, r30
    4038:	3f 0b       	sbc	r19, r31
    403a:	28 17       	cp	r18, r24
    403c:	39 07       	cpc	r19, r25
    403e:	78 f0       	brcs	.+30     	; 0x405e <malloc+0x120>
    4040:	ac 01       	movw	r20, r24
    4042:	4e 5f       	subi	r20, 0xFE	; 254
    4044:	5f 4f       	sbci	r21, 0xFF	; 255
    4046:	24 17       	cp	r18, r20
    4048:	35 07       	cpc	r19, r21
    404a:	48 f0       	brcs	.+18     	; 0x405e <malloc+0x120>
    404c:	4e 0f       	add	r20, r30
    404e:	5f 1f       	adc	r21, r31
    4050:	50 93 52 02 	sts	0x0252, r21	; 0x800252 <__brkval+0x1>
    4054:	40 93 51 02 	sts	0x0251, r20	; 0x800251 <__brkval>
    4058:	81 93       	st	Z+, r24
    405a:	91 93       	st	Z+, r25
    405c:	02 c0       	rjmp	.+4      	; 0x4062 <malloc+0x124>
    405e:	e0 e0       	ldi	r30, 0x00	; 0
    4060:	f0 e0       	ldi	r31, 0x00	; 0
    4062:	cf 01       	movw	r24, r30
    4064:	df 91       	pop	r29
    4066:	cf 91       	pop	r28
    4068:	1f 91       	pop	r17
    406a:	0f 91       	pop	r16
    406c:	08 95       	ret

0000406e <free>:
    406e:	cf 93       	push	r28
    4070:	df 93       	push	r29
    4072:	00 97       	sbiw	r24, 0x00	; 0
    4074:	09 f4       	brne	.+2      	; 0x4078 <free+0xa>
    4076:	81 c0       	rjmp	.+258    	; 0x417a <free+0x10c>
    4078:	fc 01       	movw	r30, r24
    407a:	32 97       	sbiw	r30, 0x02	; 2
    407c:	13 82       	std	Z+3, r1	; 0x03
    407e:	12 82       	std	Z+2, r1	; 0x02
    4080:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <__flp>
    4084:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <__flp+0x1>
    4088:	10 97       	sbiw	r26, 0x00	; 0
    408a:	81 f4       	brne	.+32     	; 0x40ac <free+0x3e>
    408c:	20 81       	ld	r18, Z
    408e:	31 81       	ldd	r19, Z+1	; 0x01
    4090:	82 0f       	add	r24, r18
    4092:	93 1f       	adc	r25, r19
    4094:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <__brkval>
    4098:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <__brkval+0x1>
    409c:	28 17       	cp	r18, r24
    409e:	39 07       	cpc	r19, r25
    40a0:	51 f5       	brne	.+84     	; 0x40f6 <free+0x88>
    40a2:	f0 93 52 02 	sts	0x0252, r31	; 0x800252 <__brkval+0x1>
    40a6:	e0 93 51 02 	sts	0x0251, r30	; 0x800251 <__brkval>
    40aa:	67 c0       	rjmp	.+206    	; 0x417a <free+0x10c>
    40ac:	ed 01       	movw	r28, r26
    40ae:	20 e0       	ldi	r18, 0x00	; 0
    40b0:	30 e0       	ldi	r19, 0x00	; 0
    40b2:	ce 17       	cp	r28, r30
    40b4:	df 07       	cpc	r29, r31
    40b6:	40 f4       	brcc	.+16     	; 0x40c8 <free+0x5a>
    40b8:	4a 81       	ldd	r20, Y+2	; 0x02
    40ba:	5b 81       	ldd	r21, Y+3	; 0x03
    40bc:	9e 01       	movw	r18, r28
    40be:	41 15       	cp	r20, r1
    40c0:	51 05       	cpc	r21, r1
    40c2:	f1 f0       	breq	.+60     	; 0x4100 <free+0x92>
    40c4:	ea 01       	movw	r28, r20
    40c6:	f5 cf       	rjmp	.-22     	; 0x40b2 <free+0x44>
    40c8:	d3 83       	std	Z+3, r29	; 0x03
    40ca:	c2 83       	std	Z+2, r28	; 0x02
    40cc:	40 81       	ld	r20, Z
    40ce:	51 81       	ldd	r21, Z+1	; 0x01
    40d0:	84 0f       	add	r24, r20
    40d2:	95 1f       	adc	r25, r21
    40d4:	c8 17       	cp	r28, r24
    40d6:	d9 07       	cpc	r29, r25
    40d8:	59 f4       	brne	.+22     	; 0x40f0 <free+0x82>
    40da:	88 81       	ld	r24, Y
    40dc:	99 81       	ldd	r25, Y+1	; 0x01
    40de:	84 0f       	add	r24, r20
    40e0:	95 1f       	adc	r25, r21
    40e2:	02 96       	adiw	r24, 0x02	; 2
    40e4:	91 83       	std	Z+1, r25	; 0x01
    40e6:	80 83       	st	Z, r24
    40e8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ea:	9b 81       	ldd	r25, Y+3	; 0x03
    40ec:	93 83       	std	Z+3, r25	; 0x03
    40ee:	82 83       	std	Z+2, r24	; 0x02
    40f0:	21 15       	cp	r18, r1
    40f2:	31 05       	cpc	r19, r1
    40f4:	29 f4       	brne	.+10     	; 0x4100 <free+0x92>
    40f6:	f0 93 54 02 	sts	0x0254, r31	; 0x800254 <__flp+0x1>
    40fa:	e0 93 53 02 	sts	0x0253, r30	; 0x800253 <__flp>
    40fe:	3d c0       	rjmp	.+122    	; 0x417a <free+0x10c>
    4100:	e9 01       	movw	r28, r18
    4102:	fb 83       	std	Y+3, r31	; 0x03
    4104:	ea 83       	std	Y+2, r30	; 0x02
    4106:	49 91       	ld	r20, Y+
    4108:	59 91       	ld	r21, Y+
    410a:	c4 0f       	add	r28, r20
    410c:	d5 1f       	adc	r29, r21
    410e:	ec 17       	cp	r30, r28
    4110:	fd 07       	cpc	r31, r29
    4112:	61 f4       	brne	.+24     	; 0x412c <free+0xbe>
    4114:	80 81       	ld	r24, Z
    4116:	91 81       	ldd	r25, Z+1	; 0x01
    4118:	84 0f       	add	r24, r20
    411a:	95 1f       	adc	r25, r21
    411c:	02 96       	adiw	r24, 0x02	; 2
    411e:	e9 01       	movw	r28, r18
    4120:	99 83       	std	Y+1, r25	; 0x01
    4122:	88 83       	st	Y, r24
    4124:	82 81       	ldd	r24, Z+2	; 0x02
    4126:	93 81       	ldd	r25, Z+3	; 0x03
    4128:	9b 83       	std	Y+3, r25	; 0x03
    412a:	8a 83       	std	Y+2, r24	; 0x02
    412c:	e0 e0       	ldi	r30, 0x00	; 0
    412e:	f0 e0       	ldi	r31, 0x00	; 0
    4130:	12 96       	adiw	r26, 0x02	; 2
    4132:	8d 91       	ld	r24, X+
    4134:	9c 91       	ld	r25, X
    4136:	13 97       	sbiw	r26, 0x03	; 3
    4138:	00 97       	sbiw	r24, 0x00	; 0
    413a:	19 f0       	breq	.+6      	; 0x4142 <free+0xd4>
    413c:	fd 01       	movw	r30, r26
    413e:	dc 01       	movw	r26, r24
    4140:	f7 cf       	rjmp	.-18     	; 0x4130 <free+0xc2>
    4142:	8d 91       	ld	r24, X+
    4144:	9c 91       	ld	r25, X
    4146:	11 97       	sbiw	r26, 0x01	; 1
    4148:	9d 01       	movw	r18, r26
    414a:	2e 5f       	subi	r18, 0xFE	; 254
    414c:	3f 4f       	sbci	r19, 0xFF	; 255
    414e:	82 0f       	add	r24, r18
    4150:	93 1f       	adc	r25, r19
    4152:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <__brkval>
    4156:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <__brkval+0x1>
    415a:	28 17       	cp	r18, r24
    415c:	39 07       	cpc	r19, r25
    415e:	69 f4       	brne	.+26     	; 0x417a <free+0x10c>
    4160:	30 97       	sbiw	r30, 0x00	; 0
    4162:	29 f4       	brne	.+10     	; 0x416e <free+0x100>
    4164:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <__flp+0x1>
    4168:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <__flp>
    416c:	02 c0       	rjmp	.+4      	; 0x4172 <free+0x104>
    416e:	13 82       	std	Z+3, r1	; 0x03
    4170:	12 82       	std	Z+2, r1	; 0x02
    4172:	b0 93 52 02 	sts	0x0252, r27	; 0x800252 <__brkval+0x1>
    4176:	a0 93 51 02 	sts	0x0251, r26	; 0x800251 <__brkval>
    417a:	df 91       	pop	r29
    417c:	cf 91       	pop	r28
    417e:	08 95       	ret

00004180 <__ftoa_engine>:
    4180:	28 30       	cpi	r18, 0x08	; 8
    4182:	08 f0       	brcs	.+2      	; 0x4186 <__ftoa_engine+0x6>
    4184:	27 e0       	ldi	r18, 0x07	; 7
    4186:	33 27       	eor	r19, r19
    4188:	da 01       	movw	r26, r20
    418a:	99 0f       	add	r25, r25
    418c:	31 1d       	adc	r19, r1
    418e:	87 fd       	sbrc	r24, 7
    4190:	91 60       	ori	r25, 0x01	; 1
    4192:	00 96       	adiw	r24, 0x00	; 0
    4194:	61 05       	cpc	r22, r1
    4196:	71 05       	cpc	r23, r1
    4198:	39 f4       	brne	.+14     	; 0x41a8 <__ftoa_engine+0x28>
    419a:	32 60       	ori	r19, 0x02	; 2
    419c:	2e 5f       	subi	r18, 0xFE	; 254
    419e:	3d 93       	st	X+, r19
    41a0:	30 e3       	ldi	r19, 0x30	; 48
    41a2:	2a 95       	dec	r18
    41a4:	e1 f7       	brne	.-8      	; 0x419e <__ftoa_engine+0x1e>
    41a6:	08 95       	ret
    41a8:	9f 3f       	cpi	r25, 0xFF	; 255
    41aa:	30 f0       	brcs	.+12     	; 0x41b8 <__ftoa_engine+0x38>
    41ac:	80 38       	cpi	r24, 0x80	; 128
    41ae:	71 05       	cpc	r23, r1
    41b0:	61 05       	cpc	r22, r1
    41b2:	09 f0       	breq	.+2      	; 0x41b6 <__ftoa_engine+0x36>
    41b4:	3c 5f       	subi	r19, 0xFC	; 252
    41b6:	3c 5f       	subi	r19, 0xFC	; 252
    41b8:	3d 93       	st	X+, r19
    41ba:	91 30       	cpi	r25, 0x01	; 1
    41bc:	08 f0       	brcs	.+2      	; 0x41c0 <__ftoa_engine+0x40>
    41be:	80 68       	ori	r24, 0x80	; 128
    41c0:	91 1d       	adc	r25, r1
    41c2:	df 93       	push	r29
    41c4:	cf 93       	push	r28
    41c6:	1f 93       	push	r17
    41c8:	0f 93       	push	r16
    41ca:	ff 92       	push	r15
    41cc:	ef 92       	push	r14
    41ce:	19 2f       	mov	r17, r25
    41d0:	98 7f       	andi	r25, 0xF8	; 248
    41d2:	96 95       	lsr	r25
    41d4:	e9 2f       	mov	r30, r25
    41d6:	96 95       	lsr	r25
    41d8:	96 95       	lsr	r25
    41da:	e9 0f       	add	r30, r25
    41dc:	ff 27       	eor	r31, r31
    41de:	e8 5b       	subi	r30, 0xB8	; 184
    41e0:	fe 4f       	sbci	r31, 0xFE	; 254
    41e2:	99 27       	eor	r25, r25
    41e4:	33 27       	eor	r19, r19
    41e6:	ee 24       	eor	r14, r14
    41e8:	ff 24       	eor	r15, r15
    41ea:	a7 01       	movw	r20, r14
    41ec:	e7 01       	movw	r28, r14
    41ee:	05 90       	lpm	r0, Z+
    41f0:	08 94       	sec
    41f2:	07 94       	ror	r0
    41f4:	28 f4       	brcc	.+10     	; 0x4200 <__ftoa_engine+0x80>
    41f6:	36 0f       	add	r19, r22
    41f8:	e7 1e       	adc	r14, r23
    41fa:	f8 1e       	adc	r15, r24
    41fc:	49 1f       	adc	r20, r25
    41fe:	51 1d       	adc	r21, r1
    4200:	66 0f       	add	r22, r22
    4202:	77 1f       	adc	r23, r23
    4204:	88 1f       	adc	r24, r24
    4206:	99 1f       	adc	r25, r25
    4208:	06 94       	lsr	r0
    420a:	a1 f7       	brne	.-24     	; 0x41f4 <__ftoa_engine+0x74>
    420c:	05 90       	lpm	r0, Z+
    420e:	07 94       	ror	r0
    4210:	28 f4       	brcc	.+10     	; 0x421c <__ftoa_engine+0x9c>
    4212:	e7 0e       	add	r14, r23
    4214:	f8 1e       	adc	r15, r24
    4216:	49 1f       	adc	r20, r25
    4218:	56 1f       	adc	r21, r22
    421a:	c1 1d       	adc	r28, r1
    421c:	77 0f       	add	r23, r23
    421e:	88 1f       	adc	r24, r24
    4220:	99 1f       	adc	r25, r25
    4222:	66 1f       	adc	r22, r22
    4224:	06 94       	lsr	r0
    4226:	a1 f7       	brne	.-24     	; 0x4210 <__ftoa_engine+0x90>
    4228:	05 90       	lpm	r0, Z+
    422a:	07 94       	ror	r0
    422c:	28 f4       	brcc	.+10     	; 0x4238 <__ftoa_engine+0xb8>
    422e:	f8 0e       	add	r15, r24
    4230:	49 1f       	adc	r20, r25
    4232:	56 1f       	adc	r21, r22
    4234:	c7 1f       	adc	r28, r23
    4236:	d1 1d       	adc	r29, r1
    4238:	88 0f       	add	r24, r24
    423a:	99 1f       	adc	r25, r25
    423c:	66 1f       	adc	r22, r22
    423e:	77 1f       	adc	r23, r23
    4240:	06 94       	lsr	r0
    4242:	a1 f7       	brne	.-24     	; 0x422c <__ftoa_engine+0xac>
    4244:	05 90       	lpm	r0, Z+
    4246:	07 94       	ror	r0
    4248:	20 f4       	brcc	.+8      	; 0x4252 <__ftoa_engine+0xd2>
    424a:	49 0f       	add	r20, r25
    424c:	56 1f       	adc	r21, r22
    424e:	c7 1f       	adc	r28, r23
    4250:	d8 1f       	adc	r29, r24
    4252:	99 0f       	add	r25, r25
    4254:	66 1f       	adc	r22, r22
    4256:	77 1f       	adc	r23, r23
    4258:	88 1f       	adc	r24, r24
    425a:	06 94       	lsr	r0
    425c:	a9 f7       	brne	.-22     	; 0x4248 <__ftoa_engine+0xc8>
    425e:	84 91       	lpm	r24, Z
    4260:	10 95       	com	r17
    4262:	17 70       	andi	r17, 0x07	; 7
    4264:	41 f0       	breq	.+16     	; 0x4276 <__ftoa_engine+0xf6>
    4266:	d6 95       	lsr	r29
    4268:	c7 95       	ror	r28
    426a:	57 95       	ror	r21
    426c:	47 95       	ror	r20
    426e:	f7 94       	ror	r15
    4270:	e7 94       	ror	r14
    4272:	1a 95       	dec	r17
    4274:	c1 f7       	brne	.-16     	; 0x4266 <__ftoa_engine+0xe6>
    4276:	ee ee       	ldi	r30, 0xEE	; 238
    4278:	f0 e0       	ldi	r31, 0x00	; 0
    427a:	68 94       	set
    427c:	15 90       	lpm	r1, Z+
    427e:	15 91       	lpm	r17, Z+
    4280:	35 91       	lpm	r19, Z+
    4282:	65 91       	lpm	r22, Z+
    4284:	95 91       	lpm	r25, Z+
    4286:	05 90       	lpm	r0, Z+
    4288:	7f e2       	ldi	r23, 0x2F	; 47
    428a:	73 95       	inc	r23
    428c:	e1 18       	sub	r14, r1
    428e:	f1 0a       	sbc	r15, r17
    4290:	43 0b       	sbc	r20, r19
    4292:	56 0b       	sbc	r21, r22
    4294:	c9 0b       	sbc	r28, r25
    4296:	d0 09       	sbc	r29, r0
    4298:	c0 f7       	brcc	.-16     	; 0x428a <__ftoa_engine+0x10a>
    429a:	e1 0c       	add	r14, r1
    429c:	f1 1e       	adc	r15, r17
    429e:	43 1f       	adc	r20, r19
    42a0:	56 1f       	adc	r21, r22
    42a2:	c9 1f       	adc	r28, r25
    42a4:	d0 1d       	adc	r29, r0
    42a6:	7e f4       	brtc	.+30     	; 0x42c6 <__ftoa_engine+0x146>
    42a8:	70 33       	cpi	r23, 0x30	; 48
    42aa:	11 f4       	brne	.+4      	; 0x42b0 <__ftoa_engine+0x130>
    42ac:	8a 95       	dec	r24
    42ae:	e6 cf       	rjmp	.-52     	; 0x427c <__ftoa_engine+0xfc>
    42b0:	e8 94       	clt
    42b2:	01 50       	subi	r16, 0x01	; 1
    42b4:	30 f0       	brcs	.+12     	; 0x42c2 <__ftoa_engine+0x142>
    42b6:	08 0f       	add	r16, r24
    42b8:	0a f4       	brpl	.+2      	; 0x42bc <__ftoa_engine+0x13c>
    42ba:	00 27       	eor	r16, r16
    42bc:	02 17       	cp	r16, r18
    42be:	08 f4       	brcc	.+2      	; 0x42c2 <__ftoa_engine+0x142>
    42c0:	20 2f       	mov	r18, r16
    42c2:	23 95       	inc	r18
    42c4:	02 2f       	mov	r16, r18
    42c6:	7a 33       	cpi	r23, 0x3A	; 58
    42c8:	28 f0       	brcs	.+10     	; 0x42d4 <__ftoa_engine+0x154>
    42ca:	79 e3       	ldi	r23, 0x39	; 57
    42cc:	7d 93       	st	X+, r23
    42ce:	2a 95       	dec	r18
    42d0:	e9 f7       	brne	.-6      	; 0x42cc <__ftoa_engine+0x14c>
    42d2:	10 c0       	rjmp	.+32     	; 0x42f4 <__ftoa_engine+0x174>
    42d4:	7d 93       	st	X+, r23
    42d6:	2a 95       	dec	r18
    42d8:	89 f6       	brne	.-94     	; 0x427c <__ftoa_engine+0xfc>
    42da:	06 94       	lsr	r0
    42dc:	97 95       	ror	r25
    42de:	67 95       	ror	r22
    42e0:	37 95       	ror	r19
    42e2:	17 95       	ror	r17
    42e4:	17 94       	ror	r1
    42e6:	e1 18       	sub	r14, r1
    42e8:	f1 0a       	sbc	r15, r17
    42ea:	43 0b       	sbc	r20, r19
    42ec:	56 0b       	sbc	r21, r22
    42ee:	c9 0b       	sbc	r28, r25
    42f0:	d0 09       	sbc	r29, r0
    42f2:	98 f0       	brcs	.+38     	; 0x431a <__ftoa_engine+0x19a>
    42f4:	23 95       	inc	r18
    42f6:	7e 91       	ld	r23, -X
    42f8:	73 95       	inc	r23
    42fa:	7a 33       	cpi	r23, 0x3A	; 58
    42fc:	08 f0       	brcs	.+2      	; 0x4300 <__ftoa_engine+0x180>
    42fe:	70 e3       	ldi	r23, 0x30	; 48
    4300:	7c 93       	st	X, r23
    4302:	20 13       	cpse	r18, r16
    4304:	b8 f7       	brcc	.-18     	; 0x42f4 <__ftoa_engine+0x174>
    4306:	7e 91       	ld	r23, -X
    4308:	70 61       	ori	r23, 0x10	; 16
    430a:	7d 93       	st	X+, r23
    430c:	30 f0       	brcs	.+12     	; 0x431a <__ftoa_engine+0x19a>
    430e:	83 95       	inc	r24
    4310:	71 e3       	ldi	r23, 0x31	; 49
    4312:	7d 93       	st	X+, r23
    4314:	70 e3       	ldi	r23, 0x30	; 48
    4316:	2a 95       	dec	r18
    4318:	e1 f7       	brne	.-8      	; 0x4312 <__ftoa_engine+0x192>
    431a:	11 24       	eor	r1, r1
    431c:	ef 90       	pop	r14
    431e:	ff 90       	pop	r15
    4320:	0f 91       	pop	r16
    4322:	1f 91       	pop	r17
    4324:	cf 91       	pop	r28
    4326:	df 91       	pop	r29
    4328:	99 27       	eor	r25, r25
    432a:	87 fd       	sbrc	r24, 7
    432c:	90 95       	com	r25
    432e:	08 95       	ret

00004330 <strnlen_P>:
    4330:	fc 01       	movw	r30, r24
    4332:	05 90       	lpm	r0, Z+
    4334:	61 50       	subi	r22, 0x01	; 1
    4336:	70 40       	sbci	r23, 0x00	; 0
    4338:	01 10       	cpse	r0, r1
    433a:	d8 f7       	brcc	.-10     	; 0x4332 <strnlen_P+0x2>
    433c:	80 95       	com	r24
    433e:	90 95       	com	r25
    4340:	8e 0f       	add	r24, r30
    4342:	9f 1f       	adc	r25, r31
    4344:	08 95       	ret

00004346 <memcpy>:
    4346:	fb 01       	movw	r30, r22
    4348:	dc 01       	movw	r26, r24
    434a:	02 c0       	rjmp	.+4      	; 0x4350 <memcpy+0xa>
    434c:	01 90       	ld	r0, Z+
    434e:	0d 92       	st	X+, r0
    4350:	41 50       	subi	r20, 0x01	; 1
    4352:	50 40       	sbci	r21, 0x00	; 0
    4354:	d8 f7       	brcc	.-10     	; 0x434c <memcpy+0x6>
    4356:	08 95       	ret

00004358 <memset>:
    4358:	dc 01       	movw	r26, r24
    435a:	01 c0       	rjmp	.+2      	; 0x435e <memset+0x6>
    435c:	6d 93       	st	X+, r22
    435e:	41 50       	subi	r20, 0x01	; 1
    4360:	50 40       	sbci	r21, 0x00	; 0
    4362:	e0 f7       	brcc	.-8      	; 0x435c <memset+0x4>
    4364:	08 95       	ret

00004366 <strnlen>:
    4366:	fc 01       	movw	r30, r24
    4368:	61 50       	subi	r22, 0x01	; 1
    436a:	70 40       	sbci	r23, 0x00	; 0
    436c:	01 90       	ld	r0, Z+
    436e:	01 10       	cpse	r0, r1
    4370:	d8 f7       	brcc	.-10     	; 0x4368 <strnlen+0x2>
    4372:	80 95       	com	r24
    4374:	90 95       	com	r25
    4376:	8e 0f       	add	r24, r30
    4378:	9f 1f       	adc	r25, r31
    437a:	08 95       	ret

0000437c <fputc>:
    437c:	0f 93       	push	r16
    437e:	1f 93       	push	r17
    4380:	cf 93       	push	r28
    4382:	df 93       	push	r29
    4384:	fb 01       	movw	r30, r22
    4386:	23 81       	ldd	r18, Z+3	; 0x03
    4388:	21 fd       	sbrc	r18, 1
    438a:	03 c0       	rjmp	.+6      	; 0x4392 <fputc+0x16>
    438c:	8f ef       	ldi	r24, 0xFF	; 255
    438e:	9f ef       	ldi	r25, 0xFF	; 255
    4390:	2c c0       	rjmp	.+88     	; 0x43ea <fputc+0x6e>
    4392:	22 ff       	sbrs	r18, 2
    4394:	16 c0       	rjmp	.+44     	; 0x43c2 <fputc+0x46>
    4396:	46 81       	ldd	r20, Z+6	; 0x06
    4398:	57 81       	ldd	r21, Z+7	; 0x07
    439a:	24 81       	ldd	r18, Z+4	; 0x04
    439c:	35 81       	ldd	r19, Z+5	; 0x05
    439e:	42 17       	cp	r20, r18
    43a0:	53 07       	cpc	r21, r19
    43a2:	44 f4       	brge	.+16     	; 0x43b4 <fputc+0x38>
    43a4:	a0 81       	ld	r26, Z
    43a6:	b1 81       	ldd	r27, Z+1	; 0x01
    43a8:	9d 01       	movw	r18, r26
    43aa:	2f 5f       	subi	r18, 0xFF	; 255
    43ac:	3f 4f       	sbci	r19, 0xFF	; 255
    43ae:	31 83       	std	Z+1, r19	; 0x01
    43b0:	20 83       	st	Z, r18
    43b2:	8c 93       	st	X, r24
    43b4:	26 81       	ldd	r18, Z+6	; 0x06
    43b6:	37 81       	ldd	r19, Z+7	; 0x07
    43b8:	2f 5f       	subi	r18, 0xFF	; 255
    43ba:	3f 4f       	sbci	r19, 0xFF	; 255
    43bc:	37 83       	std	Z+7, r19	; 0x07
    43be:	26 83       	std	Z+6, r18	; 0x06
    43c0:	14 c0       	rjmp	.+40     	; 0x43ea <fputc+0x6e>
    43c2:	8b 01       	movw	r16, r22
    43c4:	ec 01       	movw	r28, r24
    43c6:	fb 01       	movw	r30, r22
    43c8:	00 84       	ldd	r0, Z+8	; 0x08
    43ca:	f1 85       	ldd	r31, Z+9	; 0x09
    43cc:	e0 2d       	mov	r30, r0
    43ce:	09 95       	icall
    43d0:	89 2b       	or	r24, r25
    43d2:	e1 f6       	brne	.-72     	; 0x438c <fputc+0x10>
    43d4:	d8 01       	movw	r26, r16
    43d6:	16 96       	adiw	r26, 0x06	; 6
    43d8:	8d 91       	ld	r24, X+
    43da:	9c 91       	ld	r25, X
    43dc:	17 97       	sbiw	r26, 0x07	; 7
    43de:	01 96       	adiw	r24, 0x01	; 1
    43e0:	17 96       	adiw	r26, 0x07	; 7
    43e2:	9c 93       	st	X, r25
    43e4:	8e 93       	st	-X, r24
    43e6:	16 97       	sbiw	r26, 0x06	; 6
    43e8:	ce 01       	movw	r24, r28
    43ea:	df 91       	pop	r29
    43ec:	cf 91       	pop	r28
    43ee:	1f 91       	pop	r17
    43f0:	0f 91       	pop	r16
    43f2:	08 95       	ret

000043f4 <__ultoa_invert>:
    43f4:	fa 01       	movw	r30, r20
    43f6:	aa 27       	eor	r26, r26
    43f8:	28 30       	cpi	r18, 0x08	; 8
    43fa:	51 f1       	breq	.+84     	; 0x4450 <__ultoa_invert+0x5c>
    43fc:	20 31       	cpi	r18, 0x10	; 16
    43fe:	81 f1       	breq	.+96     	; 0x4460 <__ultoa_invert+0x6c>
    4400:	e8 94       	clt
    4402:	6f 93       	push	r22
    4404:	6e 7f       	andi	r22, 0xFE	; 254
    4406:	6e 5f       	subi	r22, 0xFE	; 254
    4408:	7f 4f       	sbci	r23, 0xFF	; 255
    440a:	8f 4f       	sbci	r24, 0xFF	; 255
    440c:	9f 4f       	sbci	r25, 0xFF	; 255
    440e:	af 4f       	sbci	r26, 0xFF	; 255
    4410:	b1 e0       	ldi	r27, 0x01	; 1
    4412:	3e d0       	rcall	.+124    	; 0x4490 <__ultoa_invert+0x9c>
    4414:	b4 e0       	ldi	r27, 0x04	; 4
    4416:	3c d0       	rcall	.+120    	; 0x4490 <__ultoa_invert+0x9c>
    4418:	67 0f       	add	r22, r23
    441a:	78 1f       	adc	r23, r24
    441c:	89 1f       	adc	r24, r25
    441e:	9a 1f       	adc	r25, r26
    4420:	a1 1d       	adc	r26, r1
    4422:	68 0f       	add	r22, r24
    4424:	79 1f       	adc	r23, r25
    4426:	8a 1f       	adc	r24, r26
    4428:	91 1d       	adc	r25, r1
    442a:	a1 1d       	adc	r26, r1
    442c:	6a 0f       	add	r22, r26
    442e:	71 1d       	adc	r23, r1
    4430:	81 1d       	adc	r24, r1
    4432:	91 1d       	adc	r25, r1
    4434:	a1 1d       	adc	r26, r1
    4436:	20 d0       	rcall	.+64     	; 0x4478 <__ultoa_invert+0x84>
    4438:	09 f4       	brne	.+2      	; 0x443c <__ultoa_invert+0x48>
    443a:	68 94       	set
    443c:	3f 91       	pop	r19
    443e:	2a e0       	ldi	r18, 0x0A	; 10
    4440:	26 9f       	mul	r18, r22
    4442:	11 24       	eor	r1, r1
    4444:	30 19       	sub	r19, r0
    4446:	30 5d       	subi	r19, 0xD0	; 208
    4448:	31 93       	st	Z+, r19
    444a:	de f6       	brtc	.-74     	; 0x4402 <__ultoa_invert+0xe>
    444c:	cf 01       	movw	r24, r30
    444e:	08 95       	ret
    4450:	46 2f       	mov	r20, r22
    4452:	47 70       	andi	r20, 0x07	; 7
    4454:	40 5d       	subi	r20, 0xD0	; 208
    4456:	41 93       	st	Z+, r20
    4458:	b3 e0       	ldi	r27, 0x03	; 3
    445a:	0f d0       	rcall	.+30     	; 0x447a <__ultoa_invert+0x86>
    445c:	c9 f7       	brne	.-14     	; 0x4450 <__ultoa_invert+0x5c>
    445e:	f6 cf       	rjmp	.-20     	; 0x444c <__ultoa_invert+0x58>
    4460:	46 2f       	mov	r20, r22
    4462:	4f 70       	andi	r20, 0x0F	; 15
    4464:	40 5d       	subi	r20, 0xD0	; 208
    4466:	4a 33       	cpi	r20, 0x3A	; 58
    4468:	18 f0       	brcs	.+6      	; 0x4470 <__ultoa_invert+0x7c>
    446a:	49 5d       	subi	r20, 0xD9	; 217
    446c:	31 fd       	sbrc	r19, 1
    446e:	40 52       	subi	r20, 0x20	; 32
    4470:	41 93       	st	Z+, r20
    4472:	02 d0       	rcall	.+4      	; 0x4478 <__ultoa_invert+0x84>
    4474:	a9 f7       	brne	.-22     	; 0x4460 <__ultoa_invert+0x6c>
    4476:	ea cf       	rjmp	.-44     	; 0x444c <__ultoa_invert+0x58>
    4478:	b4 e0       	ldi	r27, 0x04	; 4
    447a:	a6 95       	lsr	r26
    447c:	97 95       	ror	r25
    447e:	87 95       	ror	r24
    4480:	77 95       	ror	r23
    4482:	67 95       	ror	r22
    4484:	ba 95       	dec	r27
    4486:	c9 f7       	brne	.-14     	; 0x447a <__ultoa_invert+0x86>
    4488:	00 97       	sbiw	r24, 0x00	; 0
    448a:	61 05       	cpc	r22, r1
    448c:	71 05       	cpc	r23, r1
    448e:	08 95       	ret
    4490:	9b 01       	movw	r18, r22
    4492:	ac 01       	movw	r20, r24
    4494:	0a 2e       	mov	r0, r26
    4496:	06 94       	lsr	r0
    4498:	57 95       	ror	r21
    449a:	47 95       	ror	r20
    449c:	37 95       	ror	r19
    449e:	27 95       	ror	r18
    44a0:	ba 95       	dec	r27
    44a2:	c9 f7       	brne	.-14     	; 0x4496 <__ultoa_invert+0xa2>
    44a4:	62 0f       	add	r22, r18
    44a6:	73 1f       	adc	r23, r19
    44a8:	84 1f       	adc	r24, r20
    44aa:	95 1f       	adc	r25, r21
    44ac:	a0 1d       	adc	r26, r0
    44ae:	08 95       	ret

000044b0 <_exit>:
    44b0:	f8 94       	cli

000044b2 <__stop_program>:
    44b2:	ff cf       	rjmp	.-2      	; 0x44b2 <__stop_program>
